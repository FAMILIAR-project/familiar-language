// specialization vs arbitrary edit (semantics vs syntactic operators?)


fm1 = FM ( A : B [C] ; B : D E ; )  
fm2 = FM ( A : B [C] ; B : [D] E ; )

resultFM1 = copy fm1

removeFeature resultFM1.D // D is mandatory
 
cmp1 = compare fm1 resultFM1 // arbitrary 

assert (cmp1 eq ARBITRARY) 

resultFM2 = copy fm2

removeFeature resultFM2.D // D is optional

cmp2 = compare resultFM2 fm2 // specialization: resultFM2 is a specialization of fm2

assert (cmp2 eq SPECIALIZATION)  

// same issue (specialization vs arbitrary): the case of Xor-group


fm3 = FM ( A : B [C] ; C : (D|E|F) ; )
removeFeature fm3.D
removeFeature fm3.E
// what about F? optional or mandatory?

println fm3
removeFeature fm3.F


// remove features with constraints

fm4 = FM ( A : B [C] [D] ; )
fm5 = FM ( U : W X [Y] [Z] ; )
fm6 = aggregate fm4 fm5 with { C excludes Y ; }

removeFeature fm6.C // what's happen for the constraint C excludes Y?

removeFeature fm6.Y // same issue what's happen for the constraint C excludes Y?


// another example

fm7 = aggregate fm4 fm5 with { C and D implies Y or Z ; }
removeFeature fm7.C // what's happen for the constraint C and D implies Y or Z?

removeFeature fm7.D // same issue what's happen for the constraint C and D implies Y or Z?


// "synchronizing" feature models

fm8 = FM ( A : B [C] [D] ; )
fm9 = FM ( U : W X [Y] [Z] ; )


// let say a user is doing some stuff with fm8

removeFeature fm8.C 


// then in the code you put something like

fm10 = aggregate fm8 fm9 with { ~C implies Z ; }

// what about feature Z? fm10 is still consistent?

// currently we have: "error: cannot bind expression C to any feature".


// let say an other user is doing some stuff with fm9

removeFeature fm9.Y 

// then in the code you put something like

fm11 = aggregate fm8 fm9 with { ~C implies Y ; }

// same issues: what about the consistency of fm11 ?





exit
