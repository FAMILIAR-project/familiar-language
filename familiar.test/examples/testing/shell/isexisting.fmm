fm1 = FM (A: [B] C; B : (D|E|F); C : (G|H)+ ; )
fm2 = FM (A: [B] [C]; B : (D|E)+; C : (G|H) ; )

bF = isExisting F // only in fm1

FALSE = false
assert (bF) 
bG = isExisting G // in fm1 and fm2: conflict

assert (bG eq FALSE)
bA = isExisting A // in fm1 and fm2: conflict

assert (bA eq FALSE)
bG2 = isExisting fm1.G // explicit
 
assert (bG2)
bwv = isExisting fm898 // there is no fm898 -- not a feature variable or a variable in a namespace

assert (bwv eq FALSE) 


fm3 = copy fm1
bFbis = isExisting F // in fm1 and now in fm3

assert (bFbis eq FALSE) 
bFexplicit = isExisting fm1.F 
assert (bFexplicit)
bFexplicitbis = isExisting fm3.F 
assert (bFexplicit)

run "fooA" into nsA
bfm4 = isExisting fm4 // there is only one fm4 at this step

assert (bfm4)
run "fooB" into nsB // now comes the problem

bfm4bis = isExisting fm4
assert (bfm4bis eq FALSE)
bfm4explicit = isExisting nsA.fm4
assert (bfm4explicit)

bZ = isExisting Z // feature Z is in nsA.fm4 and nsB.fm4

assert (bZ eq FALSE)
bZbis = isExisting fm4.Z // feature Z is in nsA.fm4 and nsB.fm4

assert (bZbis eq FALSE)
bZexplicit = isExisting nsA.fm4.Z 
assert (bZexplicit)

bY = isExisting Y // feature Y only in nsA.fm4

assert (bY)
fmY = whichfm Y
fmYexpected = whichfm nsA.fm4.Y
assert (fmY eq fmYexpected)