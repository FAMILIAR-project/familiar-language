fm1 = FM (A: [B] C; B : (D|E|F); C : (G|H)+ ; )
fm2 = FM (A: [B] [C]; B : (D|E)+; C : (G|H) ; )

bF = isConflicting F // only in fm1

FALSE = false
assert (bF eq FALSE) 
bG = isConflicting G // in fm1 and fm2

assert (bG)
bA = isConflicting A // in fm1 and fm2

assert (bA)
bG2 = isConflicting fm1.G // explicit
 
assert (bG2 eq FALSE)
bwv = isConflicting fm898 // there is no fm898 -- not a feature variable or a variable in a namespace

assert (bwv eq FALSE) // there is no ambiguity


fm3 = copy fm1
bFbis = isConflicting F // in fm1 and now in fm3

assert (bFbis) 
bFexplicit = isConflicting fm1.F 
assert (bFexplicit eq FALSE)
bFexplicitbis = isConflicting fm3.F 
assert (bFexplicit eq FALSE)

run "fooA" into nsA
bfm4 = isConflicting fm4 // there is only one fm4 at this step

TRUE = true
assert (bfm4 eq FALSE)
run "fooB" into nsB // now comes the problem

bfm4bis = isConflicting fm4
assert (bfm4bis eq TRUE)
bfm4explicit = isConflicting nsA.fm4
assert (bfm4explicit eq FALSE)

bZ = isConflicting Z // feature Z is in nsA.fm4 and nsB.fm4

assert (bZ eq TRUE)
bZbis = isConflicting fm4.Z // feature Z is in nsA.fm4 and nsB.fm4

assert (bZbis eq TRUE)
bZexplicit = isConflicting nsA.fm4.Z 
assert (bZexplicit eq FALSE)

bY = isConflicting Y // feature Y only in nsA.fm4

assert (bY eq FALSE)
fmY = whichfm Y
fmYexpected = whichfm nsA.fm4.Y
assert (fmY eq fmYexpected)








