// testing the 'sibling' operation
// syntacs: b = sibling a
// a is a variable of feature type
// b is a set of features f1, f2, ..., fn sibling of a 
// b = sibling fm1::A
// b is a set of features f1, f2, ..., fn sibling of A (present in the feature model fm1)

fm1 = FM (A : B [C] ; B : E F ; C : (I|J|K) ; )

sIK = sibling J
nsibling_J = size sIK
nexpected = 2
assert (nsibling_J eq nexpected)
fC = parent fm1.J

sB = sibling fC
nexpected = 1
nsB = size sB 
assert (nsB eq nexpected)

fm2 = FM (A : B [C] ; B : E ; )

sE = sibling fm2.E
bsE = setIsEmpty sE
run "assertTrue" bsE into devnull


// test mysbling macro
// see also sibling2.fmm

fm4 = FM (A : B [C] ; B : (E|F|G|H)+ ; H : (I|J|K); )
fH = parent fm4.I // H
sexpected = sibling fH // {E, F, G}
run "mysibling" fH into sibl 
nres = size sibl.res
THREE = 3
assert (nres eq THREE)
assert (sexpected eq sibl.res)


exit

//print_var children_parent_ft
//if (not (parent_ft neq parent_ft)) then print_var parent_ft end
