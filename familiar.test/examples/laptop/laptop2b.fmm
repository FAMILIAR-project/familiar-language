// laptopScenario.fmm: implementation of suppliers' scenario
run "newlaptop" // new family of laptop firstly designed 
// load repositories
run "repositoryGC" into GC
//run "repositoryCPU" into CPU
//run "repositoryMonitor" into monitor
// we map the 'newlaptop' graphic card description with the graphic card products of the repository 
originalGC = extract GraphicCard // newlaptop.laptop: no ambiguity
renameFeature originalGC.GraphicCard as GC
// products of the 'GC' repository should cover the entire set of products described by 'originalGC'
allProductsGC = merge sunion { GC.* }
gc_merged = merge intersection { originalGC allProductsGC }
bgc_merged = isValid gc_merged
if (not (bgc_merged)) then 	print "No product can be provided" 	ls exit end
cmp_gc = compare allProductsGC originalGC 
//if (cmp_gc eq GENERALIZATION || cmp_gc eq ARBITRARY) then 	gc_losed = merge diff original allProductsGC 	s_gc_losed = configs gc_losed print "Some products cannot be provided: " s_gc_losed end
// at this step, *all* products of originalGC can be provided by suppliers
//assert (cmp_gc eq REFACTORING || cmp_gc eq SPECIALIZATION)
// nevertheless, some suppliers are out of the competition or provide products with too many features
GC_suppliers_in = setEmpty // create an empty set 
foreach (supp in GC.*) do 	s_supp = merge intersection { originalGC supp }	b_supp = isValid s_supp	if (not (b_supp)) then	print "Supplier is unable to provide any product: " println supp	 else		supp_updated = merge intersection { supp originalGC	}	setAdd GC_suppliers_in supp_updated end end
//assert ((size GC_suppliers_in) >= 1) // obviously, there is at least one available supplier 
// configuration process
//gcProduct = configuration originalGC





