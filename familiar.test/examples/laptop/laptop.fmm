run "newlaptop" // new family of laptop firstly designed 
// load repositories
run "repositoryGC" into GC
run "repositoryCPU" into CPU
run "repositoryMonitor" into monitor
		/******** MAPPINGS ********/
// e.g., we map the 'newlaptop' graphic card description 
// with the graphic card products of the repository 
originalGC = extract newlaptop.laptop.GraphicCard 

// products of the 'GC' repository should 
// cover the entire set of products described by 'originalGC'
productsGC = merge sunion GC.*
gc_merged = merge intersection originalGC productsGC 
if (not (valid? gc_merged)) then 
	print "No product can be provided" 
	exit	
end
cmp_gc = (compare originalGC productsGC)
if (cmp_gc eq GENERALIZATION) then 
	print "Some products cannot be provided: "
	gc_losed = merge diff productsGC originalGC 
	print_var (configs gc_losed)
	exit // stop the program
end
// at this step, *all* products of originalGC can be provided by suppliers
assert (cmp_gc eq REFACTORING || cmp_gc eq SPECIALIZATION)
// nevertheless, some suppliers are out of the competition or provide products with too many features
GC_suppliers_in = set_empty
foreach (supp in GC.*) do 
	if (not (valid? (merge intersection originalGC supp))) then
		print "Supplier is unable to provide any product: " 
		print_var supp
	else
		supp_updated = merge intersection supp originalGC // some products are no longer needed
		set_add GC_suppliers_in supp_updated
	end
end
assert ((set_card GC_suppliers_in) >= 1) // obviously, there is at least one available supplier 





