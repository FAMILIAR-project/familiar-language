<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE featureMX_model SYSTEM "DTD_Saving_Files.dtd">
<featureMX_model name="Bike2.0">
	<meta>
		<data name="author">sample</data>
		<data name="version">10/16/2009</data>
	</meta>
	<vfd_star_diagram><![CDATA[
		:mand Bike <!>root feature</!>
			<const>
				:sel
					[ :ext (Rims.Height == {50}) ==> ((Frame.Size >= 15) && (Frame.Size <= 22)) ]
					[ :ext (Rims.Height == {60}) ==> ((Frame.Size >= 17) && (Frame.Size <= 28)) ]
				    [ :ext (Rims.Height == {70}) ==> ((Frame.Size >= 19) && (Frame.Size <= 28)) ]
					[ :ext (Person.BikeType == {Racer}) ==> ((Gears.Number >= 19) && (Gears.Number <= 28) && !(Mudguard) && !(Basket)) ]
					[ :ext (Person.BikeType == {Mountain}) ==> ((Gears.Number >= 30) && !(Carrier) && !(Basket)) ]
					[ :ext (Person.BikeType == {City}) ==> ((Gears.Number >= 22) && (Gears.Number <= 35)) ]
					[ :ext (Person.BikeType == {Grandma}) ==>  ((Gears.Number >= 25) && (Gears.Number <= 35) && Carrier && Propstand && Basket)) ]
					[ :ext !(Frame.Internal)  ==> !(PropStand) ]
					[ :ext ((Person.BikeType == {Racer, City}) && (Person.Height == {150-160})) ==>  ((Frame.Size >= 17) && (Frame.Size <= 20)) ]
					[ :ext ((Person.BikeType == {Racer, City}) && (Person.Height == {160-170})) ==>  ((Frame.Size >= 19) && (Frame.Size <= 22)) ]
					[ :ext ((Person.BikeType == {Racer, City}) && (Person.Height == {170-180})) ==>  ((Frame.Size >= 21) && (Frame.Size <= 24)) ]
					[ :ext ((Person.BikeType == {Racer, City}) && (Person.Height == {180-190})) ==>  ((Frame.Size >= 23) && (Frame.Size <= 28)) ]
					[ :ext ((Person.BikeType == {Racer, City}) && (Person.Height == {190-200})) ==>  ((Frame.Size >= 25) && (Frame.Size <= 28)) ]
					[ :ext ((Person.BikeType == {Mountain}) && (Person.Height == {150-160})) ==>  ((Frame.Size >= 15) && (Frame.Size <= 18)) ]
					[ :ext ((Person.BikeType == {Mountain}) && (Person.Height == {160-170})) ==>  ((Frame.Size >= 16) && (Frame.Size <= 19)) ]
					[ :ext ((Person.BikeType == {Mountain}) && (Person.Height == {170-180})) ==>  ((Frame.Size >= 17) && (Frame.Size <= 20)) ]
					[ :ext ((Person.BikeType == {Mountain}) && (Person.Height == {180-190})) ==>  ((Frame.Size >= 18) && (Frame.Size <= 22)) ]
					[ :ext (PanaracerAvventura || PanaracerCategoryPro || PanaracerTourguard || PanaracerEverride || PanaracerStradius) ==> !(Sidereflex) ]
					[ :ext (Person.BikeType == {Mountain, Racer}) ==> !(Pedal.Type == {Standard}) ]
					[ :ext (Person.BikeType == {City, Grandma}) ==> (Pedal.Type == {Standard}) ]
					[ :ext Rims.Height == Tires.Height ]
					[ :ext Rims.Width == Tires.Width ]
					[ :ext Frame.Internal == Gear.Internal]
					[ :ext Pedal.Type == Shoes.PedalType ]
					[ :ext Frame.BikeType == Gear.BikeType ]
					[ :ext Person.Gender == Frame.Gender ]
					[ :ext Person.BikeType == Frame.BikeType ]
			</const>
   			<gr> [6, 8] :mand Person
   							<att> :enum Gender <val> 
   													Female,
   													Male
   											   </val>
   								  :enum BikeType <val> 
   								  					  City,
   								  					  Grandma,
   								  					  Racer,
   								  					  Mountain
   								  				 </val>
   								  :enum Height <val> 
   								  					  150-160,
   								  					  160-170,
   								  					  170-180,
   								  					  180-190,
   								  					  190-200
   								  				 </val>
   							</att>
   							
   					   :opt Accessories
   					   		<const> 
   					   			:sel
   					   				[ :cnf Carrier ==>  Mudguard ]
   					   				[ :cnf !(Pump && Bottle) ]
   					   		</const> 
   					   		<gr> [0,9] :opt :prim Carrier
   					   				   :opt :prim Mudguard
   					   				   :opt :prim Lock
   					   				   :opt :prim Pump
   					   				   :opt :prim Bottle
   					   				   :opt :prim Barket
   					   				   :opt :prim Cateye
   					   				   :opt :prim Sidereflex
 									   :opt :prim Frontreflex
   					   				   :opt :prim Propstand
   					   		</gr>	
   					   :mand Pedal
   					   		<att> :enum Type <val> :sel
   					   								   Standard,
   					   								   SPD,
   					   								   Clip
   					   					     </val>
   					   		</att>
   					   		<gr> [1,1] :mand :prim BlackPlastic
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {Standard}) ] 
   					   		  				</const> 
   					   				   :mand :prim CampagnoloChorus
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {SPD}) ] 
   					   		  				</const>
   					   				   :mand :prim CampagnoloRecord
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {SPD}) ] 
   					   		  				</const>
   					   				   :mand :prim PD5500
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {SPD}) ] 
   					   		  				</const>
   					   				   :mand :prim PD6600
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {SPD}) ] 
   					   		  				</const>
   					   				   :mand :prim PDC101
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {Standard}) ] 
   					   		  				</const> 
   					   				   :mand :prim PDC105
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {Standard}) ] 
   					   		  				</const> 
   					   				   :mand :prim PDM434
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {Clip}) ] 
   					   		  				</const>
   					   				   :mand :prim PDM545
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Type = {Clip}) ] 
   					   		  				</const>
   					   		</gr>
   					   		
   					   :opt Shoes
   					   		<att> :enum PedalType <val> :sel
   					   										Standard,
   					   										SPD,
   					   										Clip
   					   							  </val>
   					   		</att>
   					   		<gr> [1,1] :mand :prim SHR072
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.PedalType = {Clip}) ] 
   					   		  				</const>
   					   				   :mand :prim SHR090
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.PedalType = {SPD}) ] 
   					   		  				</const>
   					   				   :mand :prim SHR150
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.PedalType = {Clip}) ] 
   					   		  				</const>
   					   				   :mand :prim SHR212
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.PedalType = {SPD}) ] 
   					   		  				</const>
   					   		</gr>
   					   			
   					   :mand Rims
   					   		<att> :int Height <val> :sel {50, 65, 70}
                     			  				    :desel 0	
                     			  			  </val>
                     			  :real Width <val> :sel {0.85, 1.00, 1.25, 1.50, 1.75}
                     			  				    :desel 0	
                     			  			  </val>			  											</att>
   					   		<gr> [1,1] :mand :prim CampagnoloAtlantaAero
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {65}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>
   					   				   :mand :prim MA3
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {70}) && (Parent.Width = {0.85}) ] 
   					   		  				</const>
   					   				   :mand :prim T519
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {70}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>
   					   				   :mand :prim CXP33
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {70}) && (Parent.Width = {1.25}) ] 
   					   		  				</const>
   					   				   :mand :prim OpenPro
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {70}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>
   					   				   :mand :prim X221
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {65}) && (Parent.Width = {1.50}) ] 
   					   		  				</const>
   					   				   :mand :prim Cosmos
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {65}) && (Parent.Width = {1.25}) ] 
   					   		  				</const>
   					   				   :mand :prim Cross
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {50}) && (Parent.Width = {1.50}) ] 
   					   		  				</const>
   					   				   :mand :prim CampagnoloMexicoAero
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {65}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>
   					   				   :mand :prim CampagnoloProton
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {65}) && (Parent.Width = {0.85}) ] 
   					   		  				</const>
   					   				   :mand :prim CampagnoloMoskvaAero
   					   						<<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {65}) && (Parent.Width = {0.85}) ] 
   					   		  				</const>
   					   					:mand :prim Helium
   					   						<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Height = {50}) && (Parent.Width = {1.25}) ] 
   					   		  				</const>	
   					   		</gr>
   					   		
   					   :mand Tires
   					   		<att> :int Height <val> :sel {50,65,70}
                     			  				    :desel 0	
                     			  			  </val>
                     			  :real Width <val> :sel {0.85, 1.00, 1.25, 1.50, 1.75}
                     			  				    :desel 0	
                     			  			  </val>			  
                     			  :int Profile <val> :sel {19, 20, 21, 22, 23, 25, 28, 30, 32, 35, 38}
                     			  				     :desel 0
                     			  			   </val>												</att>
   					   		<gr> [1,1] :mand :prim Triatlon
   					   		  				<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20}) && (Parent.Height = {65}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>
   					   				   :mand :prim Courier  
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {23,32}) && (Parent.Height = {70}) && (Parent.Width = {0.85, 1.25}) ] 
   					   		  				</const>
   					   				   :mand :prim Tecno
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20, 23, 28}) && (Parent.Height = {70}) && (Parent.Width = {1.00, 1.25}) ] 
   					   		  				</const>  
   					   				   :mand :prim Roma
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {19, 22, 25}) && (Parent.Height = {70}) && (Parent.Width = {0.85, 1.00}) ] 
   					   		  				</const>  
   					   				   :mand :prim Lizzard
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {35, 38}) && (Parent.Height = {70}) && (Parent.Width = {1.50, 1.75}) ] 
   					   		  				</const>  
   					   				   :mand :prim Atlanta
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20, 21}) && (Parent.Height = {70}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>
   					   				   :mand :prim Track
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {22}) && (Parent.Height = {65}) && (Parent.Width = {0.85}) ] 
   					   		  				</const>  
   					   				   :mand :prim Extreme
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {21}) && (Parent.Height = {70}) && (Parent.Width = {1.00}) ] 
   					   		  				</const>  
   					   				   :mand :prim AllWeather
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20, 22}) && (Parent.Height = {70}) && (Parent.Width = {1.25}) ] 
   					   		  				</const>  
   					   				   :mand :prim Beaumont
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20}) && (Parent.Height = {65}) && (Parent.Width = {1.25, 1.50}) ] 
   					   		  				</const>  
   					   				   :mand :prim PanaracerAvventura
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20}) && (Parent.Height = {65}) && (Parent.Width = {1.25, 1.00}) ] 
   					   		  				</const>  
   					   				   :mand :prim PanaracerCategoryPro
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {20, 22}) && (Parent.Height = {65, 70}) && (Parent.Width = {1.00, 1.25}) ] 
   					   		  				</const>  
   					   				   :mand :prim PanaracerEverride 
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {22, 25}) && (Parent.Height = {65, 70}) && (Parent.Width = {1.00, 1.25}) ] 
   					   		  				</const> 
   					   				   :mand :prim PanaracerTourguard
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {22, 23, 25, 28, 30}) && (Parent.Height = {65, 70}) &&
   					   		  							(Parent.Width = {1.00, 1.25}) ] 
   					   		  				</const>  
   					   				   :mand :prim PanaracerStradius
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {19, 20}) && (Parent.Height = {65, 70}) && (Parent.Width = {0.85, 1.25}) ] 
   					   		  				</const>  
   					   				   :mand :prim Kenda
   					   				   		<const>
   					   		  					:sel
   					   		  						[ :ext (Parent.Profile = {35}) && (Parent.Height = {50}) && (Parent.Width = {1.25, 1.50}) ] 
   					   		  				</const>  
   					   		</gr>
   					   				
   					   :opt Gear
   					   			<att> :int Number <val> :sel {1, 3, 4, 5, 7, 16, 18, 21, 24, 27}
                     			  				        :desel 1	
                     			  			      </val>
                     			      :enum BikeType <val> :sel
                     			  						       City,
                     			  						       Racer,
                     			  						       Mountain,
                     			  						       Grandma
                     			  					       :desel nil
                     			  			         </val>
                     			      :bool Internal <val> :desel .true.
                     			  				     </val>												    </att>
							    <const>
							    	:sel
							    		[ :ext (Gear.BikeType == {Racer}) ==> !(Gear.Internal) }
							    </const>
   					   			<gr> [1,1] :mand :prim DuraAce
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {18}) ] 
   					   							</const>
   					   					   :mand :prim Ultegra
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {16}) ] 
   					   							</const>
   					   					   :mand :prim Tiagra
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {16}) ] 
   					   							</const>
   					   					   :mand :prim Sora
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Mountain}) && !(Parent.Internal) && (Parent.Number = {21}) ] 
   					   							</const>
   					   					   :mand :prim Acera
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Mountain}) && !(Parent.Internal) && (Parent.Number = {24}) ] 
   					   							</const>
   					   					   :mand :prim ShimanoNexus
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer, Mountain, Grandma}) && (Parent.Internal) && 
   					   										(Parent.Number = {3, 4, 7}) ] 
   					   							</const>
   					   					   :mand :prim ShimanoRSXSTI
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {16}) ] 
   					   							</const>
   					   					   :mand :prim Shimano105STI
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {16}) ] 
   					   							</const>
   					   					   :mand :prim CampagnoloAvantiErgopower
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {16}) ] 
   					   							</const>
   					   					   :mand :prim CampagnoloMirageErgopower
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {18}) ] 
   					   							</const>
   					   					   :mand :prim CampagnoloVeloce
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Racer}) && !(Parent.Internal) && (Parent.Number = {18}) ] 
   					   							</const>
   					   					   :mand :prim ShimanoDeore
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Mountain}) && !(Parent.Internal) && (Parent.Number = {27}) ] 
   					   							</const>
   					   					   :mand :prim ShimanoAcer
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {Mountain}) && !(Parent.Internal) && (Parent.Number = {24}) ] 
   					   							</const>
   					   					   :mand :prim Torpedo
   					   							<const>
   					   								:sel
   					   									[ :ext (Parent.BikeType = {City, Grandma}) && (Parent.Internal) && (Parent.Number = {3, 5}) ] 
   					   							</const>
   					   			</gr>
   					   
   					   :mand Frame
   					   		<att> :enum Color <val> :sel   					   		                			Black,   					   				   					BlackPurple,   					   				   					Blue,   					   				   					Brown,   					   				   					Creme,   					   				   					Green,   					   				   					Grey,   					   				   					Blue,   					   				   					Green,   					   				   					Purple,   					   				   					Red,   					   				   					Silver,   					   				   					White,   					   				   					Yellow
   					   				   				:desel nil                     						  </val>
                     			  :int Size <val> :sel {13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28}
                     			  				  :desel 0	
                     			  			</val>
                     			  :enum Gender <val> :sel
                     			  						 Female,
                     			  						 Male
                     			  					 :desel nil
                     			  			   </val>
                     			  :enum BikeType <val> :sel
                     			  						   City,
                     			  						   Racer,
                     			  						   Mountain,
                     			  						   Grandma
                     			  					   :desel nil
                     			  			     </val>
                     			  :bool Internal <val> :sel {.true., .false.}
                     			  					   :desel .false.
                     			  				 </val>												</att>
   					   		<const> 
   					   			:sel
   					   				[ :ext (Person.BikeType = {City, Grandma}) ==> (Gear.Internal) ]
   					   				[ :ext (Person.BikeType = {Racer}) ==> !(Gear.Internal) ]
   					   		</const>
   					   		<gr> [1,1] :mand :prim ButterflyClassic
   					   						<const> 												:sel 
													[ :ext Parent.Color in {Black, Red, Creme, Blue} && (Parent.Size >= 20) && (Parent.Size <= 23) && 
														(Parent.Internal) && (Parent.gender = {Female}) && (Parent.BikeType ={Grandma})]											</const>
   					   				   :mand :prim CenturionBasic
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Green, Blue, Black} && (Parent.Size = {22, 23, 25}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionBasicFree
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {SilverLightBlue}  && (Parent.Size = {22, 23, 25}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionBasicFreeMeral
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {LightBlue} && (Parent.Size = {20, 22, 23}) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionBasicLight
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Purple, Red} && (Parent.Size = {22,23,25}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionBasicLightMeral
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Red}  && (Parent.Size = {20,22,23}) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionBasicMeral
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Green, Blue, Black} && (Parent.Size = {20,22,23}) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionBoulevard
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Red}  && (Parent.Size >= 20) &&  && (Parent.Size <= 23) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={Boulevard})]											</const>
   					   				   :mand :prim CenturionChallenger
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Blue, Brown, LightBlue, Purple, Red}  && (Parent.Size = {17,19,20,22,23}) && 
														(Parent.Internal) && (Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionChallengerLady
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Purple, LightBlue, Red, Black}  && (Parent.Size = {20,22,23}) 
														&& (Parent.Internal) && (Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionCrazyPoint
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Brown, Blue, Black} && (Parent.Size = {15,17,19,20,22})  
														&& (Parent.Internal) && (Parent.gender = {Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim CenturionCrazyPointLady
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Red, Black} && (Parent.Size = {19,17,19,20}) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim CenturionDarkImage
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Blue} && (Parent.Size = {15,17,19,20,22}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim CenturionDiscovery
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Green, Purple} && (Parent.Size = {22,23,25}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionDiscoveryLady
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Purple, Silver, Red} && (Parent.Size = {20,22,23}) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionEternity
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Red, Green, Purple, Blue} && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionEternityLady
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Blue} && (Parent.Size = {20,22,23}) && (Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionFarOut
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Red} && (Parent.Size = {15,17,19,20,22}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim CenturionHelium
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Green, LightGreen} && (Parent.Size = {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim CenturionInvincible
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Red, LightGreen}  && (Parent.Size = {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim CenturionNitrogen
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Green, LightBlue}  && (Parent.Size = {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim CenturionOffDuty
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Green, Purple} && (Parent.Size = {15,17,19,20,22}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim CenturionOxygen
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, Blue, Purple}  && (Parent.Size = {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim CenturionOxygenMeral
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver} && (Parent.Size = {19,20,21,22}) && !(Parent.Internal) && 
														(Parent.gender = {Female}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim CenturionUltimate
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {LightBlue} && (Parent.Size = {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim ColibriStreetBikePlus
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Black, Grey, Yellow, Blue, White, Red, Green, Silver LightBlue}  && 
														(Parent.Size = {20,22,24}) && (Parent.Internal) && (Parent.gender = {Male}) && 
														(Parent.BikeType ={City})]											</const>
   					   				   :mand :prim Faggin7005
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Black}  && (Parent.Size = {20,22,23,25,28}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim Faggin7020
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {BlackPurple} && (Parent.Size = {20,22,23,25,28}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim FagginEaston
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Black, White} && (Parent.Size = {20,22,23,25,28}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											</const>
   					   				   :mand :prim JupiterCruiser
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver} && (Parent.Size = {15,17,19,21}) && (Parent.Internal) && 
														(Parent.gender = {Female, Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim JupiterInside
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver}  && (Parent.Internal) && (Parent.BikeType = {City, Mountain}) && 
														(((Parent.Size = {20,21,22}) && (Parent.gender = {Female}))  || ((Parent.Size = {21,22,24}) && 
														(Parent.gender = {Male})))]											</const>
   					   				   :mand :prim JupiterMillenium
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver}  && (Parent.Internal) && (Parent.BikeType = {City, Mountain}) && 
														(((Parent.Size = {20,21,22,24}) && (Parent.gender = {Male}))  || ((Parent.Size = {20,21}) && 
														(Parent.gender = {Female})))]											</const>
   					   				   :mand :prim JupiterStraight
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver, LightBlue}  && (Parent.Size = {22,23,24}) && (Parent.Internal) && 
														(Parent.gender = {Female, Male}) && (Parent.BikeType ={City})]											</const>
   					   				   :mand :prim KildemoesLogic32Derailleur
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver} && (Parent.Internal) && (Parent.BikeType = {City, Mountain}) && 
														(((Parent.Size = {20,22,23}) && (Parent.gender = {Male}))  || ((Parent.Size = {20,22}) && 
														(Parent.gender = {Female})))]											</const>
   					   				   :mand :prim KildemoesPrimates
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Green} && (Parent.Size = {16,18,20}) && (Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim Schwinn Mesa
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Red} && (Parent.Size >= 13) && (Parent.Size <= 23) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   				   :mand :prim SchwinnMoab3 
   					   				   		<const> 												:sel 
													[ :ext Parent.Color = {Silver} && (Parent.Size >= 13) && (Parent.Size <= 23) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Mountain})]											</const>
   					   		</gr>	
   			</gr>
]]></vfd_star_diagram>
</featureMX_model>