:author = Paul;
:version = 2.4;
:date = 10/21/2009;
:type :enum Gender :in {
						  Male,
						  Female
					 };
:type :enum BikeType :in { 
   						    City,
   						    Grandma,
   						    Racer,
   							Mountain
   					   };
:type :enum PedalType :in {
   							 Standard,
   						     SPD,
   							 Clip
   		                }; 
:type :int Height :in {
   						 50, 
   						 65, 
   						 70
   					};
:type :real Width :in {
   						 0.85, 
   					     1.00, 
   					     1.25, 
   						 1.50, 
   					     1.75
   					};
}
:type :int PurchasePrice :in {
	                          50,
	                          75
	                         };
:type Measurement :struct{
		   			    Height Height;
		   			    Width Width;
		          };
						  
		:root Bike
			:data{
				  (Key1, This is the root feature),
				  (Key2, This feature reprensents a bike)
			} 
			:const{
				:sel
					(Rims.Measurement.Height == 5}) ==> ((Frame.Size >= 15) && (Frame.Size <= 22));
					(Person.BikeType == Racer) ==> ((Gears.Number >= 19) && (Gears.Number <= 28) && !(Mudguard) && !(Basket));
					(Person.BikeType == Grandma) ==>  ((Gears.Number >= 25) && (Gears.Number <= 35) && Carrier && Propstand && Basket));
					!(Frame.Internal)  ==> !(PropStand);
					((Person.BikeType :in {Racer, City}) && (Person.Height == 150-160)) ==>  ((Frame.Size >= 17) && (Frame.Size <= 20));
					((Person.BikeType == Mountain) && (Person.Height == 150-160)) ==>  ((Frame.Size >= 15) && (Frame.Size <= 18));
					(PanaracerAvventura || PanaracerCategoryPro || PanaracerTourguard || PanaracerEverride || PanaracerStradius) ==> !(Sidereflex);
					(Person.BikeType :in {Mountain, Racer}) ==> !(Pedal.Type == Standard);
					Bike->Rims.Measurement.Height == Bike->Tires.Measurement.Height;
					Bike->Rims.Measurement.Width == Bike->Tires.Measurement.Width;
					Bike->Frame.Internal == Bike->Gear.Internal;
					Bike->Pedal.Type == Bike->Shoes.PedalType;
					Bike->Frame.BikeType == Bike->Gear.BikeType;
					Bike->Person.Gender == Bike->Frame.Gender;
					Bike->Person.BikeType == Bike->Frame.BikeType;
					:include(AdditionalConstraints.vfd);
			}
   			:gr[6, 8]{  Person
   							:att{ Gender Gender; 
   								  BikeType BikeType;
   								  :enum Height :in { 
   								  					150-160,
   								  					160-170,
   								  					170-180,
   								  					180-190,
   								  					190-200
   								               };
   							}
   					   :opt Accessories
   					   		:const{ 
   					   			:sel
   					   				Carrier ==>  Mudguard;
   					   				!(Pump && Bottle);
   					   		}
   					   		:gr[0,9]{  :opt :prim Carrier
   					   				   :opt :prim Mudguard
   					   				   :opt :prim Lock
   					   				   :opt :prim Pump
   					   				   :opt :prim Bottle
   					   				   :opt :prim Barket
   					   				   :opt :prim Cateye
   					   				   :opt :prim Sidereflex
 									   :opt :prim Frontreflex
   					   				   :opt :prim Propstand
   					   		}
   					   			
   					   Pedal
   					   		:att{ PedalType Type;
   					   		}
   					   		:gr[1,1]{  :prim BlackPlastic
   					   						:const{
   					   		  					:sel
   					   		  						Parent.Type == Standard; 
   					   		  				} 
   					   				   :prim CampagnoloChorus
   					   				   		:const{
   					   		  					:sel
   					   		  						Parent.Type == SPD; 
   					   		  				}
   					   		}
   					   		
   					   :opt Shoes
   					   		:att{ PedalType PedalType
   					   				:desel nil;		
   					   		}
   					   		:gr[1,1]{ :prim SHR072
   					   						:const{
   					   		  					:sel
   					   		  						Parent.PedalType == Clip; 
   					   						}
   					   				   :prim SHR090
   					   				   		:const{
   					   		  					:sel
   					   		  						Parent.PedalType == SPD; 
   					   				   		}
   					   		}
   					   			
   					   Rims
   					   		:att{ :super Measurement Measurement;			  				   					   		}
   					   		:gr[1,1]{  :prim CampagnoloAtlantaAero
   					   						:const{
   					   		  					:sel
   					   		  						(Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 1.00); 
   					   		  				}
   					   				   :prim MA3
   					   						:const{
   					   		  					:sel
   					   		  						(Parent.Measurement.Height  == 70) && (Parent.Measurement.Width  == 0.85); 
   					   		  				} 
   					   		}
   					   		
   					   Tires
   					   		:att{ Measurement Measurement;			  
                     			  :int Profile :in {19, 20, 35};
                     			  :int SellingPrice :sel (:children.PurchasePrice * 2)					   					   		}
   					   		:gr[1,1]{  :prim PanaracerStradius
   					   						:att{ PurchasePrice PurchasePrice :sel 50
   					   						}
   					   				   		:const{
   					   		  					:sel
   					   		  						(Parent.Profile :in {19, 20}) && (Parent.Measurement.Height :in {65, 70}) && 
   					   		  							(Parent.Measurement.Width :in {0.85, 1.25}); 
   					   		  				}  
   					   				   :prim Kenda
   					   				   		:att{ PurchasePrice PurchasePrice :sel 75
   					   						}
   					   				   		:const{
   					   		  					:sel
   					   		  						(Parent.Profile == 35) && (Parent.Measurement.Height == 50) && 
   					   		  							(Parent.Measurement.Width :in {1.25, 1.50}); 
   					   		  				}  
   					   		}
   					   				
   					   :opt Gear
   					   			:att{ :int Number :in {3, 5, 24}
   					   							  :sel :children.Number
                     			  				  :desel 1;	
                     			      BikeType BikeType
                     			      			  :sel :children.BikeType
                     			      			  :desel nil;
                     			      :bool Internal
                     			                  :sel :children.Internal
                     							  :desel true;
                     			  				     				   					   			}
							    :const{
							    	:sel
							    		(Gear.BikeType == Racer) ==> !(Gear.Internal);
   								}
   					   			:gr[1,1]{  :prim ShimanoAcer
   					   							:att{:heritage Number
   					   											:sel 24;
   					   								 :heritage BikeType
   					   								 			:sel Mountain;
   					   								 :heritage Internal 
   					   								 			:sel true;
   					   							}
   					   					   :prim Torpedo
   					   							att{:heritage Number
   					   											:sel :in {3, 5};
   					   								 :heritage BikeType
   					   								 			:sel :in {City, Grandma}
   					   								 :heritage Internal 
   					   								 			:sel true;
   					   							}
   					   			}
   					   
   					   Frame
   					   		:att{ :enum Color :in {   					   				   			   Blue,   					   				   			   Purple,   					   				   			   Silver,
   					   							  };
                     			  :int Size :in [13, 25];	
                     			  Gender Gender;
                     			  BikeType BikeType;
                     			  :bool Internal;				   					   		}
   					   		:const{ 
   					   			:sel
   					   				(Person.BikeType :in {City, Grandma}) ==> (Gear.Internal);
   					   				(Person.BikeType :in {Racer}) ==> !(Gear.Internal);
   					   		}
   					   		:gr[1,1]{  :prim CenturionOxygen	
   					   				   		:const{ 												:sel 
													(Parent.Color :in {Silver, Blue, Purple})  && (Parent.Size :in {22,23,24,25}) &&
														!(Parent.Internal) && (Parent.gender == Male) && (Parent.BikeType == Racer);											}
   					   				   :prim SchwinnMoab3 
   					   				   		:const{ 												:sel 
													(Parent.Color == Silver) && (Parent.Size >= 13) && (Parent.Size <= 23) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Mountain);											}
   			                }                      	
   			}