// At the begining of the file, the user may specify some meta data like the file author name, the file version and the date. 
:author = Paul;
:version = 2.6 1TBS Style;
:date = 10/21/2009;



/* In the syntax, the features ID start by a capital letter. All other ID (attributes, types,...) start by a small letter.

   Before specifying the features, the user may want to define some attribute types. Each type has a value domain and is 
   ended by the token ";". The basic attribute types are : ":enum", ":int" and "real".
*/
:enum cpuSocket :in {
	LGA1156, 
	ASB1
};
:enum screenConnectivity :in {
	VGA, 
	DVI
};




/* Sometimes, a type may be a structure composed of many attributes. In this case, the user must use the key word ":struct".
   Each statement of a component attribute is ended by the token ";".
*/ 
:struct motherBoardSize { 
	:int height;  
	:int width;
};



//------------------------------------------------------------------------------------------------------------------------------------------
/* The root feature ID must be preceded by the key word ":root". A feature may be specfied in two ways :
		1) The "hierarchical" way : The feature statement contains :
																	- The feature constraints
																	- The feature attributes
																	- The group statement (":gr[x, y]{ ...}") : It contains the ID and 
																	  the statements (grammatical or hierachical structure) of each 
																	  children features.
																	      
		2) The "grammatical" way : The group statement contains only the ID of the children features (without their statements). 
		   Each children feature is specified later (respecting the grammatical or the hierarchival structure). The constraints and 
		   the attributes of the feature may be also specified later.
		  
 
   For instance, the feature computer is specified respecting the grammatical structure. The groupe statement contains only the ID of 
   the children features and the user has choosed to specify the attributes and the constraints later.

   The cardinality of the group statement ("[x, y]") shows the minimum ("x") and maximum ("y") number of children features.
*/
:root Computer :gr[3,4] { 
	Motherboard, 
	CPU, 
	GraphicCard,
	// The key word ":opt" shows that the feature Accessories is optionnal. 
	:opt Accessories
}
//------------------------------------------------------------------------------------------------------------------------------------------



// This is the end of the statement of the feature Computer respecting the grammatical structure. 
Computer { 
	/* When a user creates a new attribute, he must specify :
		1) The attribute type : Basic type (":bool", ":int", ":real" and ":enum") or self created type.
		2) The attribute ID.
		3) The domain value of the attribute ":in ..." (optionnal)
		4) The attribute value when its feature is selected ":sel ..." (optionnal)
		5) The attribute value when its feature is deselected ":desel ..." (optional)
	   
	   The operator ":sum" allows to compute the sum of the values of a common attribute of the :
	   																		- Selected children features : ":selectedChildren"
	   																		- Children features : ":children"
	*/
	:int price :sel :sum(:selectedChildren.price);
	/* An attribute may be called in two ways :
		1) In the statement of its feature : By its ID. For instance : price
		2) Out of the statement of its feature : By its feature ID followed by its attribute ID. The feature ID may be the short or 
		   the long name of the feature. The feature ID and the attribute ID are separed by a ".". For instance : Computer.price
	
	   Each constraint is preceded by one of the two key words :
		- ":sel" : The constraint is applied when its feature is selected.
		- ":desel" : The contraint is applied when its feature is deselected.
	   And ended by the token ";".
	*/
	:sel MotherBoard.socket == CPU.socket;
	// The operator ":include" allows to insert the instuctions contained in an external .vfd file.
	:include(additionalComputerConstraints.vfd);
}



// Here, the feature MotheBoard is specified respecting the hierachical structure.
MotherBoard {
	:int price :sel :sum(:selectedChildren.price); 
	cpuSocket socket;
	// In the case where the attribute is composed of many sub-attributes (structure), each sub-attributes must be specified.
	motherBoardSize size {
		// Each sub-attribute is called using the struct attribute ID followed by the sub-attribute ID. For instance : size.height 
	    height :sel :sum(:selectedChildren.size.height);
	    width :sel :sum(:selectedChildren.size.width);
	};
	:gr[1,1] {
	 	Asus {
	    	:int price :sel 259;
	       	motherBoardSize size { 
	       		height :sel 30;
	      		width :sel 40;
	      	};
	      	// In a constraint, the use of the keyword ":parent" allows to directly manage the attributes of the parent feature.
	       	:sel :parent.socket == LGA1156; 
	    }
	    Aopen {
	       	:int price :sel 199;
	       	motherBoardSize size { 
	       		height :sel 30;
	      		width :sel 40;
	      	};	
	       	:sel :parent.socket == ASB1; 
	    }
	}
} 



CPU // Sometimes, the user may choose to don't use the curly braces surrounding the feature statement.
	:int price :sel :sum(:selectedChildren.price);
	cpuSocket socket;
	:gr[1,1] { 
	    CoreI7 {
	      	:int price :sel 399;
	      	:sel :parent.socket == LGA1156; 
	    	}
      	AthlonNeo {
	      	:int price :sel 299;	
	      	:sel :parent.socket == ASB1; 
	    }  		
	}


		
GraphicCard {
	:int price :sel :sum(:selectedChildren.price);
	screenConnectivity connectivity;
	:gr[1,1] {
	    NVIDIA {
	      	:int price :sel 199;		
	      	:sel :parent.connectivity == DVI; 
	    }
      	ATI {
	      	:int price :sel 159;		
	      	:sel :parent.connectivity == VGA; 
	    }
	}
}


 		
/**
* This type of comment is used for showing the description of a structure (Feature, attribute, type,...)
*/	
Accessories {
	:int price :sel :sum(:selectedChildren.price);
	/* A feature may be called in two ways : 
			1) By its short name : The feature ID. For instance : PhilipsScreen.
			2) By its long name :  It starts by ":root" and is composed of all the parents features ID (respecting the parents order). 
			   Each feature ID is separed by "->". For instance : :root->Accessories->PhilipsScreen 
	*/ 
	:sel !(PhilipsScreen && SamsungScreen);
	:gr[1,2] { 
		:opt LogitechKeyboardAndMouse {
			:int price :sel 19;
		}
		:opt PhilipsScreen {
			:int price :sel 99;	  	  
			:sel GraphicCard.connectivity == VGA;
		}
		:opt SamsungScreen {
			:int price :sel 149;	  
			:sel GraphicCard.connectivity == DVI;
		}
	}
}