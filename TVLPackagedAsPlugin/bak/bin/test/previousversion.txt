public BooleanExpression distributeDisjunctions() {
		/*while (this.expression2 instanceof ParenthesesExpression) {
			this.expression2 = ((ParenthesesExpression) this.expression2).getExpression();
		}
		while (this.expression1 instanceof ParenthesesExpression) {
			this.expression1 = ((ParenthesesExpression) this.expression1).getExpression();
		}
		if (this.expression2 instanceof AndExpression) {
			// ( a || ( b && c ) )
			AndExpression andExpression = (AndExpression) this.expression2;
			return new AndExpression(new OrExpression(this.expression1, andExpression.getExpression1()).distributeDisjunctions(), new OrExpression(this.expression1, andExpression.getExpression2()).distributeDisjunctions()).distributeDisjunctions();
		}
		else {
			// ( ( a && b ) || c )
			if (this.expression1 instanceof AndExpression) {
				AndExpression andExpression = (AndExpression) this.expression1;
				return new AndExpression(new OrExpression(this.expression2, andExpression.getExpression1()).distributeDisjunctions(), new OrExpression(this.expression2, andExpression.getExpression2()).distributeDisjunctions()).distributeDisjunctions();
			}
			else {
				return new OrExpression(((BooleanExpression) this.expression1).distributeDisjunctions(), ((BooleanExpression) this.expression2).distributeDisjunctions());
			}
		}*/
		while (this.expression1.getClass().toString().contains("ParenthesesExpression")) {
			this.expression1 = ((ParenthesesExpression) this.expression1).getExpression();
		}
		while (this.expression2.getClass().toString().contains("ParenthesesExpression")) {
			this.expression2 = ((ParenthesesExpression) this.expression2).getExpression();
		}
		
		if (this.expression2.getClass().toString().contains("ParenthesesExpression")) {
			ParenthesesExpression parenthesesExpression = (ParenthesesExpression) this.expression2;
			while (parenthesesExpression.getExpression().getClass().toString().contains("ParenthesesExpression")) {
				parenthesesExpression = (ParenthesesExpression) parenthesesExpression.getExpression();
			}
			if (parenthesesExpression.getExpression().getClass().toString().contains("AndExpression")) {
				// Case A || ( B && C )
				AndExpression andExpression = (AndExpression) parenthesesExpression.getExpression();
				return new AndExpression(
							//new ParenthesesExpression(
								new OrExpression(
										((BooleanExpression) this.expression1).distributeDisjunctions(),
										((BooleanExpression) andExpression.getExpression1()).distributeDisjunctions()).distributeDisjunctions(),
							//new ParenthesesExpression(
								new OrExpression(
										((BooleanExpression) this.expression1).distributeDisjunctions(),
										((BooleanExpression) andExpression.getExpression2()).distributeDisjunctions()).distributeDisjunctions());
			}
			else {
				// Case A || ( B || C )
				// Case A || ( b )
				BooleanExpression booleanExp1 = ((BooleanExpression) this.expression1).distributeDisjunctions();
				BooleanExpression booleanExp2 = ((BooleanExpression) parenthesesExpression.getExpression()).distributeDisjunctions();
				if ((booleanExp1.getClass().toString().contains("AndExpression")) || (booleanExp2.getClass().toString().contains("AndExpression")) || (booleanExp1.getClass().toString().contains("ParenthesesExpression")) || (booleanExp2.getClass().toString().contains("ParenthesesExpression"))) { 
					return new OrExpression(booleanExp1, booleanExp2).distributeDisjunctions();
				}
				else {
					return new OrExpression(booleanExp1, booleanExp2);
				}
			}
		}
		else {
			if (this.expression2.getClass().toString().contains("AndExpression")) {
				// Case A || B && C
				AndExpression andExpression = (AndExpression) this.expression2;
				return new AndExpression(
							//new ParenthesesExpression(
								new OrExpression(
										((BooleanExpression) this.expression1).distributeDisjunctions(),
										((BooleanExpression) andExpression.getExpression1()).distributeDisjunctions()).distributeDisjunctions(),
							//new ParenthesesExpression(
								new OrExpression(
										((BooleanExpression) this.expression1).distributeDisjunctions(),
										((BooleanExpression) andExpression.getExpression2()).distributeDisjunctions()).distributeDisjunctions());
			}
			else {
				if (this.expression1.getClass().toString().contains("ParenthesesExpression")) {
					// Case ( A ) || b
					// Case ( A ) || B || A
					ParenthesesExpression parenthesesExpression = (ParenthesesExpression) this.expression1;
					while (parenthesesExpression.getExpression().getClass().toString().contains("ParenthesesExpression")) {
						parenthesesExpression = (ParenthesesExpression) parenthesesExpression.getExpression();
					}
					if (parenthesesExpression.getExpression().getClass().toString().contains("AndExpression")) {
						// Case ( A && B ) || C
						AndExpression andExpression = (AndExpression) parenthesesExpression.getExpression();
						return new AndExpression(
									//new ParenthesesExpression(
										new OrExpression(
												((BooleanExpression) this.expression2).distributeDisjunctions(),
												((BooleanExpression) andExpression.getExpression1()).distributeDisjunctions()).distributeDisjunctions(),
									//new ParenthesesExpression(
										new OrExpression(
												((BooleanExpression) this.expression2).distributeDisjunctions(),
												((BooleanExpression) andExpression.getExpression2()).distributeDisjunctions()).distributeDisjunctions());
					}
					else {
						// Case ( a ) || b
						// Case ( a ) || B || C
						// Case ( A ) || b
						// Case ( A ) || C || D
						BooleanExpression booleanExp1 = ((BooleanExpression) parenthesesExpression.getExpression()).distributeDisjunctions();
						BooleanExpression booleanExp2 = ((BooleanExpression) this.expression2).distributeDisjunctions();
						if ((booleanExp1.getClass().toString().contains("AndExpression")) || (booleanExp2.getClass().toString().contains("AndExpression")) || (booleanExp1.getClass().toString().contains("ParenthesesExpression")) || (booleanExp2.getClass().toString().contains("ParenthesesExpression"))) { 
							return new OrExpression(booleanExp1, booleanExp2).distributeDisjunctions();
							
						}
						else {
							return new OrExpression(booleanExp1, booleanExp2);
						}
					}
				}
				else {
					if (this.expression1.getClass().toString().contains("AndExpression")) {
						// Case ( A && B ) || C
						AndExpression andExpression = (AndExpression) this.expression1;
						return new AndExpression(
									//new ParenthesesExpression(
										new OrExpression(
												this.expression2,
												andExpression.getExpression1()).distributeDisjunctions(),
									//new ParenthesesExpression(
										new OrExpression(
												this.expression2,
												andExpression.getExpression2()).distributeDisjunctions());
					}
					else {
						// Case a || B || C
						// Case A || B || c
						// Case A || B || C || D
						BooleanExpression booleanExp1 = ((BooleanExpression) this.expression1).distributeDisjunctions();
						BooleanExpression booleanExp2 = ((BooleanExpression) this.expression2).distributeDisjunctions();
						if ((booleanExp1.getClass().toString().contains("AndExpression")) || (booleanExp2.getClass().toString().contains("AndExpression")) || (booleanExp1.getClass().toString().contains("ParenthesesExpression")) || (booleanExp2.getClass().toString().contains("ParenthesesExpression"))) { 
							return new OrExpression(booleanExp1, booleanExp2).distributeDisjunctions();
						}
						else {
							return new OrExpression(booleanExp1, booleanExp2);
						}
					}
				}
			}
		}
	}