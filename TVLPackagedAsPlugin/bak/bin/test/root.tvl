/* Type definitions section */
struct position {
	int x;
	int y;	
}

enum orientation in {horizontalLeft, horizontalRight, verical};

struct dimension {
	int width;
	int height;
}

/* Feature Model section*/
root Document {
    group allof {
		Sheet, //Clonable feature
		opt SpineCaption
	}
	enum type in {normal, booklet, perfectBinding};
	enum binding in {top, left, right};
	Document.type in {booklet, perfectBinding} -> Sheet.folding==none;
	Document.type in {booklet, perfectBinding} -> !Sheet.Tab;
	Document.type in {booklet, perfectBinding} -> !Media.tab;
	Document.type in {booklet, perfectBinding} -> !Sheet.Staple;
	Document.type==booklet -> !Sheet.Hole;
	Document.type==booklet -> !Media.Hole;
	Document.type in {booklet, perfectBinding} -> !Media.cyclic;
	(Sheet.paperPass==sef && Document.binding==top) || (Sheet.paperPass==lef && Document.binding==left) -> !Media.tab;
}

SpineCaption {
	enum alignment in {top, middle, bottom};
	orientation orient;
	real margin in [0..*];
	int lineCount in [0..*];
	bool textColor; //False for black, true for other colors  -> Useful?
	bool backgroundColor; //Indicates if the spine caption has a background color   -> Useful?
	ifin: Document.type in {booklet, perfectBinding};
}

include(sheet.tvl);