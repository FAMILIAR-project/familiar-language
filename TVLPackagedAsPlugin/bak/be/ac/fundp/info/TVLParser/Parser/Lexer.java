/* The following code was generated by JFlex 1.4.3 on 14/02/12 11:12 */

// FEATUREMX VFD STAR FORMAT JFLEX LEXER SPECIFICATION
// Xavier Devroey & Michael Marcozzi 

// 1) UserCode 
// -----------
package be.ac.fundp.info.TVLParser.Parser;

import be.ac.fundp.info.TVLParser.exceptions.ParsingException;

import java_cup.runtime.*; // Import Symbol class and other things for Cup compatibility 



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/02/12 11:12 from the specification file
 * <tt>/Users/gsa/Source_code/TVLParser/src/be/ac/fundp/info/TVLParser/TVL-Grammar.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\3\1\2\1\0\1\3\1\1\16\4\4\0\1\3\1\45"+
    "\1\12\1\0\1\4\1\0\1\41\1\0\1\56\1\57\1\6\1\47"+
    "\1\55\1\13\1\16\1\5\1\15\11\14\1\63\1\64\1\44\1\46"+
    "\1\43\1\62\1\0\2\4\1\40\5\4\1\35\5\4\1\36\13\4"+
    "\1\53\1\0\1\54\1\0\1\4\1\0\1\21\1\30\1\33\1\24"+
    "\1\23\1\34\1\37\1\20\1\31\2\4\1\11\1\32\1\7\1\25"+
    "\1\27\1\52\1\22\1\17\1\26\1\10\1\51\1\4\1\50\2\4"+
    "\1\60\1\42\1\61\1\0\41\4\2\0\4\4\4\0\1\4\2\0"+
    "\1\4\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0"+
    "\u013f\4\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4\21\0"+
    "\130\4\5\0\23\4\12\0\1\4\13\0\1\4\1\0\3\4\1\0"+
    "\1\4\1\0\24\4\1\0\54\4\1\0\46\4\1\0\5\4\4\0"+
    "\202\4\1\0\4\4\3\0\105\4\1\0\46\4\2\0\2\4\6\0"+
    "\20\4\41\0\46\4\2\0\1\4\7\0\47\4\11\0\21\4\1\0"+
    "\27\4\1\0\3\4\1\0\1\4\1\0\2\4\1\0\1\4\13\0"+
    "\33\4\5\0\3\4\15\0\4\4\14\0\6\4\13\0\32\4\5\0"+
    "\31\4\7\0\12\4\4\0\146\4\1\0\11\4\1\0\12\4\1\0"+
    "\23\4\2\0\1\4\17\0\74\4\2\0\3\4\60\0\62\4\u014f\0"+
    "\71\4\2\0\22\4\2\0\5\4\3\0\14\4\2\0\12\4\21\0"+
    "\3\4\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\1\4\3\0\4\4\2\0\11\4\2\0\2\4\2\0\3\4\11\0"+
    "\1\4\4\0\2\4\1\0\5\4\2\0\16\4\15\0\3\4\1\0"+
    "\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\1\4\1\0\5\4\4\0\2\4\2\0"+
    "\3\4\13\0\4\4\1\0\1\4\7\0\17\4\14\0\3\4\1\0"+
    "\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\5\4\2\0\12\4\1\0\3\4\1\0\3\4\2\0\1\4\17\0"+
    "\4\4\2\0\12\4\1\0\1\4\17\0\3\4\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\10\4\3\0\2\4\2\0\3\4\10\0\2\4\4\0\2\4\1\0"+
    "\3\4\4\0\12\4\1\0\1\4\20\0\2\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\10\4\1\0\3\4\4\0\5\4\3\0"+
    "\3\4\1\0\4\4\11\0\1\4\17\0\11\4\11\0\1\4\7\0"+
    "\3\4\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\4\0\7\4\1\0\3\4\1\0\4\4\7\0\2\4\11\0"+
    "\2\4\4\0\12\4\22\0\2\4\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\2\0\11\4\1\0\3\4\1\0"+
    "\4\4\7\0\2\4\7\0\1\4\1\0\2\4\4\0\12\4\22\0"+
    "\2\4\1\0\10\4\1\0\3\4\1\0\27\4\1\0\20\4\4\0"+
    "\6\4\2\0\3\4\1\0\4\4\11\0\1\4\10\0\2\4\4\0"+
    "\12\4\22\0\2\4\1\0\22\4\3\0\30\4\1\0\11\4\1\0"+
    "\1\4\2\0\7\4\3\0\1\4\4\0\6\4\1\0\1\4\1\0"+
    "\10\4\22\0\2\4\15\0\72\4\4\0\20\4\1\0\12\4\47\0"+
    "\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0"+
    "\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\15\4\1\0\3\4\2\0\5\4\1\0\1\4\1\0"+
    "\6\4\2\0\12\4\2\0\2\4\42\0\1\4\27\0\2\4\6\0"+
    "\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\12\4\1\0"+
    "\42\4\6\0\24\4\1\0\6\4\4\0\10\4\1\0\44\4\11\0"+
    "\1\4\71\0\42\4\1\0\5\4\1\0\2\4\1\0\7\4\3\0"+
    "\4\4\6\0\12\4\6\0\12\4\106\0\46\4\12\0\51\4\7\0"+
    "\132\4\5\0\104\4\5\0\122\4\6\0\7\4\1\0\77\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\47\4\1\0\1\4\1\0\4\4\2\0\37\4\1\0\1\4\1\0"+
    "\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\7\4\1\0\27\4\1\0\37\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\47\4\1\0\23\4\16\0\11\4\56\0\125\4\14\0"+
    "\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4\3\0\3\4\17\0"+
    "\15\4\1\0\7\4\13\0\25\4\13\0\24\4\14\0\15\4\1\0"+
    "\3\4\1\0\2\4\14\0\124\4\3\0\1\4\3\0\3\4\2\0"+
    "\12\4\41\0\3\4\2\0\12\4\6\0\130\4\10\0\52\4\126\0"+
    "\35\4\3\0\14\4\4\0\14\4\12\0\50\4\2\0\5\4\u038b\0"+
    "\154\4\224\0\234\4\4\0\132\4\6\0\26\4\2\0\6\4\2\0"+
    "\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0"+
    "\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0"+
    "\3\4\1\0\7\4\17\0\4\4\32\0\5\4\20\0\2\4\23\0"+
    "\1\4\13\0\4\4\6\0\6\4\1\0\1\4\15\0\1\4\40\0"+
    "\22\4\36\0\15\4\4\0\1\4\3\0\6\4\27\0\1\4\4\0"+
    "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\3\4\1\0\7\4\3\0"+
    "\3\4\5\0\5\4\26\0\44\4\u0e81\0\3\4\31\0\17\4\1\0"+
    "\5\4\2\0\5\4\4\0\126\4\2\0\2\4\2\0\3\4\1\0"+
    "\137\4\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4\u0200\0"+
    "\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4\2\0"+
    "\73\4\225\0\7\4\14\0\5\4\5\0\14\4\1\0\15\4\1\0"+
    "\5\4\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0"+
    "\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4\3\0\20\4\20\0"+
    "\4\4\17\0\2\4\30\0\3\4\31\0\1\4\6\0\5\4\1\0"+
    "\207\4\2\0\1\4\4\0\1\4\13\0\12\4\7\0\32\4\4\0"+
    "\1\4\1\0\32\4\12\0\132\4\3\0\6\4\2\0\6\4\2\0"+
    "\6\4\2\0\3\4\3\0\2\4\3\0\2\4\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\3\1\1"+
    "\1\6\1\7\1\10\1\11\16\3\2\1\1\12\1\13"+
    "\1\14\1\1\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\0\1\3"+
    "\1\0\1\7\1\30\1\31\1\0\1\30\17\3\1\32"+
    "\5\3\1\33\1\34\10\3\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\3\2\0\1\3\1\44\1\30"+
    "\1\45\4\3\1\46\1\3\1\47\1\50\7\3\1\51"+
    "\4\3\1\52\2\3\1\53\1\54\1\55\5\3\1\56"+
    "\1\57\1\0\2\2\5\3\1\60\1\3\1\61\1\62"+
    "\1\3\1\63\1\3\1\64\1\65\1\3\1\66\1\3"+
    "\1\67\11\3\1\70\2\3\1\71\1\3\1\72\1\3"+
    "\1\73\1\74\1\75\1\76\1\77\1\3\1\100\1\101"+
    "\2\3\1\102\6\3\1\103\1\104\1\105\7\3\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\65\0\237\0\324\0\65\0\u0109"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\65\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc"+
    "\0\u0601\0\65\0\u0636\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\65\0\u07a9\0\u01dd\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\237\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\237\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\65\0\65\0\65"+
    "\0\u0ddf\0\65\0\65\0\65\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\65\0\u07a9\0\237\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\237"+
    "\0\u0fbc\0\237\0\237\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\237\0\u1164\0\u1199\0\u11ce\0\u1203\0\237"+
    "\0\u1238\0\u126d\0\237\0\237\0\237\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\65\0\237\0\u13ab\0\u0e49\0\237\0\u13e0"+
    "\0\u1415\0\u144a\0\u147f\0\u14b4\0\237\0\u14e9\0\237\0\237"+
    "\0\u151e\0\237\0\u1553\0\237\0\237\0\u1588\0\237\0\u15bd"+
    "\0\237\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\237\0\u17cf\0\u1804\0\237\0\u1839\0\237"+
    "\0\u186e\0\237\0\237\0\237\0\237\0\237\0\u18a3\0\237"+
    "\0\237\0\u18d8\0\u190d\0\237\0\u1942\0\u1977\0\u19ac\0\u19e1"+
    "\0\u1a16\0\u1a4b\0\237\0\237\0\237\0\u1a80\0\u1ab5\0\u1aea"+
    "\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\2\5"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\5\1\33\1\5\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\5\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\67\0\1\4\66\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\22\5\7\0\3\5\17\0\1\56\1\57"+
    "\62\0\1\5\2\0\1\5\1\60\1\5\2\0\2\5"+
    "\1\0\22\5\7\0\3\5\12\0\6\61\1\0\56\61"+
    "\14\0\1\62\1\63\25\0\1\64\25\0\1\5\2\0"+
    "\3\5\2\0\2\13\1\65\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\66\1\65\22\5\7\0"+
    "\3\5\16\0\1\5\2\0\1\5\1\67\1\5\2\0"+
    "\2\5\1\0\1\5\1\70\2\5\1\71\1\5\1\72"+
    "\1\73\12\5\7\0\3\5\16\0\1\5\2\0\1\74"+
    "\1\5\1\75\2\0\2\5\1\0\11\5\1\76\10\5"+
    "\7\0\1\5\1\77\1\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\4\5\1\100\1\5\1\101\13\5"+
    "\7\0\3\5\16\0\1\5\2\0\1\102\2\5\2\0"+
    "\2\5\1\0\22\5\7\0\1\103\2\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\2\5\1\104\17\5"+
    "\7\0\3\5\16\0\1\5\2\0\1\105\2\5\2\0"+
    "\2\5\1\0\3\5\1\106\4\5\1\107\11\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\110\1\5\1\111\16\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\2\5\1\112"+
    "\17\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\6\5\1\113\13\5\7\0\3\5\16\0"+
    "\1\5\2\0\1\114\2\5\2\0\2\5\1\0\1\115"+
    "\14\5\1\116\4\5\7\0\3\5\16\0\1\5\2\0"+
    "\1\5\1\117\1\5\2\0\2\5\1\0\2\5\1\120"+
    "\7\5\1\121\7\5\7\0\3\5\16\0\1\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\122\4\5\1\123"+
    "\13\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\2\5\1\124\17\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\3\5\1\125"+
    "\16\5\7\0\3\5\53\0\1\126\65\0\1\127\70\0"+
    "\1\130\31\0\1\131\32\0\1\132\64\0\1\133\64\0"+
    "\1\134\22\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\6\5\1\135\13\5\7\0\3\5\12\0\1\56\1\3"+
    "\1\4\62\56\6\136\1\137\56\136\4\0\1\5\2\0"+
    "\2\5\1\140\2\0\2\5\1\0\22\5\7\0\3\5"+
    "\12\0\12\61\1\141\52\61\14\0\2\62\1\65\62\0"+
    "\2\63\1\65\62\0\2\142\53\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\13\5\1\143\6\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\2\5"+
    "\1\144\17\5\7\0\3\5\16\0\1\5\2\0\2\5"+
    "\1\145\2\0\2\5\1\0\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\13\5\1\146"+
    "\6\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\3\5\1\147\16\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\5\5\1\150"+
    "\14\5\7\0\3\5\16\0\1\5\2\0\2\5\1\151"+
    "\2\0\2\5\1\0\22\5\7\0\3\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\152\21\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\20\5\1\153\1\5\7\0\3\5\16\0\1\5\2\0"+
    "\3\5\2\0\2\5\1\0\2\5\1\154\17\5\7\0"+
    "\2\5\1\155\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\6\5\1\156\13\5\7\0\3\5\16\0\1\5"+
    "\2\0\1\5\1\157\1\5\2\0\2\5\1\0\22\5"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\14\5\1\160\5\5\7\0\3\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\7\5\1\161\12\5"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\4\5\1\162\15\5\7\0\3\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\7\5\1\163\12\5"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\12\5\1\164\7\5\7\0\3\5\16\0\1\5"+
    "\2\0\1\5\1\165\1\5\2\0\2\5\1\0\22\5"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\3\5\1\166\16\5\7\0\3\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\6\5\1\167\13\5"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\7\5\1\170\12\5\7\0\3\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\6\5\1\171\3\5"+
    "\1\172\3\5\1\172\1\171\2\5\7\0\3\5\16\0"+
    "\1\5\2\0\2\5\1\173\2\0\2\5\1\0\22\5"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\22\5\7\0\1\174\2\5\16\0\1\5\2\0"+
    "\1\175\2\5\2\0\2\5\1\0\22\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\12\5"+
    "\1\176\7\5\7\0\3\5\16\0\1\5\2\0\1\177"+
    "\1\200\1\5\2\0\2\5\1\0\22\5\7\0\3\5"+
    "\16\0\1\5\2\0\2\5\1\201\2\0\2\5\1\0"+
    "\22\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\6\5\1\202\13\5\7\0\3\5\55\0"+
    "\1\203\25\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\3\5\1\204\16\5\7\0\3\5\12\0\6\136\1\205"+
    "\63\136\1\206\1\205\56\136\4\0\1\5\2\0\2\5"+
    "\1\207\2\0\2\5\1\0\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\3\5\1\210"+
    "\16\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\4\5\1\211\15\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\4\5\1\212"+
    "\15\5\7\0\3\5\16\0\1\5\2\0\1\5\1\213"+
    "\1\5\2\0\2\5\1\0\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\6\5\1\214"+
    "\10\5\1\214\2\5\7\0\3\5\16\0\1\5\2\0"+
    "\2\5\1\215\2\0\2\5\1\0\22\5\7\0\3\5"+
    "\16\0\1\5\2\0\1\5\1\216\1\5\2\0\2\5"+
    "\1\0\22\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\7\5\1\217\12\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\13\5"+
    "\1\220\6\5\7\0\3\5\16\0\1\5\2\0\2\5"+
    "\1\221\2\0\2\5\1\0\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\2\5\1\222"+
    "\17\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\6\5\1\223\10\5\1\223\2\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\224\21\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\4\5\1\225\15\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\4\5"+
    "\1\226\15\5\7\0\3\5\16\0\1\5\2\0\2\5"+
    "\1\227\2\0\2\5\1\0\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\1\5\1\230\1\5\2\0\2\5\1\0"+
    "\22\5\7\0\3\5\16\0\1\5\2\0\1\231\2\5"+
    "\2\0\2\5\1\0\22\5\7\0\3\5\16\0\1\5"+
    "\2\0\2\5\1\232\2\0\2\5\1\0\22\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\233\21\5\7\0\3\5\16\0\1\5\2\0\1\234"+
    "\2\5\2\0\2\5\1\0\22\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\1\235\21\5"+
    "\7\0\3\5\16\0\1\5\2\0\1\5\1\236\1\5"+
    "\2\0\2\5\1\0\22\5\7\0\3\5\12\0\5\136"+
    "\1\4\1\205\56\136\4\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\4\5\1\237\15\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\14\5\1\240"+
    "\5\5\7\0\3\5\16\0\1\5\2\0\3\5\2\0"+
    "\2\5\1\0\6\5\1\241\10\5\1\241\2\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\14\5\1\242\5\5\7\0\3\5\16\0\1\5\2\0"+
    "\3\5\2\0\2\5\1\0\15\5\1\243\4\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\12\5\1\244\7\5\7\0\3\5\16\0\1\5\2\0"+
    "\1\5\1\245\1\5\2\0\2\5\1\0\22\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\15\5\1\246\4\5\7\0\3\5\16\0\1\5\2\0"+
    "\1\247\2\5\2\0\2\5\1\0\22\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\7\5"+
    "\1\250\12\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\5\5\1\251\14\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\7\5"+
    "\1\252\12\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\7\5\1\253\12\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\4\5"+
    "\1\254\15\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\10\5\1\255\11\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\5\5"+
    "\1\256\14\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\7\5\1\257\12\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\15\5"+
    "\1\260\4\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\7\5\1\261\12\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\3\5"+
    "\1\262\16\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\5\5\1\263\14\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\7\5"+
    "\1\264\12\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\3\5\1\265\16\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\4\5"+
    "\1\266\15\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\4\5\1\267\15\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\4\5"+
    "\1\270\15\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\4\5\1\271\15\5\7\0\3\5"+
    "\16\0\1\5\2\0\3\5\2\0\2\5\1\0\5\5"+
    "\1\272\14\5\7\0\3\5\16\0\1\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\273\21\5\7\0\3\5\16\0"+
    "\1\5\2\0\3\5\2\0\2\5\1\0\1\274\21\5"+
    "\7\0\3\5\16\0\1\5\2\0\1\275\2\5\2\0"+
    "\2\5\1\0\22\5\7\0\3\5\16\0\1\5\2\0"+
    "\3\5\2\0\2\5\1\0\14\5\1\276\4\5\1\276"+
    "\7\0\3\5\16\0\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\277\20\5\7\0\3\5\16\0\1\5"+
    "\2\0\3\5\2\0\2\5\1\0\12\5\1\300\7\5"+
    "\7\0\3\5\16\0\1\5\2\0\2\5\1\301\2\0"+
    "\2\5\1\0\22\5\7\0\3\5\16\0\1\5\2\0"+
    "\3\5\2\0\2\5\1\0\5\5\1\302\14\5\7\0"+
    "\3\5\16\0\1\5\2\0\3\5\2\0\2\5\1\0"+
    "\3\5\1\303\16\5\7\0\3\5\16\0\1\5\2\0"+
    "\3\5\2\0\2\5\1\0\4\5\1\304\15\5\7\0"+
    "\3\5\16\0\1\5\2\0\1\305\2\5\2\0\2\5"+
    "\1\0\22\5\7\0\3\5\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7155];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\5\1\1\11"+
    "\24\1\1\11\1\1\12\11\2\0\1\1\1\0\2\1"+
    "\1\11\1\0\40\1\3\11\1\1\3\11\1\1\2\0"+
    "\1\1\1\11\41\1\1\11\1\1\1\0\100\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, String value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1660) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message + " at line "+this.yyline+" column "+this.yycolumn+" : "+this.yytext());
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return symbol(Symbols.INTEGER,yytext());
          }
        case 71: break;
        case 28: 
          { return symbol(Symbols.IS);
          }
        case 72: break;
        case 49: 
          { return symbol(Symbols.ROOT);
          }
        case 73: break;
        case 14: 
          { return symbol(Symbols.SQBRA);
          }
        case 74: break;
        case 15: 
          { return symbol(Symbols.SQBRAEND);
          }
        case 75: break;
        case 67: 
          { return symbol(Symbols.REQUIRES);
          }
        case 76: break;
        case 55: 
          { return symbol(Symbols.IFIN);
          }
        case 77: break;
        case 39: 
          { return symbol(Symbols.ABS);
          }
        case 78: break;
        case 32: 
          { return symbol(Symbols.INVERSEIMPLIES);
          }
        case 79: break;
        case 4: 
          { return symbol(Symbols.DIVIDE);
          }
        case 80: break;
        case 64: 
          { return symbol(Symbols.SOMEOF);
          }
        case 81: break;
        case 3: 
          { return symbol(Symbols.ID,yytext());
          }
        case 82: break;
        case 19: 
          { return symbol(Symbols.CBRA);
          }
        case 83: break;
        case 10: 
          { return symbol(Symbols.GREATER);
          }
        case 84: break;
        case 45: 
          { return symbol(Symbols.MIN);
          }
        case 85: break;
        case 25: 
          { return symbol(Symbols.IMPLIES);
          }
        case 86: break;
        case 68: 
          { return symbol(Symbols.EXCLUDES);
          }
        case 87: break;
        case 34: 
          { return symbol(Symbols.NOTEQUALS);
          }
        case 88: break;
        case 11: 
          { return symbol(Symbols.LOWER) ;
          }
        case 89: break;
        case 1: 
          { try {
		throw new ParsingException("Parsing error : Illegal character (line "+yyline+", column "+yycolumn+") : <"+yytext()+">");
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	};
          }
        case 90: break;
        case 13: 
          { return symbol(Symbols.PLUS);
          }
        case 91: break;
        case 53: 
          { return symbol(Symbols.TRUE);
          }
        case 92: break;
        case 62: 
          { return symbol(Symbols.GROUP);
          }
        case 93: break;
        case 43: 
          { return symbol(Symbols.MUL);
          }
        case 94: break;
        case 23: 
          { return symbol(Symbols.SEMICOLON);
          }
        case 95: break;
        case 21: 
          { return symbol(Symbols.QUEST);
          }
        case 96: break;
        case 66: 
          { return symbol(Symbols.PARENT);
          }
        case 97: break;
        case 5: 
          { return symbol(Symbols.TIMES);
          }
        case 98: break;
        case 18: 
          { return symbol(Symbols.BRAEND);
          }
        case 99: break;
        case 22: 
          { return symbol(Symbols.COLON);
          }
        case 100: break;
        case 70: 
          { return symbol(Symbols.SCHILDREN);
          }
        case 101: break;
        case 17: 
          { return symbol(Symbols.BRA);
          }
        case 102: break;
        case 9: 
          { return symbol(Symbols.DOT);
          }
        case 103: break;
        case 63: 
          { return symbol(Symbols.SHARED);
          }
        case 104: break;
        case 69: 
          { return symbol(Symbols.CHILDREN);
          }
        case 105: break;
        case 33: 
          { return symbol(Symbols.LEQ);
          }
        case 106: break;
        case 30: 
          { return symbol(Symbols.OR);
          }
        case 107: break;
        case 27: 
          { return symbol(Symbols.IN);
          }
        case 108: break;
        case 35: 
          { return symbol(Symbols.EQUALS);
          }
        case 109: break;
        case 24: 
          { return symbol(Symbols.REAL,yytext());
          }
        case 110: break;
        case 26: 
          { return symbol(Symbols.ORAGG);
          }
        case 111: break;
        case 52: 
          { return symbol(Symbols.THIS);
          }
        case 112: break;
        case 54: 
          { return symbol(Symbols.BOOL);
          }
        case 113: break;
        case 37: 
          { return symbol(Symbols.SUM);
          }
        case 114: break;
        case 8: 
          { return symbol(Symbols.ZERO);
          }
        case 115: break;
        case 20: 
          { return symbol(Symbols.CBRAEND);
          }
        case 116: break;
        case 40: 
          { return symbol(Symbols.AVG);
          }
        case 117: break;
        case 42: 
          { return symbol(Symbols.INT);
          }
        case 118: break;
        case 6: 
          { return symbol(Symbols.MINUS);
          }
        case 119: break;
        case 12: 
          { return symbol(Symbols.NOT);
          }
        case 120: break;
        case 29: 
          { return symbol(Symbols.AND);
          }
        case 121: break;
        case 58: 
          { return symbol(Symbols.IFOUT);
          }
        case 122: break;
        case 38: 
          { return symbol(Symbols.ANDAGG);
          }
        case 123: break;
        case 46: 
          { return symbol(Symbols.IFANDONLYIF);
          }
        case 124: break;
        case 65: 
          { return symbol(Symbols.STRUCT);
          }
        case 125: break;
        case 57: 
          { return symbol(Symbols.ONEOF);
          }
        case 126: break;
        case 47: 
          { return symbol(Symbols.XORAGG);
          }
        case 127: break;
        case 44: 
          { return symbol(Symbols.MAX);
          }
        case 128: break;
        case 36: 
          { return symbol(Symbols.STRING,yytext());
          }
        case 129: break;
        case 56: 
          { return symbol(Symbols.ALLOF);
          }
        case 130: break;
        case 50: 
          { return symbol(Symbols.ENUM);
          }
        case 131: break;
        case 51: 
          { return symbol(Symbols.DATA);
          }
        case 132: break;
        case 59: 
          { return symbol(Symbols.CONST);
          }
        case 133: break;
        case 16: 
          { return symbol(Symbols.COMMA);
          }
        case 134: break;
        case 48: 
          { return symbol(Symbols.REALP);
          }
        case 135: break;
        case 60: 
          { return symbol(Symbols.COUNT);
          }
        case 136: break;
        case 41: 
          { return symbol(Symbols.OPT);
          }
        case 137: break;
        case 31: 
          { return symbol(Symbols.GEQ);
          }
        case 138: break;
        case 61: 
          { return symbol(Symbols.FALSE);
          }
        case 139: break;
        case 2: 
          { 
          }
        case 140: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Symbols.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
