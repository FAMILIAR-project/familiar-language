
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 14 11:12:09 CET 2012
//----------------------------------------------------

package be.ac.fundp.info.TVLParser.Parser;

import be.ac.fundp.info.TVLParser.SyntaxTree.*;
import be.ac.fundp.info.TVLParser.symbolTables.FeaturesSymbolTable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 14 11:12:09 CET 2012
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\007\007\000\002\010" +
    "\003\000\002\010\004\000\002\011\003\000\002\011\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\013\003\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\015\007\000\002\015\005\000" +
    "\002\016\006\000\002\016\004\000\002\017\007\000\002" +
    "\017\005\000\002\026\002\000\002\026\004\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\007\000\002\020\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\003\000\002\021\003\000\002\021" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\024\010\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\031\003\000\002\031\007\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\032\006" +
    "\000\002\032\006\000\002\033\002\000\002\033\004\000" +
    "\002\033\006\000\002\033\004\000\002\033\004\000\002" +
    "\034\013\000\002\034\013\000\002\034\013\000\002\034" +
    "\013\000\002\034\006\000\002\034\006\000\002\034\006" +
    "\000\002\034\006\000\002\035\003\000\002\035\004\000" +
    "\002\036\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\004\000\002\037\005\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\004\000\002\037\006\000\002\037" +
    "\007\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\042\005" +
    "\000\002\042\005\000\002\040\003\000\002\040\005\000" +
    "\002\041\005\000\002\041\010\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\044" +
    "\006\000\002\044\006\000\002\044\004\000\002\045\006" +
    "\000\002\046\003\000\002\046\005\000\002\047\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\026\011\004\013\026\014\011\015\025\016" +
    "\005\017\030\022\024\027\027\030\020\110\017\001\002" +
    "\000\012\023\uffe8\101\uffe8\103\uffe8\110\u014f\001\002\000" +
    "\004\110\u0145\001\002\000\030\002\ufffa\011\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa\027\ufffa\030" +
    "\ufffa\110\ufffa\001\002\000\030\002\ufffd\011\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\022\ufffd\027\ufffd\030" +
    "\ufffd\110\ufffd\001\002\000\030\002\000\011\004\013\026" +
    "\014\011\015\025\016\005\017\030\022\024\027\027\030" +
    "\020\110\017\001\002\000\004\110\u013f\001\002\000\004" +
    "\002\u013e\001\002\000\030\002\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\022\uffe1\027\uffe1\030\uffe1" +
    "\110\uffe1\001\002\000\030\002\ufffe\011\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\022\ufffe\027\ufffe\030\ufffe" +
    "\110\ufffe\001\002\000\030\002\uffe2\011\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\022\uffe2\027\uffe2\030\uffe2" +
    "\110\uffe2\001\002\000\030\002\ufffc\011\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\027\ufffc\030\ufffc" +
    "\110\ufffc\001\002\000\072\023\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5\070" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\076\uffe5\100\uffe5\101\uffe5" +
    "\102\uffe5\103\uffe5\104\uffe5\105\uffe5\106\uffe5\001\002\000" +
    "\072\023\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\054\uffe7\055\uffe7\070\uffe7\072\uffe7\073\uffe7" +
    "\074\uffe7\076\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104" +
    "\uffe7\105\uffe7\106\uffe7\001\002\000\030\002\ufffb\011\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\022\ufffb\027" +
    "\ufffb\030\ufffb\110\ufffb\001\002\000\006\023\300\101\277" +
    "\001\002\000\072\023\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\054\uffe4\055\uffe4\070\uffe4\072" +
    "\uffe4\073\uffe4\074\uffe4\076\uffe4\100\uffe4\101\uffe4\102\uffe4" +
    "\103\274\104\uffe4\105\uffe4\106\uffe4\001\002\000\010\013" +
    "\252\014\254\017\253\001\002\000\004\110\246\001\002" +
    "\000\004\110\244\001\002\000\072\023\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\054\uffe6\055" +
    "\uffe6\070\uffe6\072\uffe6\073\uffe6\074\uffe6\076\uffe6\100\uffe6" +
    "\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6\001" +
    "\002\000\004\110\031\001\002\000\006\070\032\106\033" +
    "\001\002\000\006\074\034\101\035\001\002\000\032\002" +
    "\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\022\ufff5\027\ufff5\030\ufff5\102\ufff5\110\ufff5\001\002\000" +
    "\012\004\233\005\234\006\235\054\237\001\002\000\056" +
    "\004\060\005\061\006\063\011\040\027\027\030\020\040" +
    "\044\041\046\042\055\052\054\056\062\057\057\060\043" +
    "\061\065\062\056\063\064\064\042\065\051\066\045\067" +
    "\053\077\041\110\017\001\002\000\004\106\037\001\002" +
    "\000\032\002\ufff8\011\ufff8\013\ufff8\014\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\022\ufff8\027\ufff8\030\ufff8\102\ufff8\110\ufff8" +
    "\001\002\000\072\023\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\054\uffe8\055\uffe8\070\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\076\uffe8\100\uffe8\101\uffe8\102\uffe8" +
    "\103\uffe8\104\uffe8\105\uffe8\106\uffe8\001\002\000\056\004" +
    "\060\005\061\006\063\011\040\027\027\030\020\040\044" +
    "\041\046\042\055\052\054\056\062\057\057\060\043\061" +
    "\065\062\056\063\064\064\042\065\051\066\045\067\053" +
    "\077\041\110\017\001\002\000\004\077\224\001\002\000" +
    "\004\077\217\001\002\000\056\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\040\044\041\046\042\055\052" +
    "\054\056\062\057\057\060\043\061\065\062\056\063\064" +
    "\064\042\065\051\066\045\067\053\077\041\110\017\001" +
    "\002\000\004\077\211\001\002\000\054\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2" +
    "\076\uffa2\100\uffa2\102\uffa2\104\uffa2\105\uffa2\106\uffa2\001" +
    "\002\000\062\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\054\uffa0\055\uffa0\070\203\072\205\073\204" +
    "\076\uffa0\100\uffa0\102\uffa0\104\uffa0\105\uffa0\106\uffa0\001" +
    "\002\000\050\033\127\034\144\035\131\036\140\037\133" +
    "\043\134\044\142\045\136\046\132\047\143\050\145\051" +
    "\137\052\126\054\141\055\130\076\201\100\uff78\102\uff78" +
    "\104\135\001\002\000\004\077\174\001\002\000\004\102" +
    "\173\001\002\000\004\077\170\001\002\000\056\004\060" +
    "\005\061\006\063\011\040\027\027\030\020\040\044\041" +
    "\046\042\055\052\054\056\062\057\057\060\043\061\065" +
    "\062\056\063\064\064\042\065\051\066\045\067\053\077" +
    "\041\110\017\001\002\000\054\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1\076\uffa1" +
    "\100\uffa1\102\uffa1\104\uffa1\105\uffa1\106\uffa1\001\002\000" +
    "\004\077\120\001\002\000\004\077\113\001\002\000\054" +
    "\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d" +
    "\054\uff7d\055\uff7d\076\uff7d\100\uff7d\102\uff7d\104\uff7d\105" +
    "\uff7d\106\uff7d\001\002\000\054\033\uff7c\034\uff7c\035\uff7c" +
    "\036\uff7c\037\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047" +
    "\uff7c\050\uff7c\051\uff7c\052\uff7c\054\uff7c\055\uff7c\076\uff7c" +
    "\100\uff7c\102\uff7c\104\uff7c\105\uff7c\106\uff7c\001\002\000" +
    "\004\077\106\001\002\000\054\033\uff7b\034\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\054\uff7b\055\uff7b\076\uff7b" +
    "\100\uff7b\102\uff7b\104\uff7b\105\uff7b\106\uff7b\001\002\000" +
    "\004\077\101\001\002\000\004\077\066\001\002\000\062" +
    "\004\060\005\061\006\063\011\040\027\027\030\020\031" +
    "\067\032\072\040\044\041\046\042\055\052\054\056\062" +
    "\057\057\060\043\061\065\062\056\063\064\064\042\065" +
    "\051\066\045\067\053\077\041\110\017\001\002\000\004" +
    "\103\077\001\002\000\004\100\076\001\002\000\004\100" +
    "\075\001\002\000\004\103\073\001\002\000\012\011\040" +
    "\027\027\030\020\110\017\001\002\000\004\100\uff7a\001" +
    "\002\000\054\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\054\uff87\055\uff87\076\uff87\100\uff87\102\uff87" +
    "\104\uff87\105\uff87\106\uff87\001\002\000\054\033\uff86\034" +
    "\uff86\035\uff86\036\uff86\037\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\054\uff86\055" +
    "\uff86\076\uff86\100\uff86\102\uff86\104\uff86\105\uff86\106\uff86" +
    "\001\002\000\012\011\040\027\027\030\020\110\017\001" +
    "\002\000\004\100\uff79\001\002\000\006\031\103\032\102" +
    "\001\002\000\004\100\105\001\002\000\004\100\104\001" +
    "\002\000\054\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\054\uff80\055\uff80\076\uff80\100\uff80\102\uff80" +
    "\104\uff80\105\uff80\106\uff80\001\002\000\054\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\043\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\054\uff81\055" +
    "\uff81\076\uff81\100\uff81\102\uff81\104\uff81\105\uff81\106\uff81" +
    "\001\002\000\062\004\060\005\061\006\063\011\040\027" +
    "\027\030\020\031\067\032\072\040\044\041\046\042\055" +
    "\052\054\056\062\057\057\060\043\061\065\062\056\063" +
    "\064\064\042\065\051\066\045\067\053\077\041\110\017" +
    "\001\002\000\004\100\112\001\002\000\004\100\111\001" +
    "\002\000\054\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\054\uff83\055\uff83\076\uff83\100\uff83\102\uff83" +
    "\104\uff83\105\uff83\106\uff83\001\002\000\054\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\043\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\054\uff82\055" +
    "\uff82\076\uff82\100\uff82\102\uff82\104\uff82\105\uff82\106\uff82" +
    "\001\002\000\062\004\060\005\061\006\063\011\040\027" +
    "\027\030\020\031\067\032\072\040\044\041\046\042\055" +
    "\052\054\056\062\057\057\060\043\061\065\062\056\063" +
    "\064\064\042\065\051\066\045\067\053\077\041\110\017" +
    "\001\002\000\004\100\117\001\002\000\004\100\116\001" +
    "\002\000\054\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051" +
    "\uff85\052\uff85\054\uff85\055\uff85\076\uff85\100\uff85\102\uff85" +
    "\104\uff85\105\uff85\106\uff85\001\002\000\054\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\054\uff84\055" +
    "\uff84\076\uff84\100\uff84\102\uff84\104\uff84\105\uff84\106\uff84" +
    "\001\002\000\062\004\060\005\061\006\063\011\040\027" +
    "\027\030\020\031\067\032\072\040\044\041\046\042\055" +
    "\052\054\056\062\057\057\060\043\061\065\062\056\063" +
    "\064\064\042\065\051\066\045\067\053\077\041\110\017" +
    "\001\002\000\004\100\124\001\002\000\004\100\123\001" +
    "\002\000\054\033\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\052\uff7f\054\uff7f\055\uff7f\076\uff7f\100\uff7f\102\uff7f" +
    "\104\uff7f\105\uff7f\106\uff7f\001\002\000\054\033\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\037\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\054\uff7e\055" +
    "\uff7e\076\uff7e\100\uff7e\102\uff7e\104\uff7e\105\uff7e\106\uff7e" +
    "\001\002\000\054\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037" +
    "\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\054\uff8c\055\uff8c\076\uff8c\100\uff8c\102" +
    "\uff8c\104\uff8c\105\uff8c\106\uff8c\001\002\000\056\004\060" +
    "\005\061\006\063\011\040\027\027\030\020\040\044\041" +
    "\046\042\055\052\054\056\062\057\057\060\043\061\065" +
    "\062\056\063\064\064\042\065\051\066\045\067\053\077" +
    "\041\110\017\001\002\000\056\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\040\044\041\046\042\055\052" +
    "\054\056\062\057\057\060\043\061\065\062\056\063\064" +
    "\064\042\065\051\066\045\067\053\077\041\110\017\001" +
    "\002\000\056\004\060\005\061\006\063\011\040\027\027" +
    "\030\020\040\044\041\046\042\055\052\054\056\062\057" +
    "\057\060\043\061\065\062\056\063\064\064\042\065\051" +
    "\066\045\067\053\077\041\110\017\001\002\000\056\004" +
    "\060\005\061\006\063\011\040\027\027\030\020\040\044" +
    "\041\046\042\055\052\054\056\062\057\057\060\043\061" +
    "\065\062\056\063\064\064\042\065\051\066\045\067\053" +
    "\077\041\110\017\001\002\000\056\004\060\005\061\006" +
    "\063\011\040\027\027\030\020\040\044\041\046\042\055" +
    "\052\054\056\062\057\057\060\043\061\065\062\056\063" +
    "\064\064\042\065\051\066\045\067\053\077\041\110\017" +
    "\001\002\000\056\004\060\005\061\006\063\011\040\027" +
    "\027\030\020\040\044\041\046\042\055\052\054\056\062" +
    "\057\057\060\043\061\065\062\056\063\064\064\042\065" +
    "\051\066\045\067\053\077\041\110\017\001\002\000\056" +
    "\004\060\005\061\006\063\011\040\027\027\030\020\040" +
    "\044\041\046\042\055\052\054\056\062\057\057\060\043" +
    "\061\065\062\056\063\064\064\042\065\051\066\045\067" +
    "\053\077\041\110\017\001\002\000\056\004\060\005\061" +
    "\006\063\011\040\027\027\030\020\040\044\041\046\042" +
    "\055\052\054\056\062\057\057\060\043\061\065\062\056" +
    "\063\064\064\042\065\051\066\045\067\053\077\041\110" +
    "\017\001\002\000\056\004\060\005\061\006\063\011\040" +
    "\027\027\030\020\040\044\041\046\042\055\052\054\056" +
    "\062\057\057\060\043\061\065\062\056\063\064\064\042" +
    "\065\051\066\045\067\053\077\041\110\017\001\002\000" +
    "\056\004\060\005\061\006\063\011\040\027\027\030\020" +
    "\040\044\041\046\042\055\052\054\056\062\057\057\060" +
    "\043\061\065\062\056\063\064\064\042\065\051\066\045" +
    "\067\053\077\041\110\017\001\002\000\056\004\060\005" +
    "\061\006\063\011\040\027\027\030\020\040\044\041\046" +
    "\042\055\052\054\056\062\057\057\060\043\061\065\062" +
    "\056\063\064\064\042\065\051\066\045\067\053\077\041" +
    "\110\017\001\002\000\056\004\060\005\061\006\063\011" +
    "\040\027\027\030\020\040\044\041\046\042\055\052\054" +
    "\056\062\057\057\060\043\061\065\062\056\063\064\064" +
    "\042\065\051\066\045\067\053\077\041\110\017\001\002" +
    "\000\056\004\060\005\061\006\063\011\040\027\027\030" +
    "\020\040\044\041\046\042\055\052\054\056\062\057\057" +
    "\060\043\061\065\062\056\063\064\064\042\065\051\066" +
    "\045\067\053\077\041\110\017\001\002\000\056\004\060" +
    "\005\061\006\063\011\040\027\027\030\020\040\044\041" +
    "\046\042\055\052\054\056\062\057\057\060\043\061\065" +
    "\062\056\063\064\064\042\065\051\066\045\067\053\077" +
    "\041\110\017\001\002\000\056\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\040\044\041\046\042\055\052" +
    "\054\056\062\057\057\060\043\061\065\062\056\063\064" +
    "\064\042\065\051\066\045\067\053\077\041\110\017\001" +
    "\002\000\056\004\060\005\061\006\063\011\040\027\027" +
    "\030\020\040\044\041\046\042\055\052\054\056\062\057" +
    "\057\060\043\061\065\062\056\063\064\064\042\065\051" +
    "\066\045\067\053\077\041\110\017\001\002\000\044\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\043\uff9b\044\uff9b" +
    "\051\137\052\126\054\141\055\130\076\uff9b\100\uff9b\102" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\001\002\000\054\033\127" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\043\134\044\142\045" +
    "\136\046\132\047\143\050\145\051\137\052\126\054\141" +
    "\055\130\076\uffa8\100\uffa8\102\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\001\002\000\044\033\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\043\uff9d\044\uff9d\051\137\052\126\054\141\055" +
    "\130\076\uff9d\100\uff9d\102\uff9d\104\uff9d\105\uff9d\106\uff9d" +
    "\001\002\000\050\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\045\136\046\132\047\143\050\145\051\137\052\126" +
    "\054\141\055\130\076\uff9f\100\uff9f\102\uff9f\104\uff9f\105" +
    "\uff9f\106\uff9f\001\002\000\054\033\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\054\uff8e\055\uff8e\076\uff8e" +
    "\100\uff8e\102\uff8e\104\uff8e\105\uff8e\106\uff8e\001\002\000" +
    "\054\033\127\034\144\035\uffa7\036\uffa7\037\133\043\134" +
    "\044\142\045\136\046\132\047\143\050\145\051\137\052" +
    "\126\054\141\055\130\076\uffa7\100\uffa7\102\uffa7\104\uffa7" +
    "\105\uffa7\106\uffa7\001\002\000\054\033\uff90\034\uff90\035" +
    "\uff90\036\uff90\037\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\054\141\055\130\076" +
    "\uff90\100\uff90\102\uff90\104\uff90\105\uff90\106\uff90\001\002" +
    "\000\044\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\043" +
    "\uff9c\044\uff9c\051\137\052\126\054\141\055\130\076\uff9c" +
    "\100\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c\001\002\000" +
    "\044\033\127\034\144\035\131\036\140\037\133\043\134" +
    "\044\142\045\136\046\132\047\143\050\145\051\137\052" +
    "\126\054\141\055\130\104\135\105\157\001\002\000\056" +
    "\004\060\005\061\006\063\011\040\027\027\030\020\040" +
    "\044\041\046\042\055\052\054\056\062\057\057\060\043" +
    "\061\065\062\056\063\064\064\042\065\051\066\045\067" +
    "\053\077\041\110\017\001\002\000\054\033\127\034\144" +
    "\035\131\036\140\037\133\043\134\044\142\045\136\046" +
    "\132\047\143\050\145\051\137\052\126\054\141\055\130" +
    "\076\uff8a\100\uff8a\102\uff8a\104\135\105\uff8a\106\uff8a\001" +
    "\002\000\050\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\045\136\046\132\047\143\050\145\051\137\052\126\054" +
    "\141\055\130\076\uff9e\100\uff9e\102\uff9e\104\uff9e\105\uff9e" +
    "\106\uff9e\001\002\000\052\033\127\034\144\035\uffa5\036" +
    "\uffa5\043\134\044\142\045\136\046\132\047\143\050\145" +
    "\051\137\052\126\054\141\055\130\076\uffa5\100\uffa5\102" +
    "\uffa5\104\uffa5\105\uffa5\106\uffa5\001\002\000\044\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\043\uff9a\044\uff9a\051" +
    "\137\052\126\054\141\055\130\076\uff9a\100\uff9a\102\uff9a" +
    "\104\uff9a\105\uff9a\106\uff9a\001\002\000\054\033\127\034" +
    "\144\035\131\036\140\037\133\043\134\044\142\045\136" +
    "\046\132\047\143\050\145\051\137\052\126\054\141\055" +
    "\130\076\uffa6\100\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6" +
    "\001\002\000\054\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\052\uff8d\054\uff8d\055\uff8d\076\uff8d\100\uff8d\102" +
    "\uff8d\104\uff8d\105\uff8d\106\uff8d\001\002\000\054\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\043\134\044\142\045" +
    "\136\046\132\047\143\050\145\051\137\052\126\054\141" +
    "\055\130\076\uffa9\100\uffa9\102\uffa9\104\uffa9\105\uffa9\106" +
    "\uffa9\001\002\000\054\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\054\141\055\130\076\uff8f\100\uff8f" +
    "\102\uff8f\104\uff8f\105\uff8f\106\uff8f\001\002\000\056\004" +
    "\060\005\061\006\063\011\040\027\027\030\020\040\044" +
    "\041\046\042\055\052\054\056\062\057\057\060\043\061" +
    "\065\062\056\063\064\064\042\065\051\066\045\067\053" +
    "\077\041\110\017\001\002\000\044\033\127\034\144\035" +
    "\131\036\140\037\133\043\134\044\142\045\136\046\132" +
    "\047\143\050\145\051\137\052\126\054\141\055\130\100" +
    "\172\104\135\001\002\000\054\033\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b\055\uff8b\076\uff8b" +
    "\100\uff8b\102\uff8b\104\uff8b\105\uff8b\106\uff8b\001\002\000" +
    "\054\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76\043\uff76" +
    "\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052" +
    "\uff76\054\uff76\055\uff76\076\uff76\100\uff76\102\uff76\104\uff76" +
    "\105\uff76\106\uff76\001\002\000\062\004\060\005\061\006" +
    "\063\011\040\027\027\030\020\031\067\032\072\040\044" +
    "\041\046\042\055\052\054\056\062\057\057\060\043\061" +
    "\065\062\056\063\064\064\042\065\051\066\045\067\053" +
    "\077\041\110\017\001\002\000\004\100\200\001\002\000" +
    "\004\100\177\001\002\000\054\033\uff96\034\uff96\035\uff96" +
    "\036\uff96\037\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\052\uff96\054\uff96\055\uff96\076\uff96" +
    "\100\uff96\102\uff96\104\uff96\105\uff96\106\uff96\001\002\000" +
    "\054\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\054\uff95\055\uff95\076\uff95\100\uff95\102\uff95\104\uff95" +
    "\105\uff95\106\uff95\001\002\000\056\004\060\005\061\006" +
    "\063\011\040\027\027\030\020\040\044\041\046\042\055" +
    "\052\054\056\062\057\057\060\043\061\065\062\056\063" +
    "\064\064\042\065\051\066\045\067\053\077\041\110\017" +
    "\001\002\000\006\100\uff77\102\uff77\001\002\000\006\074" +
    "\034\101\035\001\002\000\012\011\040\027\027\030\020" +
    "\110\017\001\002\000\012\011\040\027\027\030\020\110" +
    "\017\001\002\000\054\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\037\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050" +
    "\uff92\051\uff92\052\uff92\054\uff92\055\uff92\076\uff92\100\uff92" +
    "\102\uff92\104\uff92\105\uff92\106\uff92\001\002\000\054\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\054" +
    "\uff91\055\uff91\076\uff91\100\uff91\102\uff91\104\uff91\105\uff91" +
    "\106\uff91\001\002\000\054\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\037\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\054\uff99\055\uff99\076\uff99\100" +
    "\uff99\102\uff99\104\uff99\105\uff99\106\uff99\001\002\000\062" +
    "\004\060\005\061\006\063\011\040\027\027\030\020\031" +
    "\067\032\072\040\044\041\046\042\055\052\054\056\062" +
    "\057\057\060\043\061\065\062\056\063\064\064\042\065" +
    "\051\066\045\067\053\077\041\110\017\001\002\000\004" +
    "\100\215\001\002\000\004\100\214\001\002\000\054\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054" +
    "\uff94\055\uff94\076\uff94\100\uff94\102\uff94\104\uff94\105\uff94" +
    "\106\uff94\001\002\000\054\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\054\uff93\055\uff93\076\uff93\100" +
    "\uff93\102\uff93\104\uff93\105\uff93\106\uff93\001\002\000\054" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\054\uffa4\055\uffa4\076\uffa4\100\uffa4\102\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\001\002\000\062\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\031\067\032\072\040\044\041" +
    "\046\042\055\052\054\056\062\057\057\060\043\061\065" +
    "\062\056\063\064\064\042\065\051\066\045\067\053\077" +
    "\041\110\017\001\002\000\004\100\223\001\002\000\004" +
    "\100\222\001\002\000\054\033\uff89\034\uff89\035\uff89\036" +
    "\uff89\037\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\054\uff89\055\uff89\076\uff89\100" +
    "\uff89\102\uff89\104\uff89\105\uff89\106\uff89\001\002\000\054" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\054\uff88\055\uff88\076\uff88\100\uff88\102\uff88\104\uff88\105" +
    "\uff88\106\uff88\001\002\000\062\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\031\067\032\072\040\044\041" +
    "\046\042\055\052\054\056\062\057\057\060\043\061\065" +
    "\062\056\063\064\064\042\065\051\066\045\067\053\077" +
    "\041\110\017\001\002\000\004\100\230\001\002\000\004" +
    "\100\227\001\002\000\054\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\054\uff98\055\uff98\076\uff98\100" +
    "\uff98\102\uff98\104\uff98\105\uff98\106\uff98\001\002\000\054" +
    "\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\054\uff97\055\uff97\076\uff97\100\uff97\102\uff97\104\uff97\105" +
    "\uff97\106\uff97\001\002\000\044\033\127\034\144\035\131" +
    "\036\140\037\133\043\134\044\142\045\136\046\132\047" +
    "\143\050\145\051\137\052\126\054\141\055\130\100\232" +
    "\104\135\001\002\000\054\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\076\uffa3\100" +
    "\uffa3\102\uffa3\104\uffa3\105\uffa3\106\uffa3\001\002\000\006" +
    "\075\uff72\103\uff72\001\002\000\006\075\uff74\103\uff74\001" +
    "\002\000\006\075\uff73\103\uff73\001\002\000\004\103\240" +
    "\001\002\000\006\075\uff71\103\uff71\001\002\000\004\103" +
    "\241\001\002\000\012\004\233\005\234\006\235\054\237" +
    "\001\002\000\004\075\243\001\002\000\054\033\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\043\uff75\044\uff75\045\uff75" +
    "\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\054\uff75\055" +
    "\uff75\076\uff75\100\uff75\102\uff75\104\uff75\105\uff75\106\uff75" +
    "\001\002\000\004\106\245\001\002\000\032\002\ufff4\011" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\022\ufff4" +
    "\027\ufff4\030\ufff4\102\ufff4\110\ufff4\001\002\000\004\070" +
    "\247\001\002\000\006\074\034\101\035\001\002\000\004" +
    "\106\251\001\002\000\032\002\ufff7\011\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\022\ufff7\027\ufff7\030\ufff7" +
    "\102\ufff7\110\ufff7\001\002\000\004\110\267\001\002\000" +
    "\004\110\262\001\002\000\004\110\255\001\002\000\006" +
    "\004\257\005\256\001\002\000\004\106\261\001\002\000" +
    "\004\106\260\001\002\000\030\002\uffed\011\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\022\uffed\027\uffed\030" +
    "\uffed\110\uffed\001\002\000\030\002\uffee\011\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\uffee\022\uffee\027\uffee\030" +
    "\uffee\110\uffee\001\002\000\006\004\263\006\264\001\002" +
    "\000\004\106\266\001\002\000\004\106\265\001\002\000" +
    "\030\002\uffec\011\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\022\uffec\027\uffec\030\uffec\110\uffec\001\002\000" +
    "\030\002\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\022\uffeb\027\uffeb\030\uffeb\110\uffeb\001\002\000" +
    "\006\041\270\042\271\001\002\000\004\106\273\001\002" +
    "\000\004\106\272\001\002\000\030\002\uffe9\011\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\022\uffe9\027\uffe9" +
    "\030\uffe9\110\uffe9\001\002\000\030\002\uffea\011\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\022\uffea\027\uffea" +
    "\030\uffea\110\uffea\001\002\000\012\011\040\027\027\030" +
    "\020\110\017\001\002\000\070\023\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\043\uffe3\044\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3" +
    "\070\uffe3\072\uffe3\073\uffe3\074\uffe3\076\uffe3\100\uffe3\101" +
    "\uffe3\102\uffe3\104\uffe3\105\uffe3\106\uffe3\001\002\000\034" +
    "\002\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\022\uffdd\027\uffdd\030\uffdd\076\uffdd\102\uffdd\110\uffdd" +
    "\001\002\000\100\004\060\005\061\006\063\011\040\013" +
    "\345\014\342\015\354\017\353\020\343\021\361\023\300" +
    "\027\027\030\020\040\044\041\046\042\055\052\054\056" +
    "\062\057\057\060\043\061\065\062\056\063\064\064\042" +
    "\065\051\066\045\067\053\077\041\102\uffda\107\344\110" +
    "\347\001\002\000\012\024\305\025\304\026\301\074\303" +
    "\001\002\000\004\101\uffc8\001\002\000\004\101\320\001" +
    "\002\000\012\004\307\005\311\054\312\110\310\001\002" +
    "\000\004\101\uffc9\001\002\000\004\101\uffca\001\002\000" +
    "\004\101\uffc7\001\002\000\006\075\uffc4\103\uffc4\001\002" +
    "\000\006\075\uffc1\103\uffc1\001\002\000\006\075\uffc2\103" +
    "\uffc2\001\002\000\006\075\uffc3\103\uffc3\001\002\000\004" +
    "\103\314\001\002\000\004\103\315\001\002\000\012\004" +
    "\307\005\311\054\312\110\310\001\002\000\004\075\317" +
    "\001\002\000\012\023\uffc5\076\uffc5\101\uffc5\102\uffc5\001" +
    "\002\000\016\010\322\011\040\012\325\027\027\030\020" +
    "\110\017\001\002\000\014\023\300\074\303\076\uffd1\101" +
    "\277\102\uffd1\001\002\000\012\011\040\027\027\030\020" +
    "\110\017\001\002\000\006\076\333\102\uffd3\001\002\000" +
    "\006\076\uffcd\102\uffcd\001\002\000\012\011\040\027\027" +
    "\030\020\110\017\001\002\000\006\076\uffcc\102\uffcc\001" +
    "\002\000\004\102\330\001\002\000\110\002\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\027\uffd4" +
    "\030\uffd4\040\uffd4\041\uffd4\042\uffd4\052\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\067\uffd4\076\uffd4\077\uffd4\102\uffd4\107\uffd4\110" +
    "\uffd4\001\002\000\012\023\300\076\uffcf\101\277\102\uffcf" +
    "\001\002\000\006\076\uffcb\102\uffcb\001\002\000\016\010" +
    "\322\011\040\012\325\027\027\030\020\110\017\001\002" +
    "\000\004\102\uffd2\001\002\000\006\076\uffce\102\uffce\001" +
    "\002\000\012\023\300\076\uffd0\101\341\102\uffd0\001\002" +
    "\000\012\023\uffc6\076\uffc6\101\uffc6\102\uffc6\001\002\000" +
    "\006\076\uffdb\102\uffdb\001\002\000\100\004\060\005\061" +
    "\006\063\011\040\013\345\014\342\015\354\017\353\020" +
    "\343\021\361\023\300\027\027\030\020\040\044\041\046" +
    "\042\055\052\054\056\062\057\057\060\043\061\065\062" +
    "\056\063\064\064\042\065\051\066\045\067\053\077\041" +
    "\102\uffda\107\344\110\347\001\002\000\004\110\u0139\001" +
    "\002\000\004\105\u0136\001\002\000\004\101\u012e\001\002" +
    "\000\004\110\u012b\001\002\000\100\004\060\005\061\006" +
    "\063\011\040\013\345\014\342\015\354\017\353\020\343" +
    "\021\361\023\300\027\027\030\020\040\044\041\046\042" +
    "\055\052\054\056\062\057\057\060\043\061\065\062\056" +
    "\063\064\064\042\065\051\066\045\067\053\077\041\102" +
    "\uffda\107\344\110\347\001\002\000\056\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5" +
    "\070\uffe5\072\uffe5\073\uffe5\103\uffe5\104\uffe5\106\uffe5\110" +
    "\u011f\001\002\000\044\033\127\034\144\035\131\036\140" +
    "\037\133\043\134\044\142\045\136\046\132\047\143\050" +
    "\145\051\137\052\126\054\141\055\130\104\135\106\u011e" +
    "\001\002\000\100\004\uffd6\005\uffd6\006\uffd6\011\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6" +
    "\027\uffd6\030\uffd6\040\uffd6\041\uffd6\042\uffd6\052\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\077\uffd6\102\uffd6\107\uffd6\110" +
    "\uffd6\001\002\000\004\102\u011d\001\002\000\004\110\u011a" +
    "\001\002\000\004\110\365\001\002\000\100\004\uffd5\005" +
    "\uffd5\006\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\023\uffd5\027\uffd5\030\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\052\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\077" +
    "\uffd5\102\uffd5\107\uffd5\110\uffd5\001\002\000\100\004\uffc0" +
    "\005\uffc0\006\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\023\uffc0\027\uffc0\030\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\052\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\077\uffc0\102\uffc0\107\uffc0\110\uffc0\001\002\000\100\004" +
    "\uffd8\005\uffd8\006\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\023\uffd8\027\uffd8\030\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\052\uffd8\056\uffd8\057\uffd8\060\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\077\uffd8\102\uffd8\107\uffd8\110\uffd8\001\002\000\100" +
    "\004\uffd7\005\uffd7\006\uffd7\011\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\027\uffd7\030\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\052\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\077\uffd7\102\uffd7\107\uffd7\110\uffd7\001\002\000" +
    "\004\105\362\001\002\000\056\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\040\044\041\046\042\055\052" +
    "\054\056\062\057\057\060\043\061\065\062\056\063\064" +
    "\064\042\065\051\066\045\067\053\077\041\110\017\001" +
    "\002\000\044\033\127\034\144\035\131\036\140\037\133" +
    "\043\134\044\142\045\136\046\132\047\143\050\145\051" +
    "\137\052\126\054\141\055\130\104\135\106\364\001\002" +
    "\000\100\004\uff6f\005\uff6f\006\uff6f\011\uff6f\013\uff6f\014" +
    "\uff6f\015\uff6f\017\uff6f\020\uff6f\021\uff6f\023\uff6f\027\uff6f" +
    "\030\uff6f\040\uff6f\041\uff6f\042\uff6f\052\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f" +
    "\066\uff6f\067\uff6f\077\uff6f\102\uff6f\107\uff6f\110\uff6f\001" +
    "\002\000\012\070\370\071\371\076\366\106\uffb9\001\002" +
    "\000\006\020\376\021\377\001\002\000\004\106\u0118\001" +
    "\002\000\006\074\034\101\035\001\002\000\056\004\060" +
    "\005\061\006\063\011\040\027\027\030\020\040\044\041" +
    "\046\042\055\052\054\056\062\057\057\060\043\061\065" +
    "\062\056\063\064\064\042\065\051\066\045\067\053\077" +
    "\041\110\017\001\002\000\044\033\127\034\144\035\131" +
    "\036\140\037\133\043\134\044\142\045\136\046\132\047" +
    "\143\050\145\051\137\052\126\054\141\055\130\104\135" +
    "\106\uffb8\001\002\000\006\076\374\106\uffb6\001\002\000" +
    "\006\020\376\021\377\001\002\000\004\106\uffb7\001\002" +
    "\000\004\105\u0105\001\002\000\004\105\u0100\001\002\000" +
    "\006\070\u0101\071\u0102\001\002\000\006\074\034\101\035" +
    "\001\002\000\056\004\060\005\061\006\063\011\040\027" +
    "\027\030\020\040\044\041\046\042\055\052\054\056\062" +
    "\057\057\060\043\061\065\062\056\063\064\064\042\065" +
    "\051\066\045\067\053\077\041\110\017\001\002\000\044" +
    "\033\127\034\144\035\131\036\140\037\133\043\134\044" +
    "\142\045\136\046\132\047\143\050\145\051\137\052\126" +
    "\054\141\055\130\104\135\106\uffae\001\002\000\004\106" +
    "\uffad\001\002\000\006\070\u0106\071\u0107\001\002\000\006" +
    "\074\034\101\035\001\002\000\056\004\060\005\061\006" +
    "\063\011\040\027\027\030\020\040\044\041\046\042\055" +
    "\052\054\056\062\057\057\060\043\061\065\062\056\063" +
    "\064\064\042\065\051\066\045\067\053\077\041\110\017" +
    "\001\002\000\046\033\127\034\144\035\131\036\140\037" +
    "\133\043\134\044\142\045\136\046\132\047\143\050\145" +
    "\051\137\052\126\054\141\055\130\076\u0109\104\135\106" +
    "\uffb0\001\002\000\004\021\u010a\001\002\000\004\105\u010b" +
    "\001\002\000\006\070\u010c\071\u010d\001\002\000\006\074" +
    "\034\101\035\001\002\000\056\004\060\005\061\006\063" +
    "\011\040\027\027\030\020\040\044\041\046\042\055\052" +
    "\054\056\062\057\057\060\043\061\065\062\056\063\064" +
    "\064\042\065\051\066\045\067\053\077\041\110\017\001" +
    "\002\000\044\033\127\034\144\035\131\036\140\037\133" +
    "\043\134\044\142\045\136\046\132\047\143\050\145\051" +
    "\137\052\126\054\141\055\130\104\135\106\uffb4\001\002" +
    "\000\004\106\uffb3\001\002\000\006\076\u0111\106\uffaf\001" +
    "\002\000\004\021\u0112\001\002\000\004\105\u0113\001\002" +
    "\000\006\070\u0114\071\u0115\001\002\000\006\074\034\101" +
    "\035\001\002\000\056\004\060\005\061\006\063\011\040" +
    "\027\027\030\020\040\044\041\046\042\055\052\054\056" +
    "\062\057\057\060\043\061\065\062\056\063\064\064\042" +
    "\065\051\066\045\067\053\077\041\110\017\001\002\000" +
    "\044\033\127\034\144\035\131\036\140\037\133\043\134" +
    "\044\142\045\136\046\132\047\143\050\145\051\137\052" +
    "\126\054\141\055\130\104\135\106\uffb2\001\002\000\004" +
    "\106\uffb1\001\002\000\100\004\uffbb\005\uffbb\006\uffbb\011" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\023\uffbb\027\uffbb\030\uffbb\040\uffbb\041\uffbb\042\uffbb\052" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\064\uffbb\065\uffbb\066\uffbb\067\uffbb\077\uffbb\102\uffbb\107" +
    "\uffbb\110\uffbb\001\002\000\004\106\uffb5\001\002\000\012" +
    "\070\370\071\371\076\366\106\uffb9\001\002\000\004\106" +
    "\u011c\001\002\000\100\004\uffbd\005\uffbd\006\uffbd\011\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\023" +
    "\uffbd\027\uffbd\030\uffbd\040\uffbd\041\uffbd\042\uffbd\052\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\077\uffbd\102\uffbd\107\uffbd" +
    "\110\uffbd\001\002\000\006\076\uffdc\102\uffdc\001\002\000" +
    "\100\004\uff6e\005\uff6e\006\uff6e\011\uff6e\013\uff6e\014\uff6e" +
    "\015\uff6e\017\uff6e\020\uff6e\021\uff6e\023\uff6e\027\uff6e\030" +
    "\uff6e\040\uff6e\041\uff6e\042\uff6e\052\uff6e\056\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066" +
    "\uff6e\067\uff6e\077\uff6e\102\uff6e\107\uff6e\110\uff6e\001\002" +
    "\000\014\070\370\071\371\076\366\101\u0121\106\uffb9\001" +
    "\002\000\004\106\u0129\001\002\000\004\110\u0122\001\002" +
    "\000\012\070\370\071\371\076\366\106\uffb9\001\002\000" +
    "\006\102\uffac\110\u0122\001\002\000\004\102\u0125\001\002" +
    "\000\100\004\uffbf\005\uffbf\006\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\027\uffbf" +
    "\030\uffbf\040\uffbf\041\uffbf\042\uffbf\052\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\077\uffbf\102\uffbf\107\uffbf\110\uffbf\001" +
    "\002\000\004\102\uffab\001\002\000\004\106\u0128\001\002" +
    "\000\006\102\uffaa\110\uffaa\001\002\000\100\004\uffba\005" +
    "\uffba\006\uffba\011\uffba\013\uffba\014\uffba\015\uffba\017\uffba" +
    "\020\uffba\021\uffba\023\uffba\027\uffba\030\uffba\040\uffba\041" +
    "\uffba\042\uffba\052\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\077" +
    "\uffba\102\uffba\107\uffba\110\uffba\001\002\000\004\102\uffd9" +
    "\001\002\000\012\070\370\071\371\076\366\106\uffb9\001" +
    "\002\000\004\106\u012d\001\002\000\100\004\uffbc\005\uffbc" +
    "\006\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\023\uffbc\027\uffbc\030\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\052\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\077\uffbc" +
    "\102\uffbc\107\uffbc\110\uffbc\001\002\000\004\007\u0130\001" +
    "\002\000\006\102\uff6c\106\u0134\001\002\000\004\007\u0133" +
    "\001\002\000\004\102\u0132\001\002\000\100\004\uff6d\005" +
    "\uff6d\006\uff6d\011\uff6d\013\uff6d\014\uff6d\015\uff6d\017\uff6d" +
    "\020\uff6d\021\uff6d\023\uff6d\027\uff6d\030\uff6d\040\uff6d\041" +
    "\uff6d\042\uff6d\052\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d" +
    "\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\077" +
    "\uff6d\102\uff6d\107\uff6d\110\uff6d\001\002\000\006\102\uff6a" +
    "\106\uff6a\001\002\000\004\007\u0130\001\002\000\004\102" +
    "\uff6b\001\002\000\056\004\060\005\061\006\063\011\040" +
    "\027\027\030\020\040\044\041\046\042\055\052\054\056" +
    "\062\057\057\060\043\061\065\062\056\063\064\064\042" +
    "\065\051\066\045\067\053\077\041\110\017\001\002\000" +
    "\044\033\127\034\144\035\131\036\140\037\133\043\134" +
    "\044\142\045\136\046\132\047\143\050\145\051\137\052" +
    "\126\054\141\055\130\104\135\106\u0138\001\002\000\100" +
    "\004\uff70\005\uff70\006\uff70\011\uff70\013\uff70\014\uff70\015" +
    "\uff70\017\uff70\020\uff70\021\uff70\023\uff70\027\uff70\030\uff70" +
    "\040\uff70\041\uff70\042\uff70\052\uff70\056\uff70\057\uff70\060" +
    "\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70" +
    "\067\uff70\077\uff70\102\uff70\107\uff70\110\uff70\001\002\000" +
    "\012\070\370\071\371\076\366\106\uffb9\001\002\000\004" +
    "\106\u013b\001\002\000\100\004\uffbe\005\uffbe\006\uffbe\011" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\023\uffbe\027\uffbe\030\uffbe\040\uffbe\041\uffbe\042\uffbe\052" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\067\uffbe\077\uffbe\102\uffbe\107" +
    "\uffbe\110\uffbe\001\002\000\004\102\u013d\001\002\000\034" +
    "\002\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\022\uffde\027\uffde\030\uffde\076\uffde\102\uffde\110\uffde" +
    "\001\002\000\004\002\001\001\002\000\006\070\u0140\106" +
    "\u0141\001\002\000\006\074\034\101\035\001\002\000\032" +
    "\002\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\022\ufff6\027\ufff6\030\ufff6\102\ufff6\110\ufff6\001\002" +
    "\000\004\106\u0143\001\002\000\032\002\ufff9\011\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\022\ufff9\027\ufff9" +
    "\030\ufff9\102\ufff9\110\ufff9\001\002\000\004\002\uffff\001" +
    "\002\000\004\101\u0146\001\002\000\014\013\026\014\011" +
    "\015\025\017\030\110\u0147\001\002\000\004\110\u014d\001" +
    "\002\000\016\013\ufff0\014\ufff0\015\ufff0\017\ufff0\102\ufff0" +
    "\110\ufff0\001\002\000\004\102\u014c\001\002\000\016\013" +
    "\026\014\011\015\025\017\030\102\ufff2\110\u0147\001\002" +
    "\000\004\102\ufff1\001\002\000\030\002\ufff3\011\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\022\ufff3\027\ufff3" +
    "\030\ufff3\110\ufff3\001\002\000\004\106\u014e\001\002\000" +
    "\016\013\uffef\014\uffef\015\uffef\017\uffef\102\uffef\110\uffef" +
    "\001\002\000\006\023\300\101\u0151\001\002\000\030\002" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\022\uffdf\027\uffdf\030\uffdf\110\uffdf\001\002\000\100\004" +
    "\060\005\061\006\063\011\040\013\345\014\342\015\354" +
    "\017\353\020\343\021\361\023\300\027\027\030\020\040" +
    "\044\041\046\042\055\052\054\056\062\057\057\060\043" +
    "\061\065\062\056\063\064\064\042\065\051\066\045\067" +
    "\053\077\041\102\uffda\107\344\110\347\001\002\000\004" +
    "\102\u0153\001\002\000\030\002\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\022\uffe0\027\uffe0\030\uffe0" +
    "\110\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0151\000\030\002\011\003\007\004\006\005\013\006" +
    "\020\007\005\012\022\013\021\014\015\015\014\016\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\u0143\003\007\004\006" +
    "\005\013\006\020\007\005\012\022\013\021\014\015\015" +
    "\014\016\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\035\001\001\000\002\001\001\000\004\043\235\001\001" +
    "\000\012\012\022\013\046\037\047\040\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\022\013\046\037\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\022\013\046\037\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\022\013\046\037\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\022" +
    "\013\046\037\047\040\070\042\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\022\013\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\022\013\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\022\013\046\037\047\040\107\042\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\022\013\046\037\047\040" +
    "\114\042\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\022\013" +
    "\046\037\047\040\121\042\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\022\013\046\037\166\001\001" +
    "\000\010\012\022\013\046\037\165\001\001\000\010\012" +
    "\022\013\046\037\164\001\001\000\010\012\022\013\046" +
    "\037\163\001\001\000\010\012\022\013\046\037\162\001" +
    "\001\000\010\012\022\013\046\037\161\001\001\000\010" +
    "\012\022\013\046\037\160\001\001\000\010\012\022\013" +
    "\046\037\155\001\001\000\010\012\022\013\046\037\154" +
    "\001\001\000\010\012\022\013\046\037\153\001\001\000" +
    "\010\012\022\013\046\037\152\001\001\000\010\012\022" +
    "\013\046\037\151\001\001\000\010\012\022\013\046\037" +
    "\150\001\001\000\010\012\022\013\046\037\147\001\001" +
    "\000\010\012\022\013\046\037\146\001\001\000\010\012" +
    "\022\013\046\037\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\022\013\046\037\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\022\013\046" +
    "\037\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\022\013\046\037\047\040\175" +
    "\042\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\022\013\046" +
    "\037\047\040\201\001\001\000\002\001\001\000\004\041" +
    "\207\001\001\000\006\012\022\013\206\001\001\000\006" +
    "\012\022\013\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\012\022\013\046\037\047" +
    "\040\212\042\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\022\013\046\037\047\040\220\042\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\012\022\013\046\037\047\040" +
    "\225\042\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\022" +
    "\013\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\022\013\046\026\u013b\027\345\030\354\031\350" +
    "\032\355\037\347\044\357\045\356\001\001\000\006\022" +
    "\301\024\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\022\013\320\016\323\017" +
    "\325\020\326\021\322\001\001\000\010\023\335\024\336" +
    "\030\275\001\001\000\006\012\022\013\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\022\013\330" +
    "\016\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\275\001\001\000\002\001\001" +
    "\000\016\012\022\013\320\016\323\017\325\020\333\021" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\022\013\046\026\351\027\345\030\354\031\350" +
    "\032\355\037\347\044\357\045\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\022\013\046\026\u0129\027\345\030\354\031" +
    "\350\032\355\037\347\044\357\045\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\022\013\046\037\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\366\001" +
    "\001\000\004\034\u0118\001\001\000\002\001\001\000\004" +
    "\041\372\001\001\000\010\012\022\013\046\037\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0103\001\001\000\010" +
    "\012\022\013\046\037\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\u010f\001\001" +
    "\000\010\012\022\013\046\037\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\u010e\001\001\000\010\012\022\013\046\037" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u0116\001\001\000\010\012\022\013\046" +
    "\037\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u011f\001\001\000\002\001\001" +
    "\000\006\035\u0123\036\u0122\001\001\000\004\033\u0126\001" +
    "\001\000\006\035\u0125\036\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\u0130\047\u012e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\046\u0134\047\u012e\001\001\000\002\001\001" +
    "\000\010\012\022\013\046\037\u0136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\u0147" +
    "\010\u0148\011\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u0147\010\u014a\011\u0149" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\u014f\001\001\000\002" +
    "\001\001\000\026\012\022\013\046\026\u0151\027\345\030" +
    "\354\031\350\032\355\037\347\044\357\045\356\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {
	  return _reduce_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions() {
      action_obj = new CUP$Parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
		  int                        act_num,
		  java_cup.runtime.lr_parser parser,
		  java.util.Stack            stack,
		  int                        top) throws java.lang.Exception {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

	private FeaturesSymbolTable featuresSymbolTable = new FeaturesSymbolTable();
	
	public FeaturesSymbolTable getFeaturesSymbolTable() {
		return this.featuresSymbolTable;
	}

	public void report_fatal_error ( String message, Object info ) throws Exception { 
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				 message = message + " in line "+(s.left+1);
				 if (s.right >= 0)
				 	message = message + ", column "+(s.right+1);
			}
		}
		throw new Exception("Parsing error : "+message); 
	} 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // data_pair ::= STRING STRING 
            {
              DataPair RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DataPair(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_pair",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // data_pair_list ::= data_pair SEMICOLON data_pair_list 
            {
              DataPairList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DataPair e1 = (DataPair)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataPairList e2 = (DataPairList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DataPairList(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_pair_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // data_pair_list ::= data_pair 
            {
              DataPairList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataPair e1 = (DataPair)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DataPairList(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_pair_list",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // data ::= DATA CBRA data_pair_list CBRAEND 
            {
              Data RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataPairList e1 = (DataPairList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Data(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // constraint ::= expression SEMICOLON 
            {
              Constraint RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constraint(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // constraint ::= IFOUT COLON expression SEMICOLON 
            {
              Constraint RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constraint(false, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // constraint ::= IFIN COLON expression SEMICOLON 
            {
              Constraint RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constraint(true, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constraint",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // set_expression_bound ::= TIMES 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // set_expression_bound ::= ZERO 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "0"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // set_expression_bound ::= REAL 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // set_expression_bound ::= INTEGER 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression_bound",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // set_expression ::= SQBRA set_expression_bound DOT DOT set_expression_bound SQBRAEND 
            {
              SetExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  new SetExpression(e1, e2, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // set_expression ::= CBRA expression_list CBRAEND 
            {
              SetExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SetExpression(e1, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_list ::= expression COMMA expression_list 
            {
              ExpressionList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionList e2 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionList(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_list ::= expression 
            {
              ExpressionList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpressionList(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // children_attribute_id ::= CHILDREN DOT long_id 
            {
              ChildrenAttributeID RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ChildrenAttributeID(ChildrenAttributeID.CHILDREN, e1,parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("children_attribute_id",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // children_attribute_id ::= SCHILDREN DOT long_id 
            {
              ChildrenAttributeID RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ChildrenAttributeID(ChildrenAttributeID.SELECTED_CHILDREN, e1,parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("children_attribute_id",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression ::= REAL 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RealExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression ::= INTEGER 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= ZERO 
            {
              Expression RESULT =null;
		 RESULT = new ZeroExpression(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= AVG BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AvgAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression ::= AVG BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AvgAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression ::= COUNT BRA CHILDREN BRAEND 
            {
              Expression RESULT =null;
		 RESULT = new CountAggExpression(ChildrenAttributeID.CHILDREN, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= COUNT BRA SCHILDREN BRAEND 
            {
              Expression RESULT =null;
		 RESULT = new CountAggExpression(ChildrenAttributeID.SELECTED_CHILDREN, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= MAX BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MaxAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= MAX BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MaxAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= MIN BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= MIN BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= MUL BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MulAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= MUL BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MulAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= SUM BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SumAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= SUM BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SumAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= expression QUEST expression COLON expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new QuestExpression(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= ABS BRA expression BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AbsExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= expression DIVIDE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivideExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression TIMES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TimesExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= long_id REQUIRES long_id 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncludesExpression(e1, e2, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= long_id EXCLUDES long_id 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExcludesExpression(e1, e2, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= XORAGG BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new XorAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= XORAGG BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new XorAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= ORAGG BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OrAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= ORAGG BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new OrAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= ANDAGG BRA children_attribute_id BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChildrenAttributeID e1 = (ChildrenAttributeID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AndAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= ANDAGG BRA expression_list BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList e1 = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AndAggExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= long_id IN set_expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetExpression e2 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InExpression(new LongIDExpression(e1, parser.getFeaturesSymbolTable()), e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= expression LOWER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LowerExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= expression LEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LEQExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression GEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GEQExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expression NOTEQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqualsExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqualsExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= long_id 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LongIDExpression(e1, parser.getFeaturesSymbolTable()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new FalseExpression(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new TrueExpression(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= BRA expression BRAEND 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParenthesesExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpression(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= expression IFANDONLYIF expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfAndOnlyIfExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= expression INVERSEIMPLIES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InverseImpliesExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression IMPLIES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ImpliesExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpression(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sub_attribute ::= ID attribute_body SEMICOLON 
            {
              SubAttribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttributeBody e2 = (AttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SubAttribute(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_attribute",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struct_attribute_body ::= sub_attribute struct_attribute_body 
            {
              StructAttributeBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SubAttribute e1 = (SubAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StructAttributeBody e2 = (StructAttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAttributeBody(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_attribute_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struct_attribute_body ::= sub_attribute 
            {
              StructAttributeBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SubAttribute e1 = (SubAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAttributeBody(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_attribute_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // attribute_conditional ::= IFOUT COLON IN set_expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetExpression e1 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(false, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // attribute_conditional ::= IFOUT COLON IS expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(false, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // attribute_conditional ::= IFIN COLON IN set_expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetExpression e1 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(true, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // attribute_conditional ::= IFIN COLON IS expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(true, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // attribute_conditional ::= IFIN COLON IN set_expression COMMA IFOUT COLON IN set_expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SetExpression e1 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetExpression e2 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // attribute_conditional ::= IFIN COLON IN set_expression COMMA IFOUT COLON IS expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SetExpression e1 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // attribute_conditional ::= IFIN COLON IS expression COMMA IFOUT COLON IN set_expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetExpression e2 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // attribute_conditional ::= IFIN COLON IS expression COMMA IFOUT COLON IS expression 
            {
              AttributeConditionnal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeConditionnal(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_conditional",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // attribute_body ::= COMMA attribute_conditional 
            {
              AttributeBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AttributeConditionnal e1 = (AttributeConditionnal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeBody(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // attribute_body ::= IN set_expression 
            {
              AttributeBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SetExpression e1 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeBody(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // attribute_body ::= IN set_expression COMMA attribute_conditional 
            {
              AttributeBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SetExpression e1 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AttributeConditionnal e2 = (AttributeConditionnal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeBody(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // attribute_body ::= IS expression 
            {
              AttributeBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AttributeBody(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // attribute_body ::= 
            {
              AttributeBody RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_body",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // base_attribute ::= ID ID attribute_body SEMICOLON 
            {
              BaseAttribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttributeBody e3 = (AttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BaseAttribute(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_attribute",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // base_attribute ::= ENUM ID attribute_body SEMICOLON 
            {
              BaseAttribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttributeBody e2 = (AttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BaseAttribute(Expression.ENUM, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_attribute",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // base_attribute ::= BOOL ID attribute_body SEMICOLON 
            {
              BaseAttribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttributeBody e2 = (AttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BaseAttribute(Expression.BOOL, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_attribute",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // base_attribute ::= REALP ID attribute_body SEMICOLON 
            {
              BaseAttribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttributeBody e2 = (AttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BaseAttribute(Expression.REAL, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_attribute",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // base_attribute ::= INT ID attribute_body SEMICOLON 
            {
              BaseAttribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AttributeBody e2 = (AttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BaseAttribute(Expression.INT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_attribute",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // attribute ::= ID ID CBRA struct_attribute_body CBRAEND 
            {
              Attribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StructAttributeBody e3 = (StructAttributeBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Attribute(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // attribute ::= base_attribute 
            {
              Attribute RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BaseAttribute e1 = (BaseAttribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cardinality_limit ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cardinality_limit ::= INTEGER 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cardinality_limit ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cardinality_limit ::= ZERO 
            {
              String RESULT =null;
		 RESULT = "0"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinality_limit",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cardinalityBase ::= SQBRA cardinality_limit DOT DOT cardinality_limit SQBRAEND 
            {
              Cardinality RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Cardinality(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinalityBase",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cardinalityFeature ::= cardinalityBase 
            {
              Cardinality RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cardinality e1 = (Cardinality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinalityFeature",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cardinalityGroup ::= cardinalityBase 
            {
              Cardinality RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cardinality e1 = (Cardinality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinalityGroup",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cardinalityGroup ::= ALLOF 
            {
              Cardinality RESULT =null;
		 RESULT = new Cardinality("*", "*"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinalityGroup",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cardinalityGroup ::= SOMEOF 
            {
              Cardinality RESULT =null;
		 RESULT = new Cardinality ("1", "*"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinalityGroup",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cardinalityGroup ::= ONEOF 
            {
              Cardinality RESULT =null;
		 RESULT = new Cardinality("1", "1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cardinalityGroup",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // hierarchical_feature ::= OPT feature_node 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e1.setOptionalStrict(); RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // hierarchical_feature ::= feature_node_clone 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // hierarchical_feature ::= feature_node 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // hierarchical_feature ::= SHARED long_id 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(false, e1, false, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // hierarchical_feature ::= OPT long_id 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(false, e1, true, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // hierarchical_feature ::= long_id cardinalityFeature 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cardinality e2 = (Cardinality)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // hierarchical_feature ::= long_id 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(false, e1, false, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_feature",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // hierarchical_features ::= hierarchical_feature COMMA hierarchical_features 
            {
              HierarchicalFeatures RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		HierarchicalFeatures e2 = (HierarchicalFeatures)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HierarchicalFeatures(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_features",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // hierarchical_features ::= hierarchical_feature 
            {
              HierarchicalFeatures RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new HierarchicalFeatures(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hierarchical_features",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // feature_group ::= GROUP cardinalityGroup CBRA hierarchical_features CBRAEND 
            {
              FeatureGroup RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cardinality e1 = (Cardinality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		HierarchicalFeatures e2 = (HierarchicalFeatures)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FeatureGroup(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_group",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // feature_body_item ::= feature_group 
            {
              FeatureBodyItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FeatureGroup e1 = (FeatureGroup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_body_item",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // feature_body_item ::= attribute 
            {
              FeatureBodyItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attribute e1 = (Attribute)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_body_item",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // feature_body_item ::= constraint 
            {
              FeatureBodyItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_body_item",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // feature_body_item ::= data 
            {
              FeatureBodyItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Data e1 = (Data)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_body_item",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // feature_body ::= feature_body_item feature_body 
            {
              FeatureBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FeatureBodyItem e1 = (FeatureBodyItem)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FeatureBody e2 = (FeatureBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FeatureBody(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_body",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // feature_body ::= 
            {
              FeatureBody RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_body",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // feature_node_clone ::= long_id cardinalityFeature feature_group 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cardinality e2 = (Cardinality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FeatureGroup e3 = (FeatureGroup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_node_clone",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // feature_node_clone ::= long_id cardinalityFeature CBRA feature_body CBRAEND 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cardinality e2 = (Cardinality)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FeatureBody e3 = (FeatureBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Feature(e1, e2, e3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_node_clone",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // feature_node ::= long_id feature_group 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FeatureGroup e2 = (FeatureGroup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(false, e1, e2, false, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // feature_node ::= long_id CBRA feature_body CBRAEND 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FeatureBody e2 = (FeatureBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Feature(false, e1, e2, false, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_node",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // feature_root ::= ROOT ID feature_group 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FeatureGroup e2 = (FeatureGroup)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Feature(true, e1, e2, false, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_root",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // feature_root ::= ROOT ID CBRA feature_body CBRAEND 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FeatureBody e2 = (FeatureBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Feature(true, e1, e2, false, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature_root",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // feature ::= feature_node 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // feature ::= feature_root 
            {
              Feature RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("feature",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // long_id ::= short_id DOT long_id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1+"."+e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_id",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // long_id ::= short_id 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("long_id",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // short_id ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_id",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // short_id ::= PARENT 
            {
              String RESULT =null;
		 RESULT = "parent"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_id",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // short_id ::= THIS 
            {
              String RESULT =null;
		 RESULT = "this"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_id",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // short_id ::= ROOT 
            {
              String RESULT =null;
		 RESULT = "root"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("short_id",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // constant ::= CONST BOOL ID FALSE SEMICOLON 
            {
              Constant RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Constant(Expression.BOOL, e1,"false"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constant ::= CONST BOOL ID TRUE SEMICOLON 
            {
              Constant RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Constant(Expression.BOOL, e1, "true"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant ::= CONST REALP ID ZERO SEMICOLON 
            {
              Constant RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Constant(Expression.REAL, e1,"0"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= CONST REALP ID REAL SEMICOLON 
            {
              Constant RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constant(Expression.REAL, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant ::= CONST INT ID ZERO SEMICOLON 
            {
              Constant RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Constant(Expression.INT, e1, "0"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= CONST INT ID INTEGER SEMICOLON 
            {
              Constant RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Constant(Expression.INT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // record_field ::= ID ID SEMICOLON 
            {
              RecordField RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RecordField(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_field",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // record_field ::= simple_type 
            {
              RecordField RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType e1 = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordField(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_field",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // record_body ::= record_field record_body 
            {
              RecordBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RecordField e1 = (RecordField)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RecordBody e2 = (RecordBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordBody(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // record_body ::= record_field 
            {
              RecordBody RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RecordField e1 = (RecordField)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new RecordBody(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // record ::= STRUCT ID CBRA record_body CBRAEND 
            {
              Record RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RecordBody e2 = (RecordBody)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Record(Expression.STRUCT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_type ::= BOOL ID SEMICOLON 
            {
              SimpleType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SimpleType(Expression.BOOL, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_type ::= REALP ID SEMICOLON 
            {
              SimpleType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SimpleType(Expression.REAL, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_type ::= INT ID SEMICOLON 
            {
              SimpleType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SimpleType(Expression.INT, e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_type ::= ENUM ID IN set_expression SEMICOLON 
            {
              SimpleType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SetExpression e2 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SimpleType(Expression.ENUM, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_type ::= REALP ID IN set_expression SEMICOLON 
            {
              SimpleType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SetExpression e2 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SimpleType(Expression.REAL, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_type ::= INT ID IN set_expression SEMICOLON 
            {
              SimpleType RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SetExpression e2 = (SetExpression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SimpleType(Expression.INT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= record 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Record e1 = (Record)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= simple_type 
            {
              Type RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleType e1 = (SimpleType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // model_item ::= feature 
            {
              ModelItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Feature e1 = (Feature)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("model_item",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // model_item ::= constant 
            {
              ModelItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant e1 = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("model_item",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // model_item ::= type 
            {
              ModelItem RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("model_item",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // model ::= model_item model 
            {
              Model RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ModelItem e1 = (ModelItem)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Model e2 = (Model)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Model(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("model",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // model ::= model_item 
            {
              Model RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ModelItem e1 = (ModelItem)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Model(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("model",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= model EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Model start_val = (Model)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

