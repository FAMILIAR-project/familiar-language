:type{
		:enum Gender :in {
						  Male,
						  Female
					 };
		:enum BikeType :in { 
   						    City,
   						    Grandma,
   						    Racer,
   							Mountain
   					   };
   		:enum PedalType :in {
   							 Standard,
   						     SPD,
   							 Clip
   		                }; 
   		:int Height :in {
   						 50, 
   						 65, 
   						 70
   					};
   		:real Width :in {
   						 0.85, 
   					     1.00, 
   					     1.25, 
   						 1.50, 
   					     1.75
   					};
}

:record{
		   Measurement {
		   			    Height Height;
		   			    Width Width;
		   };
}

:fd{ 						  
		Bike <!>root feature</!>
			:const{
				:sel
					[ (Rims.Measurement.Height == {50}) ==> ((Frame.Size >= 15) && (Frame.Size <= 22)) ]
					[ (Rims.Measurement.Height == {60}) ==> ((Frame.Size >= 17) && (Frame.Size <= 28)) ]
				    [ (Rims.Measurement.Height == {70}) ==> ((Frame.Size >= 19) && (Frame.Size <= 28)) ]
					[ (Person.BikeType == {Racer}) ==> ((Gears.Number >= 19) && (Gears.Number <= 28) && !(Mudguard) && !(Basket)) ]
					[ (Person.BikeType == {Mountain}) ==> ((Gears.Number >= 30) && !(Carrier) && !(Basket)) ]
					[ (Person.BikeType == {City}) ==> ((Gears.Number >= 22) && (Gears.Number <= 35)) ]
					[ (Person.BikeType == {Grandma}) ==>  ((Gears.Number >= 25) && (Gears.Number <= 35) && Carrier && Propstand && Basket)) ]
					[ !(Frame.Internal)  ==> !(PropStand) ]
					[ ((Person.BikeType == {Racer, City}) && (Person.Height == {150-160})) ==>  ((Frame.Size >= 17) && (Frame.Size <= 20)) ]
					[ ((Person.BikeType == {Racer, City}) && (Person.Height == {160-170})) ==>  ((Frame.Size >= 19) && (Frame.Size <= 22)) ]
					[ ((Person.BikeType == {Racer, City}) && (Person.Height == {170-180})) ==>  ((Frame.Size >= 21) && (Frame.Size <= 24)) ]
					[ ((Person.BikeType == {Racer, City}) && (Person.Height == {180-190})) ==>  ((Frame.Size >= 23) && (Frame.Size <= 28)) ]
					[ ((Person.BikeType == {Racer, City}) && (Person.Height == {190-200})) ==>  ((Frame.Size >= 25) && (Frame.Size <= 28)) ]
					[ ((Person.BikeType == {Mountain}) && (Person.Height == {150-160})) ==>  ((Frame.Size >= 15) && (Frame.Size <= 18)) ]
					[ ((Person.BikeType == {Mountain}) && (Person.Height == {160-170})) ==>  ((Frame.Size >= 16) && (Frame.Size <= 19)) ]
					[ ((Person.BikeType == {Mountain}) && (Person.Height == {170-180})) ==>  ((Frame.Size >= 17) && (Frame.Size <= 20)) ]
					[ ((Person.BikeType == {Mountain}) && (Person.Height == {180-190})) ==>  ((Frame.Size >= 18) && (Frame.Size <= 22)) ]
					[ (PanaracerAvventura || PanaracerCategoryPro || PanaracerTourguard || PanaracerEverride || PanaracerStradius) ==> !(Sidereflex) ]
					[ (Person.BikeType == {Mountain, Racer}) ==> !(Pedal.Type == {Standard}) ]
					[ (Person.BikeType == {City, Grandma}) ==> (Pedal.Type == {Standard}) ]
					[ Rims.Measurement.Height == Tires.Measurement.Height ]
					[ Rims.Measurement.Width == Tires.Measurement.Width ]
					[ Frame.Internal == Gear.Internal]
					[ Pedal.Type == Shoes.PedalType ]
					[ Frame.BikeType == Gear.BikeType ]
					[ Person.Gender == Frame.Gender ]
					[ Person.BikeType == Frame.BikeType ]
			}
   			:gr[6, 8]{  Person
   							:att{ Gender Gender; 
   								  BikeType BikeType;
   								  :enum Height :in { 
   								  					150-160,
   								  					160-170,
   								  					170-180,
   								  					180-190,
   								  					190-200
   								               };
   							}
   					   :opt Accessories
   					   		:const{ 
   					   			:sel
   					   				[ Carrier ==>  Mudguard ]
   					   				[ !(Pump && Bottle) ]
   					   		}
   					   		:gr[0,9]{  :opt :prim Carrier
   					   				   :opt :prim Mudguard
   					   				   :opt :prim Lock
   					   				   :opt :prim Pump
   					   				   :opt :prim Bottle
   					   				   :opt :prim Barket
   					   				   :opt :prim Cateye
   					   				   :opt :prim Sidereflex
 									   :opt :prim Frontreflex
   					   				   :opt :prim Propstand
   					   		}
   					   			
   					   Pedal
   					   		:att{ PedalType Type;
   					   		}
   					   		:gr[1,1]{  :prim BlackPlastic
   					   						:const{
   					   		  					:sel
   					   		  						[ Parent.Type == Standard ] 
   					   		  				} 
   					   				   :prim CampagnoloChorus
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == SPD ] 
   					   		  				}
   					   				   :prim CampagnoloRecord
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == SPD ] 
   					   		  				}
   					   				   :prim PD5500
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == SPD ] 
   					   		  				}
   					   				   :prim PD6600
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == SPD ] 
   					   		  				}
   					   				   :prim PDC101
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == Standard ] 
   					   		  				} 
   					   				   :prim PDC105
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == Standard ] 
   					   		  				} 
   					   				   :prim PDM434
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == Clip ] 
   					   		  				}
   					   				   :prim PDM545
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.Type == Clip ] 
   					   		  				}
   					   		}
   					   		
   					   :opt Shoes
   					   		:att{ PedalType PedalType
   					   				:desel nil;		
   					   		}
   					   		:gr{ [1,1] :prim SHR072
   					   						:const{
   					   		  					:sel
   					   		  						[ Parent.PedalType == Clip ] 
   					   						}
   					   				   :prim SHR090
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.PedalType == SPD ] 
   					   				   		}
   					   				   :prim SHR150
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.PedalType == Clip ] 
   					   				   		}
   					   				   :prim SHR212
   					   				   		:const{
   					   		  					:sel
   					   		  						[ Parent.PedalType == SPD ] 
   					   				   		}
   					   		}
   					   			
   					   Rims
   					   		:att{ Measurement Measurement;			  				   					   		}
   					   		:gr[1,1]{  :prim CampagnoloAtlantaAero
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 1.00) ] 
   					   		  				}
   					   				   :prim MA3
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 70) && (Parent.Measurement.Width  == 0.85) ] 
   					   		  				}
   					   				   :prim T519
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 70) && (Parent.Measurement.Width  == 1.00) ] 
   					   		  				}
   					   				   :prim CXP33
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 70) && (Parent.Measurement.Width  == 1.25) ] 
   					   		  				}
   					   				   :prim OpenPro
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 70) && (Parent.Measurement.Width  == 1.00) ] 
   					   		  				}
   					   				   :prim X221
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 1.50) ] 
   					   		  				}
   					   				   :prim Cosmos
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 1.25) ] 
   					   		  				}
   					   				   :prim Cross
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 50) && (Parent.Measurement.Width  == 1.50) ] 
   					   		  				}
   					   				   :prim CampagnoloMexicoAero
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 1.00) ] 
   					   		  				}
   					   				   :prim CampagnoloProton
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 0.85) ] 
   					   		  				}
   					   				   :prim CampagnoloMoskvaAero
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 65) && (Parent.Measurement.Width  == 0.85) ] 
   					   		  				}
   					   				   :prim Helium
   					   						:const{
   					   		  					:sel
   					   		  						[ (Parent.Measurement.Height  == 50) && (Parent.Measurement.Width  == 1.25) ] 
   					   		  				}	
   					   		}
   					   		
   					   Tires
   					   		:att{ Measurement Measurement;			  
                     			  :int Profile :in {19, 20, 21, 22, 23, 25, 28, 30, 32, 35, 38};					   					   		}
   					   		:gr[1,1]{  :prim Triatlon
   					   		  				:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile == 20) && (Parent.Measurement.Height == 65) && (Parent.Measurement.Width == 1.00) ] 
   					   		  				}
   					   				   :prim Courier  
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {23,32}) && (Parent.Measurement.Height = 70) && 
   					   		  							(Parent.Measurement.Width :in {0.85, 1.25}) ] 
   					   		  				}
   					   				   :prim Tecno
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {20, 23, 28}) && (Parent.Measurement.Height == 70) && 
   					   		  							(Parent.Measurement.Width :in {1.00, 1.25}) ] 
   					   		  				}  
   					   				   :prim Roma
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {19, 22, 25}) && (Parent.Measurement.Height == 70) && 
   					   		  							(Parent.Measurement.Width :in {0.85, 1.00}) ] 
   					   		  				}  
   					   				   :prim Lizzard
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {35, 38}) && (Parent.Measurement.Height == 70) && 
   					   		  							(Parent.Measurement.Width :in {1.50, 1.75}) ] 
   					   		  				}  
   					   				   :prim Atlanta
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {20, 21}) && (Parent.Measurement.Height == 70) && 
   					   		  							(Parent.Measurement.Width == 1.00) ] 
   					   		  				}
   					   				   :prim Track
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile == 22) && (Parent.Measurement.Height == 65) && 
   					   		  							(Parent.Measurement.Width == 0.85) ] 
   					   		  				}  
   					   				   :prim Extreme
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile == 21) && (Parent.Measurement.Height == 70) && 
   					   		  							(Parent.Measurement.Width == 1.00) ] 
   					   		  				}  
   					   				   :prim AllWeather
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {20, 22}) && (Parent.Measurement.Height == 70) && 
   					   		  							(Parent.Measurement.Width == 1.25) ] 
   					   		  				}  
   					   				   :prim Beaumont
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile == 20) && (Parent.Measurement.Height == 65) && 
   					   		  							(Parent.Measurement.Width :in {1.25, 1.50}) ]
   					   		  				}  
   					   				   :prim PanaracerAvventura
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile == 20) && (Parent.Measurement.Height == 65) && 
   					   		  							(Parent.Measurement.Width :in {1.25, 1.00}) ] 
   					   		  				}  
   					   				   :prim PanaracerCategoryPro
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {20, 22}) && (Parent.Measurement.Height :in {65, 70}) && 
   					   		  							(Parent.Measurement.Width :in {1.00, 1.25}) ] 
   					   		  				}  
   					   				   :prim PanaracerEverride 
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {22, 25}) && (Parent.Measurement.Height :in {65, 70}) && 
   					   		  							(Parent.Measurement.Width :in {1.00, 1.25}) ] 
   					   		  				} 
   					   				   :prim PanaracerTourguard
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {22, 23, 25, 28, 30}) && (Parent.Measurement.Height :in {65, 70}) &&
   					   		  							(Parent.Measurement.Width :in {1.00, 1.25}) ] 
   					   		  				}  
   					   				   :prim PanaracerStradius
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile :in {19, 20}) && (Parent.Measurement.Height :in {65, 70}) && 
   					   		  							(Parent.Measurement.Width :in {0.85, 1.25}) ] 
   					   		  				}  
   					   				   :prim Kenda
   					   				   		:const{
   					   		  					:sel
   					   		  						[ (Parent.Profile == 35) && (Parent.Measurement.Height == 50) && 
   					   		  							(Parent.Measurement.Width :in {1.25, 1.50}) ] 
   					   		  				}  
   					   		}
   					   				
   					   :opt Gear
   					   			:att{ :int Number :in {1, 3, 4, 5, 7, 16, 18, 21, 24, 27},
                     			  				  :desel 1;	
                     			      BikeType BikeType;
                     			      :bool Internal
                     					:desel .true.;
                     			  				     				   					   			}
							    :const{
							    	:sel
							    		[ (Gear.BikeType == Racer) ==> !(Gear.Internal) ]
   								}
   					   			:gr[1,1]{  :prim DuraAce
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 18) ] 
   					   							}
   					   					   :prim Ultegra
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 16) ] 
   					   							}
   					   					   :prim Tiagra
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 16) ] 
   					   							}
   					   					   :prim Sora
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Mountain) && !(Parent.Internal) && (Parent.Number == 21) ] 
   					   							}
   					   					   :prim Acera
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Mountain) && !(Parent.Internal) && (Parent.Number == 24) ] 
   					   							}
   					   					   :prim ShimanoNexus
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType :in {Racer, Mountain, Grandma}) && (Parent.Internal) && 
   					   										(Parent.Number :in {3, 4, 7}) ] 
   					   							}
   					   					   :prim ShimanoRSXSTI
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 16) ] 
   					   							}
   					   					   :prim Shimano105STI
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 16) ] 
   					   							}
   					   					   :prim CampagnoloAvantiErgopower
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 16) ] 
   					   							}
   					   					   :prim CampagnoloMirageErgopower
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 18) ] 
   					   							}
   					   					   :prim CampagnoloVeloce
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Racer) && !(Parent.Internal) && (Parent.Number == 18) ] 
   					   							}
   					   					   -:prim ShimanoDeore
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Mountain) && !(Parent.Internal) && (Parent.Number == 27) ] 
   					   							}
   					   					   :prim ShimanoAcer
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType == Mountain) && !(Parent.Internal) && (Parent.Number == 24) ] 
   					   							}
   					   					   :prim Torpedo
   					   							:const{
   					   								:sel
   					   									[ (Parent.BikeType :in {City, Grandma}) && (Parent.Internal) && (Parent.Number :in {3, 5}) ] 
   					   							}
   					   			}
   					   
   					   Frame
   					   		:att{ :enum Color :in {
   					   							   Black,   					   				   			   BlackPurple,   					   				   			   Blue,   					   				   			   Brown,   					   				   			   Creme,   					   				   			   Green,   					   				   			   Grey,   					   				   			   Blue,   					   				   			   Green,   					   				   			   Purple,   					   				   			   Red,   					   				   			   Silver,   					   				   			   White,   					   				   			   Yellow
   					   							  };
                     			  :int Size :in {13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28};	
                     			  Gender Gender;
                     			  BikeType BikeType;
                     			  :bool Internal;				   					   		}
   					   		:const{ 
   					   			:sel
   					   				[ (Person.BikeType :in {City, Grandma}) ==> (Gear.Internal) ]
   					   				[ (Person.BikeType :in {Racer}) ==> !(Gear.Internal) ]
   					   		}
   					   		:gr[1,1]{  :prim ButterflyClassic
   					   						:const{ 												:sel 
													[ (Parent.Color :in {Black, Red, Creme, Blue}) && (Parent.Size >= 20) && (Parent.Size <= 23) && 
														(Parent.Internal) && (Parent.gender == Female) && (Parent.BikeType == Grandma)]											}
   					   				   :prim CenturionBasic
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Green, Blue, Black}) && (Parent.Size :in {22, 23, 25}) && 
														(Parent.Internal) && (Parent.gender == Male) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionBasicFree
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {SilverLightBlue})  && (Parent.Size :in {22, 23, 25}) && (Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionBasicFreeMeral
   					   				   		:const{ 												:sel 
													[ (Parent.Color == LightBlue &&) (Parent.Size :in {20, 22, 23}) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionBasicLight
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Purple, Red}) && (Parent.Size :in {22,23,25}) && (Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionBasicLightMeral
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Red})  && (Parent.Size :in {20,22,23}) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionBasicMeral
   					   				   		:const{ 												:sel 
													[ (Parent.Color == {Silver, Green, Blue, Black}) && (Parent.Size :in {20,22,23}) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionBoulevard
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Red)  && (Parent.Size >= 20) &&  && (Parent.Size <= 23) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == Grandma)]											}
   					   				   :prim CenturionChallenger
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Blue, Brown, LightBlue, Purple, Red})  && (Parent.Size :in {17,19,20,22,23}) && 
														(Parent.Internal) && (Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionChallengerLady
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Purple, LightBlue, Red, Black})  && (Parent.Size :in {20,22,23}) 
														&& (Parent.Internal) && (Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionCrazyPoint
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Brown, Blue, Black}) && (Parent.Size :in {15,17,19,20,22})  
														&& (Parent.Internal) && (Parent.gender == Male) && (Parent.BikeType == Mountain)]											}
   					   				   :prim CenturionCrazyPointLady
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Red, Black}) && (Parent.Size :in {19,17,19,20}) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == Mountain)]											}
   					   				   :prim CenturionDarkImage
   					   				   		:const{ 												:sel 
													[ Parent.Color :in {Silver, Blue} && (Parent.Size :in {15,17,19,20,22}) && (Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Mountain)]											}
   					   				   :prim CenturionDiscovery
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Green, Purple}) && (Parent.Size :in {22,23,25}) && (Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionDiscoveryLady
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Purple, Silver, Red}) && (Parent.Size :in {20,22,23}) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionEternity
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Red, Green, Purple, Blue}) && (Parent.Size :in {19,20,22,23,25}) && 
														(Parent.Internal) && (Parent.gender == Male) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionEternityLady
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Blue}) && (Parent.Size :in {20,22,23}) && (Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionFarOut
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Red) && (Parent.Size :in {15,17,19,20,22}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == City)]											}
   					   				   :prim CenturionHelium
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Green, LightGreen}) && (Parent.Size :in {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer)]											}
   					   				   :prim CenturionInvincible
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Red, LightGreen})  && (Parent.Size :in {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer)]											}
   					   				   :prim CenturionNitrogen
   					   				   		:const{ 												:sel 
													[ Parent.Color = {Green, LightBlue}  && (Parent.Size = {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender = {Male}) && (Parent.BikeType ={Racer})]											}
   					   				   :prim CenturionOffDuty
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Green, Purple}) && (Parent.Size :in {15,17,19,20,22}) && (Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Mountain)]											}
   					   				   :prim CenturionOxygen
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, Blue, Purple})  && (Parent.Size :in {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer)]											}
   					   				   :prim CenturionOxygenMeral
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Silver) && (Parent.Size :in {19,20,21,22}) && !(Parent.Internal) && 
														(Parent.gender == Female) && (Parent.BikeType == Racer)]											}
   					   				   :prim CenturionUltimate
   					   				   		:const{ 												:sel 
													[ (Parent.Color == LightBlue) && (Parent.Size :in {22,23,24,25}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer}]											}
   					   				   :prim ColibriStreetBikePlus
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Black, Grey, Yellow, Blue, White, Red, Green, Silver LightBlue})  && 
														(Parent.Size :in {20,22,24}) && (Parent.Internal) && (Parent.gender == Male) && 
														(Parent.BikeType == City)]											}
   					   				   :prim Faggin7005
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Black)  && (Parent.Size :in {20,22,23,25,28}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer)]											}
   					   				   :prim Faggin7020
   					   				   		:const{ 												:sel 
													[ (Parent.Color == BlackPurple) && (Parent.Size :in {20,22,23,25,28}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer)]											}
   					   				   :prim FagginEaston
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Black, White}) && (Parent.Size :in {20,22,23,25,28}) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Racer)]											}
   					   				   :prim JupiterCruiser
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Silver) && (Parent.Size :in {15,17,19,21}) && (Parent.Internal) && 
														(Parent.gender :in {Female, Male}) && (Parent.BikeType == Mountain)]											}
   					   				   :prim JupiterInside
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Silver)  && (Parent.Internal) && (Parent.BikeType :in {City, Mountain}) && 
														(((Parent.Size :in {20,21,22}) && (Parent.gender == Female))  || ((Parent.Size :in {21,22,24}) && 
														(Parent.gender == Male)))]											}
   					   				   :prim JupiterMillenium
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Silver)  && (Parent.Internal) && (Parent.BikeType :in {City, Mountain}) && 
														(((Parent.Size :in {20,21,22,24}) && (Parent.gender == Male))  || ((Parent.Size :in {20,21}) && 
														(Parent.gender == Female)))]											}
   					   				   :prim JupiterStraight
   					   				   		:const{ 												:sel 
													[ (Parent.Color :in {Silver, LightBlue})  && (Parent.Size :in {22,23,24}) && (Parent.Internal) && 
														(Parent.gender :in {Female, Male}) && (Parent.BikeType == City)]											}
   					   				   :prim KildemoesLogic32Derailleur
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Silver) && (Parent.Internal) && (Parent.BikeType :in {City, Mountain}) && 
														(((Parent.Size :in {20,22,23}) && (Parent.gender == Male))  || ((Parent.Size :in {20,22}) && 
														(Parent.gender == Female)))]											}
   					   				   :prim KildemoesPrimates
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Green) && (Parent.Size :in {16,18,20}) && (Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Mountain)]											}
   					   				   :prim Schwinn Mesa
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Red) && (Parent.Size >= 13) && (Parent.Size <= 23) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Mountain)]											}
   					   				   :prim SchwinnMoab3 
   					   				   		:const{ 												:sel 
													[ (Parent.Color == Silver) && (Parent.Size >= 13) && (Parent.Size <= 23) && !(Parent.Internal) && 
														(Parent.gender == Male) && (Parent.BikeType == Mountain)]											}
   			                }                      	
   			}
}