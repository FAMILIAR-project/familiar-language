FIELD					= TYPE* CONSTANT* FD

----- Types section ----------------------------------------------------------------

TYPE					=  BASE_SET
					 	 | RECORD
					 
BASE_SET				=  int ATTRIBUTE_ID SET_EXPRESSION ;
					 	 | real ATTRIBUTE_ID SET_EXPRESSION ;
					 	 | bool ATTRIBUTE_ID SET_EXPRESSION ;
					 
RECORD					= struct ATTRIBUTE_ID { RECORD_FIELD+ }

RECORD_FIELD			=  BASE_SET
					 	 | BASE_TYPE
					 	 | ATTRIBUTE_ID ATTRIBUTE_ID ;
					 
----- Constants section -------------------------------------------------------------

CONSTANT 				=  const int ATTRIBUTE_ID ( INTEGER ) ;
					 	 | const real ATTRIBUTE_ID ( REAL ) ;
					 	 | const bool ATTRIBUTE_ID ( true | false ) ;
					 
----- ID section -------------------------------------------------------------------

FEATURE_ID_PATH 		=  root (. FEATURE_ID)+
				 		 | FEATURE_ID (. FEATURE_ID)*
				 
ATTRIBUTE_ID_PATH		=  parent (. parent)* (. ATTRIBUTE_ID)+
						 | this (. ATTRIBUTE_ID)+
						 | FEATURE_ID (. ATTRIBUTE_ID)+
						 | FEATURE_ID_PATH (. ATTRIBUTE_ID)+
						 
CHILDREN_ATTRIBUTE_ID	=  selectedchildren (. ATTRIBUTE_ID)+
						 | children (. ATTRIBUTE_ID)+
						 
FEATURE_ID_LIST			=  (opt)? FEATURE_ID , FEATURE_ID_LIST*
						 
----- Features section --------------------------------------------------------------

FD 						=  root FEATURE_ID { DATA? ATTRIBUTE* CONSTRAINT* FEATURES_GROUP? } FEATURE*
						 | root FEATURE_ID DATA? ATTRIBUTE* CONSTRAINT* FEATURES_GROUP? FEATURE*
						 
FEATURES_GROUP 			=  CARDINALITY { HIERARCHICAL_FEATURE+ }
						 | CARDINALITY { FEATURE_ID_LIST }
						 
FEATURE					=  FEATURE_ID_PATH { DATA? ATTRIBUTE* CONSTRAINT* FEATURES_GROUP? } FEATURE*
						 | FEATURE_ID_PATH DATA? ATTRIBUTE* CONSTRAINT* FEATURES_GROUP? FEATURE*
						 
HIERARCHICAL_FEATURE	=  shared FEATURE_ID { DATA? }
						 | shared FEATURE_ID DATA?
						 | (opt)? FEATURE_ID { DATA? ATTRIBUTE* CONSTRAINT* FEATURES_GROUP? }
						 | (opt)? FEATURE_ID DATA? ATTRIBUTE* CONSTRAINT* FEATURES_GROUP?
						 
CARDINALITY				=  group oneof
						 | group someof
						 | group allof
						 | group [ ( ATTRIBUTE_ID | NATURAL | *) , (ATTRIBUTE_ID | NATURAL | * ) ]
						 
----- Attributes section -------------------------------------------------------------

ATTRIBUTE				=  BASE_ATTRIBUTE
						 | ATTRIBUTE_ID ATTRIBUTE_ID IFIN_IFOUT? ;
						 | ATTRIBUTE_ID ATTRIBUTE_ID { SUB_ATTRIBUTE+ } ;
						 
BASE_ATTRIBUTE			=  int ATTRIBUTE_ID ;
						 | int ATTRIBUTE_ID  in SET_EXPRESSION , IFIN_IFOUT ;
						 | int ATTRIBUTE_ID  in SET_EXPRESSION ;
						 | int ATTRIBUTE_ID , IFIN_IFOUT ;
						 | real ATTRIBUTE_ID ;
						 | real ATTRIBUTE_ID  in SET_EXPRESSION , IFIN_IFOUT ;
						 | real ATTRIBUTE_ID  in SET_EXPRESSION ;
						 | real ATTRIBUTE_ID , IFIN_IFOUT ;
						 | bool ATTRIBUTE_ID ;
						 | bool ATTRIBUTE_ID , IFIN_IFOUT ;
						 | enum ATTRIBUTE_ID  in SET_EXPRESSION , IFIN_IFOUT ;
						 | enum ATTRIBUTE_ID  in SET_EXPRESSION ;
						 
IFIN_IFOUT				=  ifin: EXPRESSION , ifout: EXPRESSION
						 | ifin: EXPRESSION
						 | ifout: EXPRESSION
						 | ifin: in SET_EXPRESSION , ifout: EXPRESSION
						 | ifin: EXPRESSION , ifout: in SET_EXPRESSION
						 | ifin: in SET_EXPRESSION , ifout: in SET_EXPRESSION
						 | ifin: in SET_EXPRESSION
						 | ifout: in SET_EXPRESSION
						 
SUB_ATTRIBUTE			= ATTRIBUTE_ID , IFINIFOUT ;

----- Expressions section --------------------------------------------------------------

EXPRESSION 				=  EXPRESSION && EXPRESSION
						 | EXPRESSION || EXPRESSION
						 | EXPRESSION => EXPRESSION
						 | EXPRESSION <=> EXPRESSION
						 | ! ( EXPRESSION )
						 | ( EXPRESSION )
						 | true
						 | false
						 | ATTRIBUTE_ID // Pour les constantes
						 | FEATURE_ID_PATH
						 | ATTRIBUTE_ID_PATH
						 | EXPRESSION == EXPRESSION
						 | EXPRESSION <= EXPRESSION
						 | EXPRESSION >= EXPRESSION
						 | EXPRESSION in SET_EXPRESSION
						 | and( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | or( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | xor( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | FEATURE_ID_PATH excludes FEATURE_ID_PATH
						 | FEATURE_ID_PATH requires FEATURE_ID_PATH
						 | EXPRESSION + EXPRESSION
						 | EXPRESSION - EXPRESSION
						 | EXPRESSION / EXPRESSION
						 | EXPRESSION * EXPRESSION
						 | MINUS ( EXPRESSION )
						 | abs( EXPRESSION )
						 | EXPRESSION quest EXPRESSION : EXPRESSION
						 | sum( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | mul( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | min( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | max( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | count( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | avg ( EXPRESSION_LIST | CHILDREN_ATTRIBUTE_ID )
						 | INTEGER
						 | REAL
						 
EXPRESSION_LIST			= EXPRESSION (, EXPRESSION_LIST)*

SET_EXPRESSION 			=  { EXPRESSION_LIST }
						 | [ (INTEGER | * ) .. (INTEGER | * ) ]
						 | [ (REAL | * ) .. (REAL | * ) ]
						 
----- Constraints section --------------------------------------------------------------

CONSTRAINT 				=  ifin: EXPRESSION ;
						 | ifout: EXPRESSION ;
						 
----- Data section ---------------------------------------------------------------------

DATA 					= data { DATA_PAIR+ }

DATA_PAIR				= ATTRIBUTE_ID " STRING " ;

----- Values section -------------------------------------------------------------------

NATURAL					= 0 | [1-9][0-9]*

INTEGER					= 0 | (-)?[1-9][0-9]*

REAL					= INTEGER . ([0-9]*[1-9])?

ATTRIBUTE_ID			= [a-z][a-zA-Z0-9]+

FEATURE_ID				= [A-Z] ATTRIBUTE_ID

STRING					= [^]
						  