// FEATUREMX VFD STAR FORMAT CUP PARSER SPECIFICATION
// Xavier Devroey & Michael Marcozzi 



import java.util.Vector;

import java_cup.runtime.*;


// Reacting to errors
parser code {: 
	public void report_fatal_error ( String message, Object info ) throws Exception { 
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				 message = message + " in line "+(s.left+1);
				 if (s.right >= 0)
				 	message = message + ", column "+(s.right+1);
			}
		}
		throw new Exception("VFDStar schema parsing - Syntax Error - "+message); 
	} 
:}; 

// TERMINALS
// ---------

// Comments
terminal String COMMENT;

// Numbers
terminal ZERO;
terminal String POSINT, NEGINT, REAL;

// Properties
terminal DAG, ROOT, OPT, BOOL, INT, ENUM, STRUCT, REALP, IFIN, IFOUT, DEFINE;

// Cardinality
terminal GROUP, ONEOF, SOMEOF, ALLOF;

// Selectors
terminal PARENT, THIS, CHILDREN, SCHILDREN;

// Operators
terminal AND, OR, IMPLIES, IFANDONLYIF, NOT, TRUE, FALSE, EQUALS, GEQ, LEQ, PLUS, MINUS, TIMES, DIVIDE, MAX, MIN, SUM, MUL, AVG, COUNT, ANDAGG, ORAGG, XORAGG, ABS, IN;

// Other symbols
terminal SQBRA, SQBRAEND, COMMA, BRA, BRAEND, CBRA, CBRAEND, DOT, QUEST, COLON, SEMICOLON, DATA;

// Identifier
terminal String ATTRIBUTE_ID, FEATURE_ID;

// NON TERMINALS
// -------------

non terminal field;

// Meta section


// Constant section
non terminal constants;
non terminal constant;

// Type section
non terminal types;
non terminal type;
non terminal base_set;
non terminal base_type;
non terminal record;
non terminal record_content;

// ID section
non terminal feature_id_path;
non terminal feature_id_chain;
non terminal attribute_id_path;
non terminal attribute_id_chain;
non terminal children_attribute_id;
non terminal feature_id_list;

// Feature section
non terminal fd;
non terminal features;
non terminal feature;
non terminal hierarchical_features;
non terminal hierarchical_feature;
non terminal cardinality;

// Attribute section
non terminal attributes;
non terminal attribute;
non terminal base_attribute;
non terminal ifin_ifout_int;
non terminal ifin_ifout_real;
non terminal ifin_ifout_enum;
non terminal ifin_ifout_bool;

// Expression section
non terminal bool_expression;
non terminal int_expression;
non terminal bool_list;
non terminal int_list;
non terminal real_list;
non terminal enum_list;
non terminal real_expression;
non terminal enum_expression;
non terminal int_set_expression;
non terminal real_set_expression;

// Constraint section
non terminal constraints;
non terminal constraint;


non terminal data;
non terminal data_pair_list;
non terminal data_pair;


non terminal struct_attribute_content;
non terminal sub_attribute;

// PRECEDENCE AND ASSOCIATIVITY
// ----------------------------

precedence left IMPLIES,IFANDONLYIF;
precedence left OR,PLUS,MINUS; 
precedence left AND,TIMES,DIVIDE;

// THE GRAMMAR
// -----------

start with field;

field ::= constants types fd
         ;
         
//----- Meta section ------------------------------------------------------------------------------------------


        
//----- Constant section ------------------------------------------------------------------------------------------

constants ::=  
			 ;       
        
//----- Type section ------------------------------------------------------------------------------------------

types ::=  
		 | type types
		 ;
		 
type ::=  base_set
		| record
		;
		
base_set ::=  INT ATTRIBUTE_ID int_set_expression SEMICOLON
			| REALP ATTRIBUTE_ID real_set_expression SEMICOLON
			| ENUM ATTRIBUTE_ID enum_expression SEMICOLON
			;
			
base_type ::=  INT ATTRIBUTE_ID SEMICOLON
			 | REALP ATTRIBUTE_ID SEMICOLON
			 | BOOL ATTRIBUTE_ID  SEMICOLON
			 ;
			 
record ::=  STRUCT ATTRIBUTE_ID CBRA record_content CBRAEND SEMICOLON
		  ;
		  
record_content ::=  base_set
				  | base_type
				  | ATTRIBUTE_ID ATTRIBUTE_ID SEMICOLON
				  ;
				  
//----- ID section ------------------------------------------------------------------------------------------

feature_id_path ::=  ROOT DOT feature_id_chain
				   | FEATURE_ID DOT feature_id_chain
				   ;
				   
feature_id_chain ::=  FEATURE_ID
					| FEATURE_ID DOT feature_id_chain
					;
					
attribute_id_path ::=  PARENT DOT attribute_id_chain
					 | THIS DOT attribute_id_chain
					 | FEATURE_ID DOT attribute_id_chain
					 | feature_id_path DOT attribute_id_chain
					 ;	 

attribute_id_chain ::=  ATTRIBUTE_ID
					  | ATTRIBUTE_ID DOT attribute_id_chain
					  ;

children_attribute_id ::=  SCHILDREN DOT attribute_id_chain
                         | CHILDREN DOT attribute_id_chain
                         ;
                         
feature_id_list ::=  OPT FEATURE_ID
				   | OPT FEATURE_ID COMMA feature_id_list
				   | FEATURE_ID
				   | FEATURE_ID COMMA feature_id_list
				   ; 
					  
//----- Feature section ------------------------------------------------------------------------------------------ 
					  
fd ::=  ROOT FEATURE_ID CBRA data attributes constraints features CBRAEND feature
	  | ROOT FEATURE_ID data attributes constraints features feature
	  ;

features ::=  
			| cardinality CBRA hierarchical_features CBRAEND
			| cardinality CBRA feature_id_list CBRAEND
			;

feature ::=  
		   | OPT FEATURE_ID CBRA data attributes constraints features CBRAEND feature
		   | OPT FEATURE_ID data attributes constraints features feature
		   | FEATURE_ID CBRA data attributes constraints features CBRAEND feature
		   | FEATURE_ID data attributes constraints features feature
		   ;     

hierarchical_features ::=  hierarchical_feature
						 | hierarchical_feature hierarchical_features
						 ;
						 
hierarchical_feature ::=  DAG FEATURE_ID CBRA data CBRAEND
					    | DAG FEATURE_ID data
					    | OPT FEATURE_ID CBRA data attributes constraints features CBRAEND
					    | OPT FEATURE_ID data attributes constraints features
					    | FEATURE_ID CBRA data attributes constraints features CBRAEND
					    | FEATURE_ID data attributes constraints features
					    ;
					  
cardinality ::=  ONEOF
			   | SOMEOF
			   | ALLOF
			   | GROUP SQBRA ZERO COMMA ZERO SQBRAEND
               | GROUP SQBRA ZERO COMMA POSINT SQBRAEND
               | GROUP SQBRA ZERO COMMA TIMES SQBRAEND
               | GROUP SQBRA POSINT COMMA ZERO SQBRAEND
               | GROUP SQBRA POSINT COMMA POSINT SQBRAEND
               | GROUP SQBRA POSINT COMMA TIMES SQBRAEND 
               | GROUP SQBRA TIMES COMMA ZERO SQBRAEND
               | GROUP SQBRA TIMES COMMA POSINT SQBRAEND
               | GROUP SQBRA TIMES COMMA TIMES SQBRAEND
               ;

//----- Attribute section ------------------------------------------------------------------------------------------
		
attributes ::= 
			  | attribute attributes
			  ;

attribute ::=  base_attribute
			 | ATTRIBUTE_ID ATTRIBUTE_ID ifin_ifout_int SEMICOLON
			 | ATTRIBUTE_ID ATTRIBUTE_ID ifin_ifout_real SEMICOLON
			 | ATTRIBUTE_ID ATTRIBUTE_ID ifin_ifout_enum SEMICOLON
			 | ATTRIBUTE_ID ATTRIBUTE_ID CBRA struct_attribute_content CBRAEND SEMICOLON
			 ;
			
base_attribute ::=  INT ATTRIBUTE_ID SEMICOLON
				  | INT ATTRIBUTE_ID IN int_set_expression ifin_ifout_int SEMICOLON
				  | INT ATTRIBUTE_ID IN int_set_expression SEMICOLON
				  | INT ATTRIBUTE_ID ifin_ifout_int SEMICOLON
				  | REALP ATTRIBUTE_ID SEMICOLON
				  | REALP ATTRIBUTE_ID IN real_set_expression ifin_ifout_real SEMICOLON
				  | REALP ATTRIBUTE_ID IN real_set_expression SEMICOLON
				  | REALP ATTRIBUTE_ID ifin_ifout_real SEMICOLON
				  | BOOL ATTRIBUTE_ID SEMICOLON
				  | BOOL ATTRIBUTE_ID ifin_ifout_bool SEMICOLON
				  | ENUM ATTRIBUTE_ID IN enum_expression SEMICOLON
				  | ENUM ATTRIBUTE_ID IN enum_expression ifin_ifout_enum SEMICOLON
				  ;
				  
ifin_ifout_int ::=  IFIN int_expression IFOUT int_expression
				  | IFIN int_expression IFOUT IN int_set_expression
				  | IFIN IN int_set_expression IFOUT int_expression
				  | IFIN IN int_set_expression IFOUT IN int_set_expression
				  | IFIN int_expression
				  | IFIN IN int_set_expression
				  | IFOUT int_expression
				  | IFOUT IN int_set_expression
				  ;
				  
ifin_ifout_real ::=  IFIN real_expression IFOUT real_expression
				   | IFIN real_expression IFOUT IN real_set_expression
				   | IFIN IN real_set_expression IFOUT real_expression
				   | IFIN IN real_set_expression IFOUT IN real_set_expression
				   | IFIN real_expression
				   | IFIN IN real_set_expression
				   | IFOUT real_expression
				   | IFOUT IN real_set_expression
				   ;
			
ifin_ifout_enum ::=  IFIN ATTRIBUTE_ID IFOUT ATTRIBUTE_ID
				   | IFIN ATTRIBUTE_ID IFOUT IN enum_expression
				   | IFIN IN enum_expression IFOUT ATTRIBUTE_ID
				   | IFIN IN enum_expression IFOUT IN enum_expression
				   | IFIN ATTRIBUTE_ID
				   | IFIN IN enum_expression
				   | IFOUT ATTRIBUTE_ID
				   | IFOUT IN enum_expression
				   ;
				   
ifin_ifout_bool ::=  IFIN bool_expression IFOUT bool_expression
				   | IFIN bool_expression
				   | IFOUT bool_expression
				   ; 
			 
struct_attribute_content ::=  sub_attribute
							| sub_attribute struct_attribute_content
							;
							 
sub_attribute ::=  ATTRIBUTE_ID ifin_ifout_int SEMICOLON 
				 | ATTRIBUTE_ID ifin_ifout_real SEMICOLON
				 | ATTRIBUTE_ID ifin_ifout_enum SEMICOLON
				 | ATTRIBUTE_ID ifin_ifout_bool SEMICOLON
				 ;

//----- Expression section ------------------------------------------------------------------------------------------

bool_expression ::=  bool_expression AND bool_expression
				   | bool_expression OR bool_expression
				   | bool_expression IMPLIES bool_expression
				   | bool_expression IFANDONLYIF bool_expression
				   | NOT BRA bool_expression BRAEND
				   | BRA bool_expression BRAEND
				   | TRUE
				   | FALSE
				   | feature_id_path
				   | attribute_id_path
				   | int_expression EQUALS int_expression
				   | int_expression EQUALS real_expression
				   | real_expression EQUALS int_expression
				   | real_expression EQUALS real_expression
				   | int_expression GEQ int_expression
				   | int_expression LEQ int_expression
				   | real_expression GEQ real_expression
				   | real_expression LEQ real_expression
				   | attribute_id_path IN enum_expression
				   | attribute_id_path IN int_set_expression
				   | attribute_id_path IN real_set_expression
				   | attribute_id_path EQUALS ATTRIBUTE_ID
				   | ANDAGG BRA bool_list BRAEND
				   | ANDAGG BRA children_attribute_id BRAEND
				   | ORAGG BRA bool_list BRAEND
				   | ORAGG BRA children_attribute_id BRAEND
				   | XORAGG BRA bool_list BRAEND
				   | XORAGG BRA children_attribute_id BRAEND
				   ;

int_expression ::=  int_expression PLUS int_expression                  | int_expression MINUS int_expression                  | int_expression TIMES int_expression                  | int_expression DIVIDE int_expression                  | MINUS BRA int_expression BRAEND                  | BRA int_expression BRAEND                  | ABS BRA int_expression BRAEND                  | QUEST bool_expression COLON int_expression COMMA int_expression QUEST
                  | SUM BRA int_list BRAEND
                  | SUM BRA children_attribute_id BRAEND
                  | MUL BRA int_list BRAEND
                  | MUL BRA children_attribute_id BRAEND
                  | MIN BRA int_list BRAEND
                  | MIN BRA children_attribute_id BRAEND
                  | MAX BRA int_list BRAEND
                  | MAX BRA children_attribute_id BRAEND
                  | COUNT BRA int_list BRAEND
                  | COUNT BRA children_attribute_id BRAEND
                  | AVG BRA int_list BRAEND
                  | AVG BRA children_attribute_id BRAEND
                  | attribute_id_path
                  | ZERO 
				  | POSINT
				  | NEGINT
				  ;

bool_list ::=  bool_expression
			 | bool_expression COMMA bool_list
			 ;
			 
int_list ::=  int_expression
			| int_expression COMMA int_list
			;

real_list ::=  real_expression
			 | real_expression COMMA real_list
			 ;
			 
enum_list ::=  ATTRIBUTE_ID
			 | ATTRIBUTE_ID COMMA enum_list
			 ;
					  
real_expression ::=  real_expression PLUS real_expression                   | real_expression MINUS real_expression                   | real_expression TIMES real_expression                   | BRA real_expression BRAEND                   | REAL                   | QUEST bool_expression COLON real_expression COMMA real_expression QUEST
                   | SUM BRA real_list BRAEND
                   | SUM BRA children_attribute_id BRAEND
                   | MUL BRA real_list BRAEND
                   | MUL BRA children_attribute_id BRAEND
                   | MIN BRA real_list BRAEND
                   | MIN BRA children_attribute_id BRAEND
                   | MAX BRA real_list BRAEND
                   | MAX BRA children_attribute_id BRAEND
                   | COUNT BRA real_list BRAEND
                   | COUNT BRA children_attribute_id BRAEND
                   | AVG BRA real_list BRAEND
                   | AVG BRA children_attribute_id BRAEND
                   | attribute_id_path
                   ;
                   
enum_expression ::= CBRA enum_list CBRAEND
				   ;

int_set_expression ::=  CBRA int_list CBRAEND
					  | SQBRA int_expression DOT DOT int_expression SQBRAEND
					  ;
					  
real_set_expression ::=  CBRA real_list CBRAEND
					   | SQBRA real_expression DOT DOT real_expression SQBRAEND
					   ;
                   
//----- Constraint section ------------------------------------------------------------------------------------------
				  
constraints ::= 
               | constraint constraints
               ;
               
constraint ::=  IFIN bool_expression SEMICOLON
              | IFOUT bool_expression SEMICOLON
              ;
              
//----- Data section -------------------------------------------------------------------------------------------------

data ::=
		| DATA CBRA data_pair_list CBRAEND  
		;
		
data_pair_list ::=  data_pair
				  | data_pair COMMA data_pair_list
				  ;
				  
data_pair ::= BRA ATTRIBUTE_ID COMMA ATTRIBUTE_ID BRAEND
			 ;		