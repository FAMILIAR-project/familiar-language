/*
* generated by Xtext
*/

package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FamiliarScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FamiliarScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Assignment cCmdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdsScriptCommandParserRuleCall_1_0 = (RuleCall)cCmdsAssignment_1.eContents().get(0);
		private final Assignment cExportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExportsAlternatives_2_0 = (Alternatives)cExportsAssignment_2.eContents().get(0);
		private final RuleCall cExportsExportParserRuleCall_2_0_0 = (RuleCall)cExportsAlternatives_2_0.eContents().get(0);
		private final RuleCall cExportsHiddenParserRuleCall_2_0_1 = (RuleCall)cExportsAlternatives_2_0.eContents().get(1);
		
		//// A language to manipulate, compare, relate, reason about and automatically analyze FMs
		//// Most of the operations can be implemented using state-of-the-art tools and/or related work (including our work!)
		//// Here our purpose is to integrate into a single, concise, integrated language such efforts
		//// This language can also be used i) on top of an MDE approach,
		//// e.g., when FMs are related to other model elements or artefacts
		//// or ii) within an IDE and graphical editors
		//FamiliarScript:
		//	params+=Parameter* cmds+=ScriptCommand* exports+=(Export | Hidden)*;
		public ParserRule getRule() { return rule; }

		//params+=Parameter* cmds+=ScriptCommand* exports+=(Export | Hidden)*
		public Group getGroup() { return cGroup; }

		//params+=Parameter*
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_0_0() { return cParamsParameterParserRuleCall_0_0; }

		//cmds+=ScriptCommand*
		public Assignment getCmdsAssignment_1() { return cCmdsAssignment_1; }

		//ScriptCommand
		public RuleCall getCmdsScriptCommandParserRuleCall_1_0() { return cCmdsScriptCommandParserRuleCall_1_0; }

		//exports+=(Export | Hidden)*
		public Assignment getExportsAssignment_2() { return cExportsAssignment_2; }

		//Export | Hidden
		public Alternatives getExportsAlternatives_2_0() { return cExportsAlternatives_2_0; }

		//Export
		public RuleCall getExportsExportParserRuleCall_2_0_0() { return cExportsExportParserRuleCall_2_0_0; }

		//Hidden
		public RuleCall getExportsHiddenParserRuleCall_2_0_1() { return cExportsHiddenParserRuleCall_2_0_1; }
	}

	public class ScriptCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVarFML_IDENTIFIERParserRuleCall_0_0_0 = (RuleCall)cVarAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final RuleCall cLEFT_HOOKTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Assignment cMetaIDAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cMetaIDStringExprParserRuleCall_0_1_2_0 = (RuleCall)cMetaIDAssignment_0_1_2.eContents().get(0);
		private final RuleCall cRIGHT_HOOKTerminalRuleCall_0_1_3 = (RuleCall)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cCmdAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCmdComplexCommandParserRuleCall_0_3_0 = (RuleCall)cCmdAssignment_0_3.eContents().get(0);
		private final RuleCall cComplexCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ScriptCommand:
		//	var=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)? "=" cmd= // perhaps? metaID=(StringExpr|IdentifierExpr)  
		//	ComplexCommand | ComplexCommand;
		public ParserRule getRule() { return rule; }

		//var=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)? "=" cmd= // perhaps? metaID=(StringExpr|IdentifierExpr)  
		//ComplexCommand | ComplexCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//var=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)? "=" cmd= // perhaps? metaID=(StringExpr|IdentifierExpr)  
		//ComplexCommand
		public Group getGroup_0() { return cGroup_0; }

		//var=FML_IDENTIFIER
		public Assignment getVarAssignment_0_0() { return cVarAssignment_0_0; }

		//FML_IDENTIFIER
		public RuleCall getVarFML_IDENTIFIERParserRuleCall_0_0_0() { return cVarFML_IDENTIFIERParserRuleCall_0_0_0; }

		//(LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//LEFT_HOOK
		public RuleCall getLEFT_HOOKTerminalRuleCall_0_1_0() { return cLEFT_HOOKTerminalRuleCall_0_1_0; }

		//META_ATTRIBUTE_SYMBOL
		public RuleCall getMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_0_1_1() { return cMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_0_1_1; }

		//metaID=StringExpr
		public Assignment getMetaIDAssignment_0_1_2() { return cMetaIDAssignment_0_1_2; }

		//StringExpr
		public RuleCall getMetaIDStringExprParserRuleCall_0_1_2_0() { return cMetaIDStringExprParserRuleCall_0_1_2_0; }

		//RIGHT_HOOK
		public RuleCall getRIGHT_HOOKTerminalRuleCall_0_1_3() { return cRIGHT_HOOKTerminalRuleCall_0_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//cmd= // perhaps? metaID=(StringExpr|IdentifierExpr)  
		//ComplexCommand
		public Assignment getCmdAssignment_0_3() { return cCmdAssignment_0_3; }

		//// perhaps? metaID=(StringExpr|IdentifierExpr)  
		//ComplexCommand
		public RuleCall getCmdComplexCommandParserRuleCall_0_3_0() { return cCmdComplexCommandParserRuleCall_0_3_0; }

		//ComplexCommand
		public RuleCall getComplexCommandParserRuleCall_1() { return cComplexCommandParserRuleCall_1; }
	}

	public class ComplexCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftCommandParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Action cIntegerOperationLeftAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0_1_0 = (Alternatives)cOpAssignment_0_1_0_1.eContents().get(0);
		private final RuleCall cOpPLUSTerminalRuleCall_0_1_0_1_0_0 = (RuleCall)cOpAlternatives_0_1_0_1_0.eContents().get(0);
		private final RuleCall cOpMINUSTerminalRuleCall_0_1_0_1_0_1 = (RuleCall)cOpAlternatives_0_1_0_1_0.eContents().get(1);
		private final RuleCall cOpMULTTerminalRuleCall_0_1_0_1_0_2 = (RuleCall)cOpAlternatives_0_1_0_1_0.eContents().get(2);
		private final RuleCall cOpDIVTerminalRuleCall_0_1_0_1_0_3 = (RuleCall)cOpAlternatives_0_1_0_1_0.eContents().get(3);
		private final RuleCall cOpEXPTerminalRuleCall_0_1_0_1_0_4 = (RuleCall)cOpAlternatives_0_1_0_1_0.eContents().get(4);
		private final Assignment cRightAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cRightIntegerCommandParserRuleCall_0_1_0_2_0 = (RuleCall)cRightAssignment_0_1_0_2.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Action cBoolOperationLeftAction_0_1_1_0 = (Action)cGroup_0_1_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cOpBOOL_OperatorEnumRuleCall_0_1_1_1_0 = (RuleCall)cOpAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cRightComplexCommandParserRuleCall_0_1_1_2_0 = (RuleCall)cRightAssignment_0_1_1_2.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Action cComparisonOperationLeftAction_0_1_2_0 = (Action)cGroup_0_1_2.eContents().get(0);
		private final Assignment cCmpOpAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cCmpOpComparisonOperatorEnumRuleCall_0_1_2_1_0 = (RuleCall)cCmpOpAssignment_0_1_2_1.eContents().get(0);
		private final Assignment cRightAssignment_0_1_2_2 = (Assignment)cGroup_0_1_2.eContents().get(2);
		private final RuleCall cRightComplexCommandParserRuleCall_0_1_2_2_0 = (RuleCall)cRightAssignment_0_1_2_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cAlternatives_0_1.eContents().get(3);
		private final Action cSetOperationLeftAction_0_1_3_0 = (Action)cGroup_0_1_3.eContents().get(0);
		private final Assignment cSopAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cSopSetOperatorEnumRuleCall_0_1_3_1_0 = (RuleCall)cSopAssignment_0_1_3_1.eContents().get(0);
		private final Assignment cRightAssignment_0_1_3_2 = (Assignment)cGroup_0_1_3.eContents().get(2);
		private final RuleCall cRightComplexCommandParserRuleCall_0_1_3_2_0 = (RuleCall)cRightAssignment_0_1_3_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNotNotKeyword_1_0_0 = (Keyword)cNotAssignment_1_0.eContents().get(0);
		private final Assignment cBatomAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBatomComplexCommandParserRuleCall_1_1_0 = (RuleCall)cBatomAssignment_1_1.eContents().get(0);
		
		//ComplexCommand:
		//	left=Command ({IntegerOperation.left=current} op=(PLUS | MINUS | MULT | DIV | EXP) right=IntegerCommand |
		//	{BoolOperation.left=current} op=BOOL_Operator right= //BCommand
		//	ComplexCommand | {ComparisonOperation.left=current} cmpOp=ComparisonOperator right= //(IntegerCommand|BCommand)
		//	ComplexCommand | {SetOperation.left=current} sop=SetOperator right= // TODO new!
		//	ComplexCommand)? | not?="not" batom=ComplexCommand;
		public ParserRule getRule() { return rule; }

		//left=Command ({IntegerOperation.left=current} op=(PLUS | MINUS | MULT | DIV | EXP) right=IntegerCommand |
		//{BoolOperation.left=current} op=BOOL_Operator right= //BCommand
		//ComplexCommand | {ComparisonOperation.left=current} cmpOp=ComparisonOperator right= //(IntegerCommand|BCommand)
		//ComplexCommand | {SetOperation.left=current} sop=SetOperator right= // TODO new!
		//ComplexCommand)? | not?="not" batom=ComplexCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//left=Command ({IntegerOperation.left=current} op=(PLUS | MINUS | MULT | DIV | EXP) right=IntegerCommand |
		//{BoolOperation.left=current} op=BOOL_Operator right= //BCommand
		//ComplexCommand | {ComparisonOperation.left=current} cmpOp=ComparisonOperator right= //(IntegerCommand|BCommand)
		//ComplexCommand | {SetOperation.left=current} sop=SetOperator right= // TODO new!
		//ComplexCommand)?
		public Group getGroup_0() { return cGroup_0; }

		//left=Command
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }

		//Command
		public RuleCall getLeftCommandParserRuleCall_0_0_0() { return cLeftCommandParserRuleCall_0_0_0; }

		//({IntegerOperation.left=current} op=(PLUS | MINUS | MULT | DIV | EXP) right=IntegerCommand |
		//{BoolOperation.left=current} op=BOOL_Operator right= //BCommand
		//ComplexCommand | {ComparisonOperation.left=current} cmpOp=ComparisonOperator right= //(IntegerCommand|BCommand)
		//ComplexCommand | {SetOperation.left=current} sop=SetOperator right= // TODO new!
		//ComplexCommand)?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//{IntegerOperation.left=current} op=(PLUS | MINUS | MULT | DIV | EXP) right=IntegerCommand
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//{IntegerOperation.left=current}
		public Action getIntegerOperationLeftAction_0_1_0_0() { return cIntegerOperationLeftAction_0_1_0_0; }

		//op=(PLUS | MINUS | MULT | DIV | EXP)
		public Assignment getOpAssignment_0_1_0_1() { return cOpAssignment_0_1_0_1; }

		//PLUS | MINUS | MULT | DIV | EXP
		public Alternatives getOpAlternatives_0_1_0_1_0() { return cOpAlternatives_0_1_0_1_0; }

		//PLUS
		public RuleCall getOpPLUSTerminalRuleCall_0_1_0_1_0_0() { return cOpPLUSTerminalRuleCall_0_1_0_1_0_0; }

		//MINUS
		public RuleCall getOpMINUSTerminalRuleCall_0_1_0_1_0_1() { return cOpMINUSTerminalRuleCall_0_1_0_1_0_1; }

		//MULT
		public RuleCall getOpMULTTerminalRuleCall_0_1_0_1_0_2() { return cOpMULTTerminalRuleCall_0_1_0_1_0_2; }

		//DIV
		public RuleCall getOpDIVTerminalRuleCall_0_1_0_1_0_3() { return cOpDIVTerminalRuleCall_0_1_0_1_0_3; }

		//EXP
		public RuleCall getOpEXPTerminalRuleCall_0_1_0_1_0_4() { return cOpEXPTerminalRuleCall_0_1_0_1_0_4; }

		//right=IntegerCommand
		public Assignment getRightAssignment_0_1_0_2() { return cRightAssignment_0_1_0_2; }

		//IntegerCommand
		public RuleCall getRightIntegerCommandParserRuleCall_0_1_0_2_0() { return cRightIntegerCommandParserRuleCall_0_1_0_2_0; }

		//{BoolOperation.left=current} op=BOOL_Operator right= //BCommand
		//ComplexCommand
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//{BoolOperation.left=current}
		public Action getBoolOperationLeftAction_0_1_1_0() { return cBoolOperationLeftAction_0_1_1_0; }

		//op=BOOL_Operator
		public Assignment getOpAssignment_0_1_1_1() { return cOpAssignment_0_1_1_1; }

		//BOOL_Operator
		public RuleCall getOpBOOL_OperatorEnumRuleCall_0_1_1_1_0() { return cOpBOOL_OperatorEnumRuleCall_0_1_1_1_0; }

		//right= //BCommand
		//ComplexCommand
		public Assignment getRightAssignment_0_1_1_2() { return cRightAssignment_0_1_1_2; }

		////BCommand
		//ComplexCommand
		public RuleCall getRightComplexCommandParserRuleCall_0_1_1_2_0() { return cRightComplexCommandParserRuleCall_0_1_1_2_0; }

		//{ComparisonOperation.left=current} cmpOp=ComparisonOperator right= //(IntegerCommand|BCommand)
		//ComplexCommand
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//{ComparisonOperation.left=current}
		public Action getComparisonOperationLeftAction_0_1_2_0() { return cComparisonOperationLeftAction_0_1_2_0; }

		//cmpOp=ComparisonOperator
		public Assignment getCmpOpAssignment_0_1_2_1() { return cCmpOpAssignment_0_1_2_1; }

		//ComparisonOperator
		public RuleCall getCmpOpComparisonOperatorEnumRuleCall_0_1_2_1_0() { return cCmpOpComparisonOperatorEnumRuleCall_0_1_2_1_0; }

		//right= //(IntegerCommand|BCommand)
		//ComplexCommand
		public Assignment getRightAssignment_0_1_2_2() { return cRightAssignment_0_1_2_2; }

		////(IntegerCommand|BCommand)
		//ComplexCommand
		public RuleCall getRightComplexCommandParserRuleCall_0_1_2_2_0() { return cRightComplexCommandParserRuleCall_0_1_2_2_0; }

		//{SetOperation.left=current} sop=SetOperator right= // TODO new!
		//ComplexCommand
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }

		//{SetOperation.left=current}
		public Action getSetOperationLeftAction_0_1_3_0() { return cSetOperationLeftAction_0_1_3_0; }

		//sop=SetOperator
		public Assignment getSopAssignment_0_1_3_1() { return cSopAssignment_0_1_3_1; }

		//SetOperator
		public RuleCall getSopSetOperatorEnumRuleCall_0_1_3_1_0() { return cSopSetOperatorEnumRuleCall_0_1_3_1_0; }

		//right= // TODO new!
		//ComplexCommand
		public Assignment getRightAssignment_0_1_3_2() { return cRightAssignment_0_1_3_2; }

		//// TODO new!
		//ComplexCommand
		public RuleCall getRightComplexCommandParserRuleCall_0_1_3_2_0() { return cRightComplexCommandParserRuleCall_0_1_3_2_0; }

		//not?="not" batom=ComplexCommand
		public Group getGroup_1() { return cGroup_1; }

		//not?="not"
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }

		//"not"
		public Keyword getNotNotKeyword_1_0_0() { return cNotNotKeyword_1_0_0; }

		//batom=ComplexCommand
		public Assignment getBatomAssignment_1_1() { return cBatomAssignment_1_1; }

		//ComplexCommand
		public RuleCall getBatomComplexCommandParserRuleCall_1_1_0() { return cBatomComplexCommandParserRuleCall_1_1_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cComplexCommandParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final RuleCall cStringExprParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSetExprParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cBooleanExprParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cIdentifierExprParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cIntegerExprParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cFeatureVariabilityOperatorParserRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cIfConditionParserRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final RuleCall cForeachSetParserRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final RuleCall cFeatureModelParserRuleCall_1_8 = (RuleCall)cAlternatives_1.eContents().get(8);
		private final RuleCall cAddConstraintParserRuleCall_1_9 = (RuleCall)cAlternatives_1.eContents().get(9);
		private final RuleCall cRemoveConstraintParserRuleCall_1_10 = (RuleCall)cAlternatives_1.eContents().get(10);
		private final RuleCall cSetOperationsParserRuleCall_1_11 = (RuleCall)cAlternatives_1.eContents().get(11);
		private final RuleCall cAnalysisOperationParserRuleCall_1_12 = (RuleCall)cAlternatives_1.eContents().get(12);
		private final RuleCall cFeatureOperationParserRuleCall_1_13 = (RuleCall)cAlternatives_1.eContents().get(13);
		private final RuleCall cStringOperationParserRuleCall_1_14 = (RuleCall)cAlternatives_1.eContents().get(14);
		private final RuleCall cCompareParserRuleCall_1_15 = (RuleCall)cAlternatives_1.eContents().get(15);
		private final RuleCall cLoadGenericParserRuleCall_1_16 = (RuleCall)cAlternatives_1.eContents().get(16);
		private final RuleCall cMergeParserRuleCall_1_17 = (RuleCall)cAlternatives_1.eContents().get(17);
		private final RuleCall cAggregateMergeParserRuleCall_1_18 = (RuleCall)cAlternatives_1.eContents().get(18);
		private final RuleCall cSynthesisParserRuleCall_1_19 = (RuleCall)cAlternatives_1.eContents().get(19);
		private final RuleCall cHierarchyParserRuleCall_1_20 = (RuleCall)cAlternatives_1.eContents().get(20);
		private final RuleCall cFeatureModelOperationParserRuleCall_1_21 = (RuleCall)cAlternatives_1.eContents().get(21);
		private final RuleCall cAggregateParserRuleCall_1_22 = (RuleCall)cAlternatives_1.eContents().get(22);
		private final RuleCall cSliceParserRuleCall_1_23 = (RuleCall)cAlternatives_1.eContents().get(23);
		private final RuleCall cMapParserRuleCall_1_24 = (RuleCall)cAlternatives_1.eContents().get(24);
		private final RuleCall cUnMapParserRuleCall_1_25 = (RuleCall)cAlternatives_1.eContents().get(25);
		private final RuleCall cAtomicConstraintExprParserRuleCall_1_26 = (RuleCall)cAlternatives_1.eContents().get(26);
		private final RuleCall cConstraintExprParserRuleCall_1_27 = (RuleCall)cAlternatives_1.eContents().get(27);
		private final RuleCall cGetConstraintsParserRuleCall_1_28 = (RuleCall)cAlternatives_1.eContents().get(28);
		private final RuleCall cComputeConstraintsParserRuleCall_1_29 = (RuleCall)cAlternatives_1.eContents().get(29);
		private final RuleCall cGetFGroupsParserRuleCall_1_30 = (RuleCall)cAlternatives_1.eContents().get(30);
		private final RuleCall cComputeFGroupsParserRuleCall_1_31 = (RuleCall)cAlternatives_1.eContents().get(31);
		private final RuleCall cVariableNullParserRuleCall_1_32 = (RuleCall)cAlternatives_1.eContents().get(32);
		private final RuleCall cCoresParserRuleCall_1_33 = (RuleCall)cAlternatives_1.eContents().get(33);
		private final RuleCall cDeadsParserRuleCall_1_34 = (RuleCall)cAlternatives_1.eContents().get(34);
		private final RuleCall cCliquesParserRuleCall_1_35 = (RuleCall)cAlternatives_1.eContents().get(35);
		private final RuleCall cLeavesParserRuleCall_1_36 = (RuleCall)cAlternatives_1.eContents().get(36);
		private final RuleCall cFullMandatorysParserRuleCall_1_37 = (RuleCall)cAlternatives_1.eContents().get(37);
		private final RuleCall cPrinterUtilityParserRuleCall_1_38 = (RuleCall)cAlternatives_1.eContents().get(38);
		private final RuleCall cConvertParserRuleCall_1_39 = (RuleCall)cAlternatives_1.eContents().get(39);
		private final RuleCall cAssertionParserRuleCall_1_40 = (RuleCall)cAlternatives_1.eContents().get(40);
		private final RuleCall cGDisplayParserRuleCall_1_41 = (RuleCall)cAlternatives_1.eContents().get(41);
		private final RuleCall cGListingParserRuleCall_1_42 = (RuleCall)cAlternatives_1.eContents().get(42);
		private final RuleCall cCleanUpParserRuleCall_1_43 = (RuleCall)cAlternatives_1.eContents().get(43);
		private final RuleCall cAsFMParserRuleCall_1_44 = (RuleCall)cAlternatives_1.eContents().get(44);
		private final RuleCall cModifyVOperatorParserRuleCall_1_45 = (RuleCall)cAlternatives_1.eContents().get(45);
		private final RuleCall cFMLSaveParserRuleCall_1_46 = (RuleCall)cAlternatives_1.eContents().get(46);
		private final RuleCall cConfigurationCmdParserRuleCall_1_47 = (RuleCall)cAlternatives_1.eContents().get(47);
		private final RuleCall cScriptDefinitionParserRuleCall_1_48 = (RuleCall)cAlternatives_1.eContents().get(48);
		private final RuleCall cShellParserRuleCall_1_49 = (RuleCall)cAlternatives_1.eContents().get(49);
		private final RuleCall cCopyVariableParserRuleCall_1_50 = (RuleCall)cAlternatives_1.eContents().get(50);
		private final RuleCall cRemoveVariableParserRuleCall_1_51 = (RuleCall)cAlternatives_1.eContents().get(51);
		private final RuleCall cCTCRCommandParserRuleCall_1_52 = (RuleCall)cAlternatives_1.eContents().get(52);
		private final RuleCall cPairwiseCommandParserRuleCall_1_53 = (RuleCall)cAlternatives_1.eContents().get(53);
		
		//Command:
		//	LEFT_PAREN ComplexCommand RIGHT_PAREN | (StringExpr | SetExpr | BooleanExpr | IdentifierExpr | IntegerExpr |
		//	FeatureVariabilityOperator | IfCondition | ForeachSet | FeatureModel | // only internal constraints (see aggregate)
		//	AddConstraint | // what about associating an id to a constraint?
		//	RemoveConstraint | SetOperations | AnalysisOperation | // children, sibling, parent, operator
		//	FeatureOperation | StringOperation | Compare | LoadGeneric | Merge | AggregateMerge | Synthesis | Hierarchy | // insert, remove, rename, extract
		//	FeatureModelOperation | Aggregate | Slice | Map | UnMap | AtomicConstraintExpr | ConstraintExpr | GetConstraints |
		//	ComputeConstraints | GetFGroups | ComputeFGroups | VariableNull | Cores | Deads | Cliques | Leaves | FullMandatorys |
		//	PrinterUtility | Convert | Assertion | GDisplay | GListing | CleanUp | AsFM | ModifyVOperator | FMLSave |
		//	ConfigurationCmd | ScriptDefinition | Shell | CopyVariable | RemoveVariable | CTCRCommand | PairwiseCommand);
		public ParserRule getRule() { return rule; }

		//LEFT_PAREN ComplexCommand RIGHT_PAREN | (StringExpr | SetExpr | BooleanExpr | IdentifierExpr | IntegerExpr |
		//FeatureVariabilityOperator | IfCondition | ForeachSet | FeatureModel | // only internal constraints (see aggregate)
		//AddConstraint | // what about associating an id to a constraint?
		//RemoveConstraint | SetOperations | AnalysisOperation | // children, sibling, parent, operator
		//FeatureOperation | StringOperation | Compare | LoadGeneric | Merge | AggregateMerge | Synthesis | Hierarchy | // insert, remove, rename, extract
		//FeatureModelOperation | Aggregate | Slice | Map | UnMap | AtomicConstraintExpr | ConstraintExpr | GetConstraints |
		//ComputeConstraints | GetFGroups | ComputeFGroups | VariableNull | Cores | Deads | Cliques | Leaves | FullMandatorys |
		//PrinterUtility | Convert | Assertion | GDisplay | GListing | CleanUp | AsFM | ModifyVOperator | FMLSave |
		//ConfigurationCmd | ScriptDefinition | Shell | CopyVariable | RemoveVariable | CTCRCommand | PairwiseCommand)
		public Alternatives getAlternatives() { return cAlternatives; }

		//LEFT_PAREN ComplexCommand RIGHT_PAREN
		public Group getGroup_0() { return cGroup_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_0_0() { return cLEFT_PARENTerminalRuleCall_0_0; }

		//ComplexCommand
		public RuleCall getComplexCommandParserRuleCall_0_1() { return cComplexCommandParserRuleCall_0_1; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_0_2() { return cRIGHT_PARENTerminalRuleCall_0_2; }

		//StringExpr | SetExpr | BooleanExpr | IdentifierExpr | IntegerExpr | FeatureVariabilityOperator | IfCondition |
		//ForeachSet | FeatureModel | // only internal constraints (see aggregate)
		//AddConstraint | // what about associating an id to a constraint?
		//RemoveConstraint | SetOperations | AnalysisOperation | // children, sibling, parent, operator
		//FeatureOperation | StringOperation | Compare | LoadGeneric | Merge | AggregateMerge | Synthesis | Hierarchy | // insert, remove, rename, extract
		//FeatureModelOperation | Aggregate | Slice | Map | UnMap | AtomicConstraintExpr | ConstraintExpr | GetConstraints |
		//ComputeConstraints | GetFGroups | ComputeFGroups | VariableNull | Cores | Deads | Cliques | Leaves | FullMandatorys |
		//PrinterUtility | Convert | Assertion | GDisplay | GListing | CleanUp | AsFM | ModifyVOperator | FMLSave |
		//ConfigurationCmd | ScriptDefinition | Shell | CopyVariable | RemoveVariable | CTCRCommand | PairwiseCommand
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//StringExpr
		public RuleCall getStringExprParserRuleCall_1_0() { return cStringExprParserRuleCall_1_0; }

		//SetExpr
		public RuleCall getSetExprParserRuleCall_1_1() { return cSetExprParserRuleCall_1_1; }

		//BooleanExpr
		public RuleCall getBooleanExprParserRuleCall_1_2() { return cBooleanExprParserRuleCall_1_2; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_1_3() { return cIdentifierExprParserRuleCall_1_3; }

		//IntegerExpr
		public RuleCall getIntegerExprParserRuleCall_1_4() { return cIntegerExprParserRuleCall_1_4; }

		//FeatureVariabilityOperator
		public RuleCall getFeatureVariabilityOperatorParserRuleCall_1_5() { return cFeatureVariabilityOperatorParserRuleCall_1_5; }

		//IfCondition
		public RuleCall getIfConditionParserRuleCall_1_6() { return cIfConditionParserRuleCall_1_6; }

		//ForeachSet
		public RuleCall getForeachSetParserRuleCall_1_7() { return cForeachSetParserRuleCall_1_7; }

		//FeatureModel
		public RuleCall getFeatureModelParserRuleCall_1_8() { return cFeatureModelParserRuleCall_1_8; }

		//// only internal constraints (see aggregate)
		//AddConstraint
		public RuleCall getAddConstraintParserRuleCall_1_9() { return cAddConstraintParserRuleCall_1_9; }

		//// what about associating an id to a constraint?
		//RemoveConstraint
		public RuleCall getRemoveConstraintParserRuleCall_1_10() { return cRemoveConstraintParserRuleCall_1_10; }

		//SetOperations
		public RuleCall getSetOperationsParserRuleCall_1_11() { return cSetOperationsParserRuleCall_1_11; }

		//AnalysisOperation
		public RuleCall getAnalysisOperationParserRuleCall_1_12() { return cAnalysisOperationParserRuleCall_1_12; }

		//// children, sibling, parent, operator
		//FeatureOperation
		public RuleCall getFeatureOperationParserRuleCall_1_13() { return cFeatureOperationParserRuleCall_1_13; }

		//StringOperation
		public RuleCall getStringOperationParserRuleCall_1_14() { return cStringOperationParserRuleCall_1_14; }

		//Compare
		public RuleCall getCompareParserRuleCall_1_15() { return cCompareParserRuleCall_1_15; }

		//LoadGeneric
		public RuleCall getLoadGenericParserRuleCall_1_16() { return cLoadGenericParserRuleCall_1_16; }

		//Merge
		public RuleCall getMergeParserRuleCall_1_17() { return cMergeParserRuleCall_1_17; }

		//AggregateMerge
		public RuleCall getAggregateMergeParserRuleCall_1_18() { return cAggregateMergeParserRuleCall_1_18; }

		//Synthesis
		public RuleCall getSynthesisParserRuleCall_1_19() { return cSynthesisParserRuleCall_1_19; }

		//Hierarchy
		public RuleCall getHierarchyParserRuleCall_1_20() { return cHierarchyParserRuleCall_1_20; }

		//// insert, remove, rename, extract
		//FeatureModelOperation
		public RuleCall getFeatureModelOperationParserRuleCall_1_21() { return cFeatureModelOperationParserRuleCall_1_21; }

		//Aggregate
		public RuleCall getAggregateParserRuleCall_1_22() { return cAggregateParserRuleCall_1_22; }

		//Slice
		public RuleCall getSliceParserRuleCall_1_23() { return cSliceParserRuleCall_1_23; }

		//Map
		public RuleCall getMapParserRuleCall_1_24() { return cMapParserRuleCall_1_24; }

		//UnMap
		public RuleCall getUnMapParserRuleCall_1_25() { return cUnMapParserRuleCall_1_25; }

		//AtomicConstraintExpr
		public RuleCall getAtomicConstraintExprParserRuleCall_1_26() { return cAtomicConstraintExprParserRuleCall_1_26; }

		//ConstraintExpr
		public RuleCall getConstraintExprParserRuleCall_1_27() { return cConstraintExprParserRuleCall_1_27; }

		//GetConstraints
		public RuleCall getGetConstraintsParserRuleCall_1_28() { return cGetConstraintsParserRuleCall_1_28; }

		//ComputeConstraints
		public RuleCall getComputeConstraintsParserRuleCall_1_29() { return cComputeConstraintsParserRuleCall_1_29; }

		//GetFGroups
		public RuleCall getGetFGroupsParserRuleCall_1_30() { return cGetFGroupsParserRuleCall_1_30; }

		//ComputeFGroups
		public RuleCall getComputeFGroupsParserRuleCall_1_31() { return cComputeFGroupsParserRuleCall_1_31; }

		//VariableNull
		public RuleCall getVariableNullParserRuleCall_1_32() { return cVariableNullParserRuleCall_1_32; }

		//Cores
		public RuleCall getCoresParserRuleCall_1_33() { return cCoresParserRuleCall_1_33; }

		//Deads
		public RuleCall getDeadsParserRuleCall_1_34() { return cDeadsParserRuleCall_1_34; }

		//Cliques
		public RuleCall getCliquesParserRuleCall_1_35() { return cCliquesParserRuleCall_1_35; }

		//Leaves
		public RuleCall getLeavesParserRuleCall_1_36() { return cLeavesParserRuleCall_1_36; }

		//FullMandatorys
		public RuleCall getFullMandatorysParserRuleCall_1_37() { return cFullMandatorysParserRuleCall_1_37; }

		//PrinterUtility
		public RuleCall getPrinterUtilityParserRuleCall_1_38() { return cPrinterUtilityParserRuleCall_1_38; }

		//Convert
		public RuleCall getConvertParserRuleCall_1_39() { return cConvertParserRuleCall_1_39; }

		//Assertion
		public RuleCall getAssertionParserRuleCall_1_40() { return cAssertionParserRuleCall_1_40; }

		//GDisplay
		public RuleCall getGDisplayParserRuleCall_1_41() { return cGDisplayParserRuleCall_1_41; }

		//GListing
		public RuleCall getGListingParserRuleCall_1_42() { return cGListingParserRuleCall_1_42; }

		//CleanUp
		public RuleCall getCleanUpParserRuleCall_1_43() { return cCleanUpParserRuleCall_1_43; }

		//AsFM
		public RuleCall getAsFMParserRuleCall_1_44() { return cAsFMParserRuleCall_1_44; }

		//ModifyVOperator
		public RuleCall getModifyVOperatorParserRuleCall_1_45() { return cModifyVOperatorParserRuleCall_1_45; }

		//FMLSave
		public RuleCall getFMLSaveParserRuleCall_1_46() { return cFMLSaveParserRuleCall_1_46; }

		//ConfigurationCmd
		public RuleCall getConfigurationCmdParserRuleCall_1_47() { return cConfigurationCmdParserRuleCall_1_47; }

		//ScriptDefinition
		public RuleCall getScriptDefinitionParserRuleCall_1_48() { return cScriptDefinitionParserRuleCall_1_48; }

		//Shell
		public RuleCall getShellParserRuleCall_1_49() { return cShellParserRuleCall_1_49; }

		//CopyVariable
		public RuleCall getCopyVariableParserRuleCall_1_50() { return cCopyVariableParserRuleCall_1_50; }

		//RemoveVariable
		public RuleCall getRemoveVariableParserRuleCall_1_51() { return cRemoveVariableParserRuleCall_1_51; }

		//CTCRCommand
		public RuleCall getCTCRCommandParserRuleCall_1_52() { return cCTCRCommandParserRuleCall_1_52; }

		//PairwiseCommand
		public RuleCall getPairwiseCommandParserRuleCall_1_53() { return cPairwiseCommandParserRuleCall_1_53; }
	}

	public class IntegerExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerExpr:
		//	{IntLiteral} value=INT;
		public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INT
		public Group getGroup() { return cGroup; }

		//{IntLiteral}
		public Action getIntLiteralAction_0() { return cIntLiteralAction_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class BooleanExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValAlternatives_1_0 = (Alternatives)cValAssignment_1.eContents().get(0);
		private final Keyword cValTrueKeyword_1_0_0 = (Keyword)cValAlternatives_1_0.eContents().get(0);
		private final Keyword cValFalseKeyword_1_0_1 = (Keyword)cValAlternatives_1_0.eContents().get(1);
		
		/// ******** BOOLEAN EXPRESSION? ******** / BooleanExpr:
		//	{BooleanExpr} val=("true" | "false");
		public ParserRule getRule() { return rule; }

		//{BooleanExpr} val=("true" | "false")
		public Group getGroup() { return cGroup; }

		//{BooleanExpr}
		public Action getBooleanExprAction_0() { return cBooleanExprAction_0; }

		//val=("true" | "false")
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//"true" | "false"
		public Alternatives getValAlternatives_1_0() { return cValAlternatives_1_0; }

		//"true"
		public Keyword getValTrueKeyword_1_0_0() { return cValTrueKeyword_1_0_0; }

		//"false"
		public Keyword getValFalseKeyword_1_0_1() { return cValFalseKeyword_1_0_1; }
	}

	public class IdentifierExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdentifierExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValFML_IDENTIFIERParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLEFT_HOOKTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cMetaIDAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMetaIDStringExprParserRuleCall_1_2_0 = (RuleCall)cMetaIDAssignment_1_2.eContents().get(0);
		private final RuleCall cRIGHT_HOOKTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//IdentifierExpr:
		//	val=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)?;
		public ParserRule getRule() { return rule; }

		//val=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)?
		public Group getGroup() { return cGroup; }

		//val=FML_IDENTIFIER
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//FML_IDENTIFIER
		public RuleCall getValFML_IDENTIFIERParserRuleCall_0_0() { return cValFML_IDENTIFIERParserRuleCall_0_0; }

		//(LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)?
		public Group getGroup_1() { return cGroup_1; }

		//LEFT_HOOK
		public RuleCall getLEFT_HOOKTerminalRuleCall_1_0() { return cLEFT_HOOKTerminalRuleCall_1_0; }

		//META_ATTRIBUTE_SYMBOL
		public RuleCall getMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_1_1() { return cMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_1_1; }

		//metaID=StringExpr
		public Assignment getMetaIDAssignment_1_2() { return cMetaIDAssignment_1_2; }

		//StringExpr
		public RuleCall getMetaIDStringExprParserRuleCall_1_2_0() { return cMetaIDStringExprParserRuleCall_1_2_0; }

		//RIGHT_HOOK
		public RuleCall getRIGHT_HOOKTerminalRuleCall_1_3() { return cRIGHT_HOOKTerminalRuleCall_1_3; }
	}

	public class StringExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpr");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//StringExpr:
		//	val=STRING;
		public ParserRule getRule() { return rule; }

		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}

	public class SetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEComplexCommandParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SetExpr:
		//	LEFT_BRACKET e+=ComplexCommand+ RIGHT_BRACKET;
		public ParserRule getRule() { return rule; }

		//LEFT_BRACKET e+=ComplexCommand+ RIGHT_BRACKET
		public Group getGroup() { return cGroup; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_0() { return cLEFT_BRACKETTerminalRuleCall_0; }

		//e+=ComplexCommand+
		public Assignment getEAssignment_1() { return cEAssignment_1; }

		//ComplexCommand
		public RuleCall getEComplexCommandParserRuleCall_1_0() { return cEComplexCommandParserRuleCall_1_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_2() { return cRIGHT_BRACKETTerminalRuleCall_2; }
	}

	public class AtomicConstraintExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicConstraintExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprCNFParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AtomicConstraintExpr:
		//	"constraint" LEFT_PAREN expr=CNF RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//"constraint" LEFT_PAREN expr=CNF RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//expr=CNF
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//CNF
		public RuleCall getExprCNFParserRuleCall_2_0() { return cExprCNFParserRuleCall_2_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_3() { return cRIGHT_PARENTerminalRuleCall_3; }
	}

	public class ConstraintExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cConstraintsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cConstraintsCNFParserRuleCall_1_0_1_0_0 = (RuleCall)cConstraintsAssignment_1_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Assignment cFmAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_1_0 = (RuleCall)cFmAssignment_1_1.eContents().get(0);
		
		////ConstraintExpr : LEFT_BRACKET (constraints+=CNF ';')+ RIGHT_BRACKET ;
		//// TODO: refactor (types) + set ===> { constraint (A -> B) constraint (C -> D) }
		//// implies + excludes + biimplies + o 
		//ConstraintExpr:
		//	"constraints" (LEFT_PAREN (constraints+=CNF ";")+ RIGHT_PAREN | fm=FMCommand);
		public ParserRule getRule() { return rule; }

		//"constraints" (LEFT_PAREN (constraints+=CNF ";")+ RIGHT_PAREN | fm=FMCommand)
		public Group getGroup() { return cGroup; }

		//"constraints"
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }

		//LEFT_PAREN (constraints+=CNF ";")+ RIGHT_PAREN | fm=FMCommand
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//LEFT_PAREN (constraints+=CNF ";")+ RIGHT_PAREN
		public Group getGroup_1_0() { return cGroup_1_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1_0_0() { return cLEFT_PARENTerminalRuleCall_1_0_0; }

		//(constraints+=CNF ";")+
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//constraints+=CNF
		public Assignment getConstraintsAssignment_1_0_1_0() { return cConstraintsAssignment_1_0_1_0; }

		//CNF
		public RuleCall getConstraintsCNFParserRuleCall_1_0_1_0_0() { return cConstraintsCNFParserRuleCall_1_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1_1() { return cSemicolonKeyword_1_0_1_1; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_1_0_2() { return cRIGHT_PARENTerminalRuleCall_1_0_2; }

		//fm=FMCommand
		public Assignment getFmAssignment_1_1() { return cFmAssignment_1_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_1_0() { return cFmFMCommandParserRuleCall_1_1_0; }
	}

	public class FeatureVariabilityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureVariabilityOperator");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValFeatureEdgeKindEnumRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		////FeatureVariabilityOperator : 'OP' LEFT_PAREN val=FeatureEdgeKind RIGHT_PAREN ;
		//FeatureVariabilityOperator:
		//	val=FeatureEdgeKind;
		public ParserRule getRule() { return rule; }

		//val=FeatureEdgeKind
		public Assignment getValAssignment() { return cValAssignment; }

		//FeatureEdgeKind
		public RuleCall getValFeatureEdgeKindEnumRuleCall_0() { return cValFeatureEdgeKindEnumRuleCall_0; }
	}

	public class IfConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBexprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBexprComplexCommandParserRuleCall_2_0 = (RuleCall)cBexprAssignment_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenScriptCommandParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseScriptCommandParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfCondition:
		//	"if" LEFT_PAREN bexpr=ComplexCommand RIGHT_PAREN //BCommand | ComparisonExpression
		//	"then" then+=ScriptCommand+ ("else" else+=ScriptCommand+)? "end";
		public ParserRule getRule() { return rule; }

		//"if" LEFT_PAREN bexpr=ComplexCommand RIGHT_PAREN //BCommand | ComparisonExpression
		//"then" then+=ScriptCommand+ ("else" else+=ScriptCommand+)? "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//bexpr=ComplexCommand
		public Assignment getBexprAssignment_2() { return cBexprAssignment_2; }

		//ComplexCommand
		public RuleCall getBexprComplexCommandParserRuleCall_2_0() { return cBexprComplexCommandParserRuleCall_2_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_3() { return cRIGHT_PARENTerminalRuleCall_3; }

		////BCommand | ComparisonExpression
		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }

		//then+=ScriptCommand+
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//ScriptCommand
		public RuleCall getThenScriptCommandParserRuleCall_5_0() { return cThenScriptCommandParserRuleCall_5_0; }

		//("else" else+=ScriptCommand+)?
		public Group getGroup_6() { return cGroup_6; }

		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else+=ScriptCommand+
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//ScriptCommand
		public RuleCall getElseScriptCommandParserRuleCall_6_1_0() { return cElseScriptCommandParserRuleCall_6_1_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class ForeachSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForeachSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValFML_IDENTIFIERParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarFML_IDENTIFIERParserRuleCall_4_0 = (RuleCall)cVarAssignment_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cDoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExprsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExprsScriptCommandParserRuleCall_7_0 = (RuleCall)cExprsAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForeachSet:
		//	"foreach" LEFT_PAREN val=FML_IDENTIFIER "in" var=FML_IDENTIFIER RIGHT_PAREN "do" exprs+=ScriptCommand+ "end";
		public ParserRule getRule() { return rule; }

		//"foreach" LEFT_PAREN val=FML_IDENTIFIER "in" var=FML_IDENTIFIER RIGHT_PAREN "do" exprs+=ScriptCommand+ "end"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//val=FML_IDENTIFIER
		public Assignment getValAssignment_2() { return cValAssignment_2; }

		//FML_IDENTIFIER
		public RuleCall getValFML_IDENTIFIERParserRuleCall_2_0() { return cValFML_IDENTIFIERParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//var=FML_IDENTIFIER
		public Assignment getVarAssignment_4() { return cVarAssignment_4; }

		//FML_IDENTIFIER
		public RuleCall getVarFML_IDENTIFIERParserRuleCall_4_0() { return cVarFML_IDENTIFIERParserRuleCall_4_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_5() { return cRIGHT_PARENTerminalRuleCall_5; }

		//"do"
		public Keyword getDoKeyword_6() { return cDoKeyword_6; }

		//exprs+=ScriptCommand+
		public Assignment getExprsAssignment_7() { return cExprsAssignment_7; }

		//ScriptCommand
		public RuleCall getExprsScriptCommandParserRuleCall_7_0() { return cExprsScriptCommandParserRuleCall_7_0; }

		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}

	public class LTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lType");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final Keyword cValFeatureModelKeyword_0_0 = (Keyword)cValAlternatives_0.eContents().get(0);
		private final Keyword cValFeatureKeyword_0_1 = (Keyword)cValAlternatives_0.eContents().get(1);
		private final Keyword cValBooleanKeyword_0_2 = (Keyword)cValAlternatives_0.eContents().get(2);
		private final Keyword cValStringKeyword_0_3 = (Keyword)cValAlternatives_0.eContents().get(3);
		private final Keyword cValConfigurationKeyword_0_4 = (Keyword)cValAlternatives_0.eContents().get(4);
		private final Keyword cValSetKeyword_0_5 = (Keyword)cValAlternatives_0.eContents().get(5);
		private final Keyword cValDoubleKeyword_0_6 = (Keyword)cValAlternatives_0.eContents().get(6);
		private final Keyword cValIntegerKeyword_0_7 = (Keyword)cValAlternatives_0.eContents().get(7);
		private final Keyword cValConstraintKeyword_0_8 = (Keyword)cValAlternatives_0.eContents().get(8);
		
		//// TODO: whichfm for features
		/// ******* TYPE OPERATIONS ****** / lType:
		//	val=("FeatureModel" | "Feature" | "Boolean" | "String" | "Configuration" | "Set" | "Double" | "Integer" |
		//	"Constraint");
		public ParserRule getRule() { return rule; }

		//val=("FeatureModel" | "Feature" | "Boolean" | "String" | "Configuration" | "Set" | "Double" | "Integer" | "Constraint")
		public Assignment getValAssignment() { return cValAssignment; }

		//"FeatureModel" | "Feature" | "Boolean" | "String" | "Configuration" | "Set" | "Double" | "Integer" | "Constraint"
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }

		//"FeatureModel"
		public Keyword getValFeatureModelKeyword_0_0() { return cValFeatureModelKeyword_0_0; }

		//"Feature"
		public Keyword getValFeatureKeyword_0_1() { return cValFeatureKeyword_0_1; }

		//"Boolean"
		public Keyword getValBooleanKeyword_0_2() { return cValBooleanKeyword_0_2; }

		//"String"
		public Keyword getValStringKeyword_0_3() { return cValStringKeyword_0_3; }

		//"Configuration"
		public Keyword getValConfigurationKeyword_0_4() { return cValConfigurationKeyword_0_4; }

		//"Set"
		public Keyword getValSetKeyword_0_5() { return cValSetKeyword_0_5; }

		//"Double"
		public Keyword getValDoubleKeyword_0_6() { return cValDoubleKeyword_0_6; }

		//"Integer"
		public Keyword getValIntegerKeyword_0_7() { return cValIntegerKeyword_0_7; }

		//"Constraint"
		public Keyword getValConstraintKeyword_0_8() { return cValConstraintKeyword_0_8; }
	}

	public class FMLAbstractCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FMLAbstractCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFMCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFTCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstraintCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FMLAbstractCommand:
		//	Command | FMCommand | FTCommand | SetCommand | ConstraintCommand;
		public ParserRule getRule() { return rule; }

		//Command | FMCommand | FTCommand | SetCommand | ConstraintCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }

		//FMCommand
		public RuleCall getFMCommandParserRuleCall_1() { return cFMCommandParserRuleCall_1; }

		//FTCommand
		public RuleCall getFTCommandParserRuleCall_2() { return cFTCommandParserRuleCall_2; }

		//SetCommand
		public RuleCall getSetCommandParserRuleCall_3() { return cSetCommandParserRuleCall_3; }

		//ConstraintCommand
		public RuleCall getConstraintCommandParserRuleCall_4() { return cConstraintCommandParserRuleCall_4; }
	}

	public class FMCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FMCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCopyVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAggregateMergeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMergeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSynthesisParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFeatureModelParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFMFeatureParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAsFMParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAggregateParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExtractParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSliceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cHierarchyParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		////	| LEFT_PAREN FMCommand RIGHT_PAREN 
		//FMCommand:
		//	IdentifierExpr | CopyVariable | AggregateMerge | Merge | Synthesis | FeatureModel | FMFeature | AsFM | Aggregate |
		//	Extract | Slice | Hierarchy;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | CopyVariable | AggregateMerge | Merge | Synthesis | FeatureModel | FMFeature | AsFM | Aggregate |
		//Extract | Slice | Hierarchy
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//CopyVariable
		public RuleCall getCopyVariableParserRuleCall_1() { return cCopyVariableParserRuleCall_1; }

		//AggregateMerge
		public RuleCall getAggregateMergeParserRuleCall_2() { return cAggregateMergeParserRuleCall_2; }

		//Merge
		public RuleCall getMergeParserRuleCall_3() { return cMergeParserRuleCall_3; }

		//Synthesis
		public RuleCall getSynthesisParserRuleCall_4() { return cSynthesisParserRuleCall_4; }

		//FeatureModel
		public RuleCall getFeatureModelParserRuleCall_5() { return cFeatureModelParserRuleCall_5; }

		//FMFeature
		public RuleCall getFMFeatureParserRuleCall_6() { return cFMFeatureParserRuleCall_6; }

		//AsFM
		public RuleCall getAsFMParserRuleCall_7() { return cAsFMParserRuleCall_7; }

		//Aggregate
		public RuleCall getAggregateParserRuleCall_8() { return cAggregateParserRuleCall_8; }

		//Extract
		public RuleCall getExtractParserRuleCall_9() { return cExtractParserRuleCall_9; }

		//Slice
		public RuleCall getSliceParserRuleCall_10() { return cSliceParserRuleCall_10; }

		//Hierarchy
		public RuleCall getHierarchyParserRuleCall_11() { return cHierarchyParserRuleCall_11; }
	}

	public class FTCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FTCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCopyVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////ParentFeature ;
		//FTCommand:
		//	IdentifierExpr | CopyVariable | FeatureOperation;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | CopyVariable | FeatureOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//CopyVariable
		public RuleCall getCopyVariableParserRuleCall_1() { return cCopyVariableParserRuleCall_1; }

		//FeatureOperation
		public RuleCall getFeatureOperationParserRuleCall_2() { return cFeatureOperationParserRuleCall_2; }
	}

	public class BCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsEmptySetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemoveVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRemoveFeatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRenameFeatureParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInsertParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cModifyVOperatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIsConflictingParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCompleteConfigurationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetBelongsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//BCommand:
		//	IdentifierExpr | IsEmptySet | RemoveVariable | RemoveFeature | RenameFeature | Insert | ModifyVOperator |
		//	IsConflicting | CompleteConfiguration | SetBelongs;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | IsEmptySet | RemoveVariable | RemoveFeature | RenameFeature | Insert | ModifyVOperator | IsConflicting
		//| CompleteConfiguration | SetBelongs
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//IsEmptySet
		public RuleCall getIsEmptySetParserRuleCall_1() { return cIsEmptySetParserRuleCall_1; }

		//RemoveVariable
		public RuleCall getRemoveVariableParserRuleCall_2() { return cRemoveVariableParserRuleCall_2; }

		//RemoveFeature
		public RuleCall getRemoveFeatureParserRuleCall_3() { return cRemoveFeatureParserRuleCall_3; }

		//RenameFeature
		public RuleCall getRenameFeatureParserRuleCall_4() { return cRenameFeatureParserRuleCall_4; }

		//Insert
		public RuleCall getInsertParserRuleCall_5() { return cInsertParserRuleCall_5; }

		//ModifyVOperator
		public RuleCall getModifyVOperatorParserRuleCall_6() { return cModifyVOperatorParserRuleCall_6; }

		//IsConflicting
		public RuleCall getIsConflictingParserRuleCall_7() { return cIsConflictingParserRuleCall_7; }

		//CompleteConfiguration
		public RuleCall getCompleteConfigurationParserRuleCall_8() { return cCompleteConfigurationParserRuleCall_8; }

		//SetBelongs
		public RuleCall getSetBelongsParserRuleCall_9() { return cSetBelongsParserRuleCall_9; }
	}

	public class StrCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCopyVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringConcatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringInitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringSubstringParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFeatureOperationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cConvertParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////FeatureOperation for NameFeature
		//StrCommand:
		//	IdentifierExpr | CopyVariable | StringExpr | StringConcat | StringInit | StringSubstring | FeatureOperation | Convert;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | CopyVariable | StringExpr | StringConcat | StringInit | StringSubstring | FeatureOperation | Convert
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//CopyVariable
		public RuleCall getCopyVariableParserRuleCall_1() { return cCopyVariableParserRuleCall_1; }

		//StringExpr
		public RuleCall getStringExprParserRuleCall_2() { return cStringExprParserRuleCall_2; }

		//StringConcat
		public RuleCall getStringConcatParserRuleCall_3() { return cStringConcatParserRuleCall_3; }

		//StringInit
		public RuleCall getStringInitParserRuleCall_4() { return cStringInitParserRuleCall_4; }

		//StringSubstring
		public RuleCall getStringSubstringParserRuleCall_5() { return cStringSubstringParserRuleCall_5; }

		//FeatureOperation
		public RuleCall getFeatureOperationParserRuleCall_6() { return cFeatureOperationParserRuleCall_6; }

		//Convert
		public RuleCall getConvertParserRuleCall_7() { return cConvertParserRuleCall_7; }
	}

	public class ConfigurationCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateConfigurationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////| LEFT_PAREN ConfigurationCommand RIGHT_PAREN
		//ConfigurationCommand:
		//	IdentifierExpr | CreateConfiguration;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | CreateConfiguration
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//CreateConfiguration
		public RuleCall getCreateConfigurationParserRuleCall_1() { return cCreateConfigurationParserRuleCall_1; }
	}

	public class SetCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCliquesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCoresParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeadsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFullMandatorysParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSetToNamesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSetUnionOrIntersectionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLeavesParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSetEmptyParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSelectedConfigurationParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDeselectedConfigurationParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cConstraintExprParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cGetConstraintsParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cComputeConstraintsParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cGetFGroupsParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cComputeFGroupsParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cPairwiseCommandParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		
		//SetCommand:
		//	IdentifierExpr // TODO: AnalysisOperation due to 'features'
		//	| SetExpr | FeatureOperation | Cliques | Cores | Deads | FullMandatorys | SetToNames | SetUnionOrIntersection | Leaves
		//	| SetEmpty | SelectedConfiguration | DeselectedConfiguration | ConstraintExpr | GetConstraints | ComputeConstraints |
		//	GetFGroups | ComputeFGroups | PairwiseCommand;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr // TODO: AnalysisOperation due to 'features'
		//| SetExpr | FeatureOperation | Cliques | Cores | Deads | FullMandatorys | SetToNames | SetUnionOrIntersection | Leaves |
		//SetEmpty | SelectedConfiguration | DeselectedConfiguration | ConstraintExpr | GetConstraints | ComputeConstraints |
		//GetFGroups | ComputeFGroups | PairwiseCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//SetExpr
		public RuleCall getSetExprParserRuleCall_1() { return cSetExprParserRuleCall_1; }

		//FeatureOperation
		public RuleCall getFeatureOperationParserRuleCall_2() { return cFeatureOperationParserRuleCall_2; }

		//Cliques
		public RuleCall getCliquesParserRuleCall_3() { return cCliquesParserRuleCall_3; }

		//Cores
		public RuleCall getCoresParserRuleCall_4() { return cCoresParserRuleCall_4; }

		//Deads
		public RuleCall getDeadsParserRuleCall_5() { return cDeadsParserRuleCall_5; }

		//FullMandatorys
		public RuleCall getFullMandatorysParserRuleCall_6() { return cFullMandatorysParserRuleCall_6; }

		//SetToNames
		public RuleCall getSetToNamesParserRuleCall_7() { return cSetToNamesParserRuleCall_7; }

		//SetUnionOrIntersection
		public RuleCall getSetUnionOrIntersectionParserRuleCall_8() { return cSetUnionOrIntersectionParserRuleCall_8; }

		//Leaves
		public RuleCall getLeavesParserRuleCall_9() { return cLeavesParserRuleCall_9; }

		//SetEmpty
		public RuleCall getSetEmptyParserRuleCall_10() { return cSetEmptyParserRuleCall_10; }

		//SelectedConfiguration
		public RuleCall getSelectedConfigurationParserRuleCall_11() { return cSelectedConfigurationParserRuleCall_11; }

		//DeselectedConfiguration
		public RuleCall getDeselectedConfigurationParserRuleCall_12() { return cDeselectedConfigurationParserRuleCall_12; }

		//ConstraintExpr
		public RuleCall getConstraintExprParserRuleCall_13() { return cConstraintExprParserRuleCall_13; }

		//GetConstraints
		public RuleCall getGetConstraintsParserRuleCall_14() { return cGetConstraintsParserRuleCall_14; }

		//ComputeConstraints
		public RuleCall getComputeConstraintsParserRuleCall_15() { return cComputeConstraintsParserRuleCall_15; }

		//GetFGroups
		public RuleCall getGetFGroupsParserRuleCall_16() { return cGetFGroupsParserRuleCall_16; }

		//ComputeFGroups
		public RuleCall getComputeFGroupsParserRuleCall_17() { return cComputeFGroupsParserRuleCall_17; }

		//PairwiseCommand
		public RuleCall getPairwiseCommandParserRuleCall_18() { return cPairwiseCommandParserRuleCall_18; }
	}

	public class LeavesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Leaves");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeavesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//// return the set of leaves in the feature hierarchy 
		//Leaves:
		//	"leaves" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"leaves" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"leaves"
		public Keyword getLeavesKeyword_0() { return cLeavesKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class ConstraintCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicConstraintExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintCommand:
		//	IdentifierExpr | AtomicConstraintExpr;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | AtomicConstraintExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//AtomicConstraintExpr
		public RuleCall getAtomicConstraintExprParserRuleCall_1() { return cAtomicConstraintExprParserRuleCall_1; }
	}

	public class GetConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetConstraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindOfGetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindOfGetKindOfGetEnumRuleCall_0_0 = (RuleCall)cKindOfGetAssignment_0.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//GetConstraints:
		//	kindOfGet=KindOfGet fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//kindOfGet=KindOfGet fm=FMCommand
		public Group getGroup() { return cGroup; }

		//kindOfGet=KindOfGet
		public Assignment getKindOfGetAssignment_0() { return cKindOfGetAssignment_0; }

		//KindOfGet
		public RuleCall getKindOfGetKindOfGetEnumRuleCall_0_0() { return cKindOfGetKindOfGetEnumRuleCall_0_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class ComputeConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputeConstraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindOfComputeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindOfComputeKindOfComputeEnumRuleCall_0_0 = (RuleCall)cKindOfComputeAssignment_0.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOverAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOverOverKeyword_2_0_0 = (Keyword)cOverAssignment_2_0.eContents().get(0);
		private final Assignment cFtsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFtsSetCommandParserRuleCall_2_1_0 = (RuleCall)cFtsAssignment_2_1.eContents().get(0);
		
		//ComputeConstraints:
		//	kindOfCompute=KindOfCompute fm=FMCommand (over?="over" fts=SetCommand)?;
		public ParserRule getRule() { return rule; }

		//kindOfCompute=KindOfCompute fm=FMCommand (over?="over" fts=SetCommand)?
		public Group getGroup() { return cGroup; }

		//kindOfCompute=KindOfCompute
		public Assignment getKindOfComputeAssignment_0() { return cKindOfComputeAssignment_0; }

		//KindOfCompute
		public RuleCall getKindOfComputeKindOfComputeEnumRuleCall_0_0() { return cKindOfComputeKindOfComputeEnumRuleCall_0_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }

		//(over?="over" fts=SetCommand)?
		public Group getGroup_2() { return cGroup_2; }

		//over?="over"
		public Assignment getOverAssignment_2_0() { return cOverAssignment_2_0; }

		//"over"
		public Keyword getOverOverKeyword_2_0_0() { return cOverOverKeyword_2_0_0; }

		//fts=SetCommand
		public Assignment getFtsAssignment_2_1() { return cFtsAssignment_2_1; }

		//SetCommand
		public RuleCall getFtsSetCommandParserRuleCall_2_1_0() { return cFtsSetCommandParserRuleCall_2_1_0; }
	}

	public class GetFGroupsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetFGroups");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindOfGroupsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindOfGroupsKindOfGetGroupsEnumRuleCall_0_0 = (RuleCall)cKindOfGroupsAssignment_0.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//GetFGroups:
		//	kindOfGroups=KindOfGetGroups fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//kindOfGroups=KindOfGetGroups fm=FMCommand
		public Group getGroup() { return cGroup; }

		//kindOfGroups=KindOfGetGroups
		public Assignment getKindOfGroupsAssignment_0() { return cKindOfGroupsAssignment_0; }

		//KindOfGetGroups
		public RuleCall getKindOfGroupsKindOfGetGroupsEnumRuleCall_0_0() { return cKindOfGroupsKindOfGetGroupsEnumRuleCall_0_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class ComputeFGroupsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputeFGroups");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindOfGroupsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindOfGroupsKindOfComputeGroupsEnumRuleCall_0_0 = (RuleCall)cKindOfGroupsAssignment_0.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//ComputeFGroups:
		//	kindOfGroups=KindOfComputeGroups fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//kindOfGroups=KindOfComputeGroups fm=FMCommand
		public Group getGroup() { return cGroup; }

		//kindOfGroups=KindOfComputeGroups
		public Assignment getKindOfGroupsAssignment_0() { return cKindOfGroupsAssignment_0; }

		//KindOfComputeGroups
		public RuleCall getKindOfGroupsKindOfComputeGroupsEnumRuleCall_0_0() { return cKindOfGroupsKindOfComputeGroupsEnumRuleCall_0_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class PairwiseCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PairwiseCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPwKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinimizationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinimizationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinimizationIntegerCommandParserRuleCall_2_1_0 = (RuleCall)cMinimizationAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPartialKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPartialAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPartialIntegerCommandParserRuleCall_3_1_0 = (RuleCall)cPartialAssignment_3_1.eContents().get(0);
		
		//PairwiseCommand:
		//	"pw" fm=FMCommand ("minimization=" minimization=IntegerCommand)? ("partial=" partial=IntegerCommand)?;
		public ParserRule getRule() { return rule; }

		//"pw" fm=FMCommand ("minimization=" minimization=IntegerCommand)? ("partial=" partial=IntegerCommand)?
		public Group getGroup() { return cGroup; }

		//"pw"
		public Keyword getPwKeyword_0() { return cPwKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }

		//("minimization=" minimization=IntegerCommand)?
		public Group getGroup_2() { return cGroup_2; }

		//"minimization="
		public Keyword getMinimizationKeyword_2_0() { return cMinimizationKeyword_2_0; }

		//minimization=IntegerCommand
		public Assignment getMinimizationAssignment_2_1() { return cMinimizationAssignment_2_1; }

		//IntegerCommand
		public RuleCall getMinimizationIntegerCommandParserRuleCall_2_1_0() { return cMinimizationIntegerCommandParserRuleCall_2_1_0; }

		//("partial=" partial=IntegerCommand)?
		public Group getGroup_3() { return cGroup_3; }

		//"partial="
		public Keyword getPartialKeyword_3_0() { return cPartialKeyword_3_0; }

		//partial=IntegerCommand
		public Assignment getPartialAssignment_3_1() { return cPartialAssignment_3_1; }

		//IntegerCommand
		public RuleCall getPartialIntegerCommandParserRuleCall_3_1_0() { return cPartialIntegerCommandParserRuleCall_3_1_0; }
	}

	public class IntegerCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetCardParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLengthParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringIndexOfParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoubleCommandParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// weird for double command
		//IntegerCommand:
		//	IdentifierExpr | IntegerExpr | SetCard | StringLength | StringIndexOf | DoubleCommand;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | IntegerExpr | SetCard | StringLength | StringIndexOf | DoubleCommand
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//IntegerExpr
		public RuleCall getIntegerExprParserRuleCall_1() { return cIntegerExprParserRuleCall_1; }

		//SetCard
		public RuleCall getSetCardParserRuleCall_2() { return cSetCardParserRuleCall_2; }

		//StringLength
		public RuleCall getStringLengthParserRuleCall_3() { return cStringLengthParserRuleCall_3; }

		//StringIndexOf
		public RuleCall getStringIndexOfParserRuleCall_4() { return cStringIndexOfParserRuleCall_4; }

		//DoubleCommand
		public RuleCall getDoubleCommandParserRuleCall_5() { return cDoubleCommandParserRuleCall_5; }
	}

	public class DoubleCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleCommand");
		private final RuleCall cCTCRCommandParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DoubleCommand:
		//	CTCRCommand;
		public ParserRule getRule() { return rule; }

		//CTCRCommand
		public RuleCall getCTCRCommandParserRuleCall() { return cCTCRCommandParserRuleCall; }
	}

	public class VariabilityOpCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariabilityOpCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCopyVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureVariabilityOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// TODO (urgent)
		////ConstraintCommand : IdentifierExpr | CopyVariable | AtomicConstraintExpr ; 
		////SetCNF : (LEFT_BRACKET (constraints+=CNF)+ RIGHT_BRACKET) | UnMap  ;
		//VariabilityOpCommand:
		//	IdentifierExpr | CopyVariable | FeatureVariabilityOperator;
		public ParserRule getRule() { return rule; }

		//IdentifierExpr | CopyVariable | FeatureVariabilityOperator
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdentifierExpr
		public RuleCall getIdentifierExprParserRuleCall_0() { return cIdentifierExprParserRuleCall_0; }

		//CopyVariable
		public RuleCall getCopyVariableParserRuleCall_1() { return cCopyVariableParserRuleCall_1; }

		//FeatureVariabilityOperator
		public RuleCall getFeatureVariabilityOperatorParserRuleCall_2() { return cFeatureVariabilityOperatorParserRuleCall_2; }
	}

	public class AnalysisOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnalysisOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpIsValidKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpCountingKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpConfigsKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Keyword cOpNbFeaturesKeyword_0_0_3 = (Keyword)cOpAlternatives_0_0.eContents().get(3);
		private final Keyword cOpRootKeyword_0_0_4 = (Keyword)cOpAlternatives_0_0.eContents().get(4);
		private final Keyword cOpFeaturesKeyword_0_0_5 = (Keyword)cOpAlternatives_0_0.eContents().get(5);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFmAlternatives_1_0 = (Alternatives)cFmAssignment_1.eContents().get(0);
		private final RuleCall cFmFMCommandParserRuleCall_1_0_0 = (RuleCall)cFmAlternatives_1_0.eContents().get(0);
		private final RuleCall cFmConfigurationCommandParserRuleCall_1_0_1 = (RuleCall)cFmAlternatives_1_0.eContents().get(1);
		
		//AnalysisOperation:
		//	op= // validity of a FM
		//	("isValid" | // number of products of a FM
		//	"counting" | // set of products of a FM
		//	"configs" | // number of features
		//	"nbFeatures" | // return the root feature of the fm
		//	"root" | // return the set of features
		//	"features") fm=(FMCommand | ConfigurationCommand);
		public ParserRule getRule() { return rule; }

		//op= // validity of a FM
		//("isValid" | // number of products of a FM
		//"counting" | // set of products of a FM
		//"configs" | // number of features
		//"nbFeatures" | // return the root feature of the fm
		//"root" | // return the set of features
		//"features") fm=(FMCommand | ConfigurationCommand)
		public Group getGroup() { return cGroup; }

		//op= // validity of a FM
		//("isValid" | // number of products of a FM
		//"counting" | // set of products of a FM
		//"configs" | // number of features
		//"nbFeatures" | // return the root feature of the fm
		//"root" | // return the set of features
		//"features")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//// validity of a FM
		//"isValid" | // number of products of a FM
		//"counting" | // set of products of a FM
		//"configs" | // number of features
		//"nbFeatures" | // return the root feature of the fm
		//"root" | // return the set of features
		//"features"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//// validity of a FM
		//"isValid"
		public Keyword getOpIsValidKeyword_0_0_0() { return cOpIsValidKeyword_0_0_0; }

		//// number of products of a FM
		//"counting"
		public Keyword getOpCountingKeyword_0_0_1() { return cOpCountingKeyword_0_0_1; }

		//// set of products of a FM
		//"configs"
		public Keyword getOpConfigsKeyword_0_0_2() { return cOpConfigsKeyword_0_0_2; }

		//// number of features
		//"nbFeatures"
		public Keyword getOpNbFeaturesKeyword_0_0_3() { return cOpNbFeaturesKeyword_0_0_3; }

		//// return the root feature of the fm
		//"root"
		public Keyword getOpRootKeyword_0_0_4() { return cOpRootKeyword_0_0_4; }

		//// return the set of features
		//"features"
		public Keyword getOpFeaturesKeyword_0_0_5() { return cOpFeaturesKeyword_0_0_5; }

		//fm=(FMCommand | ConfigurationCommand)
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand | ConfigurationCommand
		public Alternatives getFmAlternatives_1_0() { return cFmAlternatives_1_0; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0_0() { return cFmFMCommandParserRuleCall_1_0_0; }

		//ConfigurationCommand
		public RuleCall getFmConfigurationCommandParserRuleCall_1_0_1() { return cFmConfigurationCommandParserRuleCall_1_0_1; }
	}

	public class SetOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetCardParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetToNamesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetBelongsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetUnionOrIntersectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSetEmptyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSetAddOrRemoveParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIsEmptySetParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SetOperations:
		//	SetCard | SetToNames | SetBelongs | SetUnionOrIntersection | SetEmpty | SetAddOrRemove | IsEmptySet;
		public ParserRule getRule() { return rule; }

		//SetCard | SetToNames | SetBelongs | SetUnionOrIntersection | SetEmpty | SetAddOrRemove | IsEmptySet
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetCard
		public RuleCall getSetCardParserRuleCall_0() { return cSetCardParserRuleCall_0; }

		//SetToNames
		public RuleCall getSetToNamesParserRuleCall_1() { return cSetToNamesParserRuleCall_1; }

		//SetBelongs
		public RuleCall getSetBelongsParserRuleCall_2() { return cSetBelongsParserRuleCall_2; }

		//SetUnionOrIntersection
		public RuleCall getSetUnionOrIntersectionParserRuleCall_3() { return cSetUnionOrIntersectionParserRuleCall_3; }

		//SetEmpty
		public RuleCall getSetEmptyParserRuleCall_4() { return cSetEmptyParserRuleCall_4; }

		//SetAddOrRemove
		public RuleCall getSetAddOrRemoveParserRuleCall_5() { return cSetAddOrRemoveParserRuleCall_5; }

		//IsEmptySet
		public RuleCall getIsEmptySetParserRuleCall_6() { return cIsEmptySetParserRuleCall_6; }
	}

	public class SetCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetSetCommandParserRuleCall_1_0 = (RuleCall)cSetAssignment_1.eContents().get(0);
		
		////TODO: @deprecated 'set_card'
		//SetCard:
		//	"size" set=SetCommand;
		public ParserRule getRule() { return rule; }

		//"size" set=SetCommand
		public Group getGroup() { return cGroup; }

		//"size"
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }

		//set=SetCommand
		public Assignment getSetAssignment_1() { return cSetAssignment_1; }

		//SetCommand
		public RuleCall getSetSetCommandParserRuleCall_1_0() { return cSetSetCommandParserRuleCall_1_0; }
	}

	public class SetBelongsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetBelongs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetBelongsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetlFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cSetlAssignment_1.eContents().get(0);
		private final Assignment cSetrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetrFML_IDENTIFIERParserRuleCall_2_0 = (RuleCall)cSetrAssignment_2.eContents().get(0);
		
		//SetBelongs:
		//	"setBelongs" setl=FML_IDENTIFIER setr=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//"setBelongs" setl=FML_IDENTIFIER setr=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//"setBelongs"
		public Keyword getSetBelongsKeyword_0() { return cSetBelongsKeyword_0; }

		//setl=FML_IDENTIFIER
		public Assignment getSetlAssignment_1() { return cSetlAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getSetlFML_IDENTIFIERParserRuleCall_1_0() { return cSetlFML_IDENTIFIERParserRuleCall_1_0; }

		//setr=FML_IDENTIFIER
		public Assignment getSetrAssignment_2() { return cSetrAssignment_2; }

		//FML_IDENTIFIER
		public RuleCall getSetrFML_IDENTIFIERParserRuleCall_2_0() { return cSetrFML_IDENTIFIERParserRuleCall_2_0; }
	}

	public class SetUnionOrIntersectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetUnionOrIntersection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpSetUnionKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpSetIntersectionKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpSetDiffKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Assignment cSetlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetlSetCommandParserRuleCall_1_0 = (RuleCall)cSetlAssignment_1.eContents().get(0);
		private final Assignment cSetrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetrSetCommandParserRuleCall_2_0 = (RuleCall)cSetrAssignment_2.eContents().get(0);
		
		//SetUnionOrIntersection:
		//	op=("setUnion" | "setIntersection" | "setDiff") setl=SetCommand setr=SetCommand;
		public ParserRule getRule() { return rule; }

		//op=("setUnion" | "setIntersection" | "setDiff") setl=SetCommand setr=SetCommand
		public Group getGroup() { return cGroup; }

		//op=("setUnion" | "setIntersection" | "setDiff")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"setUnion" | "setIntersection" | "setDiff"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"setUnion"
		public Keyword getOpSetUnionKeyword_0_0_0() { return cOpSetUnionKeyword_0_0_0; }

		//"setIntersection"
		public Keyword getOpSetIntersectionKeyword_0_0_1() { return cOpSetIntersectionKeyword_0_0_1; }

		//"setDiff"
		public Keyword getOpSetDiffKeyword_0_0_2() { return cOpSetDiffKeyword_0_0_2; }

		//setl=SetCommand
		public Assignment getSetlAssignment_1() { return cSetlAssignment_1; }

		//SetCommand
		public RuleCall getSetlSetCommandParserRuleCall_1_0() { return cSetlSetCommandParserRuleCall_1_0; }

		//setr=SetCommand
		public Assignment getSetrAssignment_2() { return cSetrAssignment_2; }

		//SetCommand
		public RuleCall getSetrSetCommandParserRuleCall_2_0() { return cSetrSetCommandParserRuleCall_2_0; }
	}

	public class SetEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetEmpty");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValSetEmptyKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//SetEmpty:
		//	val="setEmpty";
		public ParserRule getRule() { return rule; }

		//val="setEmpty"
		public Assignment getValAssignment() { return cValAssignment; }

		//"setEmpty"
		public Keyword getValSetEmptyKeyword_0() { return cValSetEmptyKeyword_0; }
	}

	public class SetAddOrRemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetAddOrRemove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpSetAddKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpSetRemoveKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Assignment cSetlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetlSetCommandParserRuleCall_1_0 = (RuleCall)cSetlAssignment_1.eContents().get(0);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarCommandParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		
		//SetAddOrRemove:
		//	op=("setAdd" | "setRemove") setl=SetCommand var=Command;
		public ParserRule getRule() { return rule; }

		//op=("setAdd" | "setRemove") setl=SetCommand var=Command
		public Group getGroup() { return cGroup; }

		//op=("setAdd" | "setRemove")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"setAdd" | "setRemove"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"setAdd"
		public Keyword getOpSetAddKeyword_0_0_0() { return cOpSetAddKeyword_0_0_0; }

		//"setRemove"
		public Keyword getOpSetRemoveKeyword_0_0_1() { return cOpSetRemoveKeyword_0_0_1; }

		//setl=SetCommand
		public Assignment getSetlAssignment_1() { return cSetlAssignment_1; }

		//SetCommand
		public RuleCall getSetlSetCommandParserRuleCall_1_0() { return cSetlSetCommandParserRuleCall_1_0; }

		//var=Command
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//Command
		public RuleCall getVarCommandParserRuleCall_2_0() { return cVarCommandParserRuleCall_2_0; }
	}

	public class IsEmptySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsEmptySet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetIsEmptyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetSetCommandParserRuleCall_1_0 = (RuleCall)cSetAssignment_1.eContents().get(0);
		
		//IsEmptySet:
		//	"setIsEmpty" set=SetCommand;
		public ParserRule getRule() { return rule; }

		//"setIsEmpty" set=SetCommand
		public Group getGroup() { return cGroup; }

		//"setIsEmpty"
		public Keyword getSetIsEmptyKeyword_0() { return cSetIsEmptyKeyword_0; }

		//set=SetCommand
		public Assignment getSetAssignment_1() { return cSetAssignment_1; }

		//SetCommand
		public RuleCall getSetSetCommandParserRuleCall_1_0() { return cSetSetCommandParserRuleCall_1_0; }
	}

	public class SetToNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetToNames");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetSetCommandParserRuleCall_1_0 = (RuleCall)cSetAssignment_1.eContents().get(0);
		
		//SetToNames:
		//	"names" set=SetCommand;
		public ParserRule getRule() { return rule; }

		//"names" set=SetCommand
		public Group getGroup() { return cGroup; }

		//"names"
		public Keyword getNamesKeyword_0() { return cNamesKeyword_0; }

		//set=SetCommand
		public Assignment getSetAssignment_1() { return cSetAssignment_1; }

		//SetCommand
		public RuleCall getSetSetCommandParserRuleCall_1_0() { return cSetSetCommandParserRuleCall_1_0; }
	}

	public class FeatureOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final RuleCall cOpAncestorFeatureParserRuleCall_0_0_0 = (RuleCall)cOpAlternatives_0_0.eContents().get(0);
		private final RuleCall cOpDescendantFeatureParserRuleCall_0_0_1 = (RuleCall)cOpAlternatives_0_0.eContents().get(1);
		private final RuleCall cOpChildrenFeatureParserRuleCall_0_0_2 = (RuleCall)cOpAlternatives_0_0.eContents().get(2);
		private final RuleCall cOpSiblingFeatureParserRuleCall_0_0_3 = (RuleCall)cOpAlternatives_0_0.eContents().get(3);
		private final RuleCall cOpParentFeatureParserRuleCall_0_0_4 = (RuleCall)cOpAlternatives_0_0.eContents().get(4);
		private final RuleCall cOpNameFeatureParserRuleCall_0_0_5 = (RuleCall)cOpAlternatives_0_0.eContents().get(5);
		private final RuleCall cOpFMFeatureParserRuleCall_0_0_6 = (RuleCall)cOpAlternatives_0_0.eContents().get(6);
		private final RuleCall cOpFeatureOperatorParserRuleCall_0_0_7 = (RuleCall)cOpAlternatives_0_0.eContents().get(7);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureFTCommandParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		/// ********* ACCESSORS *********** / // + root (see below)
		//FeatureOperation:
		//	op=(AncestorFeature | DescendantFeature | ChildrenFeature | SiblingFeature | ParentFeature | NameFeature | FMFeature |
		//	FeatureOperator) feature=FTCommand;
		public ParserRule getRule() { return rule; }

		//op=(AncestorFeature | DescendantFeature | ChildrenFeature | SiblingFeature | ParentFeature | NameFeature | FMFeature |
		//FeatureOperator) feature=FTCommand
		public Group getGroup() { return cGroup; }

		//op=(AncestorFeature | DescendantFeature | ChildrenFeature | SiblingFeature | ParentFeature | NameFeature | FMFeature |
		//FeatureOperator)
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//AncestorFeature | DescendantFeature | ChildrenFeature | SiblingFeature | ParentFeature | NameFeature | FMFeature |
		//FeatureOperator
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//AncestorFeature
		public RuleCall getOpAncestorFeatureParserRuleCall_0_0_0() { return cOpAncestorFeatureParserRuleCall_0_0_0; }

		//DescendantFeature
		public RuleCall getOpDescendantFeatureParserRuleCall_0_0_1() { return cOpDescendantFeatureParserRuleCall_0_0_1; }

		//ChildrenFeature
		public RuleCall getOpChildrenFeatureParserRuleCall_0_0_2() { return cOpChildrenFeatureParserRuleCall_0_0_2; }

		//SiblingFeature
		public RuleCall getOpSiblingFeatureParserRuleCall_0_0_3() { return cOpSiblingFeatureParserRuleCall_0_0_3; }

		//ParentFeature
		public RuleCall getOpParentFeatureParserRuleCall_0_0_4() { return cOpParentFeatureParserRuleCall_0_0_4; }

		//NameFeature
		public RuleCall getOpNameFeatureParserRuleCall_0_0_5() { return cOpNameFeatureParserRuleCall_0_0_5; }

		//FMFeature
		public RuleCall getOpFMFeatureParserRuleCall_0_0_6() { return cOpFMFeatureParserRuleCall_0_0_6; }

		//FeatureOperator
		public RuleCall getOpFeatureOperatorParserRuleCall_0_0_7() { return cOpFeatureOperatorParserRuleCall_0_0_7; }

		//feature=FTCommand
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//FTCommand
		public RuleCall getFeatureFTCommandParserRuleCall_1_0() { return cFeatureFTCommandParserRuleCall_1_0; }
	}

	public class AncestorFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AncestorFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValAncestorsKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//AncestorFeature:
		//	val="ancestors";
		public ParserRule getRule() { return rule; }

		//val="ancestors"
		public Assignment getValAssignment() { return cValAssignment; }

		//"ancestors"
		public Keyword getValAncestorsKeyword_0() { return cValAncestorsKeyword_0; }
	}

	public class DescendantFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescendantFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValDescendantsKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//DescendantFeature:
		//	val="descendants";
		public ParserRule getRule() { return rule; }

		//val="descendants"
		public Assignment getValAssignment() { return cValAssignment; }

		//"descendants"
		public Keyword getValDescendantsKeyword_0() { return cValDescendantsKeyword_0; }
	}

	public class ChildrenFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChildrenFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValChildrenKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//// children: Set[Feature]
		//ChildrenFeature:
		//	val="children";
		public ParserRule getRule() { return rule; }

		//val="children"
		public Assignment getValAssignment() { return cValAssignment; }

		//"children"
		public Keyword getValChildrenKeyword_0() { return cValChildrenKeyword_0; }
	}

	public class SiblingFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SiblingFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValSiblingKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//// sibling: Set[Feature]
		//SiblingFeature:
		//	val="sibling";
		public ParserRule getRule() { return rule; }

		//val="sibling"
		public Assignment getValAssignment() { return cValAssignment; }

		//"sibling"
		public Keyword getValSiblingKeyword_0() { return cValSiblingKeyword_0; }
	}

	public class ParentFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParentFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValParentKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//// parent: Feature
		//ParentFeature:
		//	val="parent";
		public ParserRule getRule() { return rule; }

		//val="parent"
		public Assignment getValAssignment() { return cValAssignment; }

		//"parent"
		public Keyword getValParentKeyword_0() { return cValParentKeyword_0; }
	}

	public class NameFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValNameKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//// name: String
		//NameFeature:
		//	val="name";
		public ParserRule getRule() { return rule; }

		//val="name"
		public Assignment getValAssignment() { return cValAssignment; }

		//"name"
		public Keyword getValNameKeyword_0() { return cValNameKeyword_0; }
	}

	public class FMFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FMFeature");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValWhichfmKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//// whichfm : FM
		//FMFeature:
		//	val="whichfm";
		public ParserRule getRule() { return rule; }

		//val="whichfm"
		public Assignment getValAssignment() { return cValAssignment; }

		//"whichfm"
		public Keyword getValWhichfmKeyword_0() { return cValWhichfmKeyword_0; }
	}

	public class FeatureOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOperator");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValOperatorKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//// operator: enum {AND, XOR, OR, ANDOPT}
		//FeatureOperator:
		//	val="operator";
		public ParserRule getRule() { return rule; }

		//val="operator"
		public Assignment getValAssignment() { return cValAssignment; }

		//"operator"
		public Keyword getValOperatorKeyword_0() { return cValOperatorKeyword_0; }
	}

	public class StringOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringInitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringConcatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringSubstringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringIndexOfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLengthParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//StringOperation:
		//	StringInit | StringConcat | StringSubstring | StringIndexOf | StringLength;
		public ParserRule getRule() { return rule; }

		//StringInit | StringConcat | StringSubstring | StringIndexOf | StringLength
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringInit
		public RuleCall getStringInitParserRuleCall_0() { return cStringInitParserRuleCall_0; }

		//StringConcat
		public RuleCall getStringConcatParserRuleCall_1() { return cStringConcatParserRuleCall_1; }

		//StringSubstring
		public RuleCall getStringSubstringParserRuleCall_2() { return cStringSubstringParserRuleCall_2; }

		//StringIndexOf
		public RuleCall getStringIndexOfParserRuleCall_3() { return cStringIndexOfParserRuleCall_3; }

		//StringLength
		public RuleCall getStringLengthParserRuleCall_4() { return cStringLengthParserRuleCall_4; }
	}

	public class StringInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringInit");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValStrInitKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//StringInit:
		//	val="strInit";
		public ParserRule getRule() { return rule; }

		//val="strInit"
		public Assignment getValAssignment() { return cValAssignment; }

		//"strInit"
		public Keyword getValStrInitKeyword_0() { return cValStrInitKeyword_0; }
	}

	public class StringConcatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConcat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrConcatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLstrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLstrStrCommandParserRuleCall_1_0 = (RuleCall)cLstrAssignment_1.eContents().get(0);
		private final Assignment cRstrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRstrStrCommandParserRuleCall_2_0 = (RuleCall)cRstrAssignment_2.eContents().get(0);
		
		//// a variable or a string literal
		//StringConcat:
		//	"strConcat" lstr=StrCommand rstr=StrCommand;
		public ParserRule getRule() { return rule; }

		//"strConcat" lstr=StrCommand rstr=StrCommand
		public Group getGroup() { return cGroup; }

		//"strConcat"
		public Keyword getStrConcatKeyword_0() { return cStrConcatKeyword_0; }

		//lstr=StrCommand
		public Assignment getLstrAssignment_1() { return cLstrAssignment_1; }

		//StrCommand
		public RuleCall getLstrStrCommandParserRuleCall_1_0() { return cLstrStrCommandParserRuleCall_1_0; }

		//rstr=StrCommand
		public Assignment getRstrAssignment_2() { return cRstrAssignment_2; }

		//StrCommand
		public RuleCall getRstrStrCommandParserRuleCall_2_0() { return cRstrStrCommandParserRuleCall_2_0; }
	}

	public class StringSubstringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringSubstring");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrSubstringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStrStrCommandParserRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		private final Assignment cBeginAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBeginIntegerCommandParserRuleCall_2_0 = (RuleCall)cBeginAssignment_2.eContents().get(0);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndIntegerCommandParserRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//StringSubstring:
		//	"strSubstring" str=StrCommand begin=IntegerCommand end=IntegerCommand;
		public ParserRule getRule() { return rule; }

		//"strSubstring" str=StrCommand begin=IntegerCommand end=IntegerCommand
		public Group getGroup() { return cGroup; }

		//"strSubstring"
		public Keyword getStrSubstringKeyword_0() { return cStrSubstringKeyword_0; }

		//str=StrCommand
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }

		//StrCommand
		public RuleCall getStrStrCommandParserRuleCall_1_0() { return cStrStrCommandParserRuleCall_1_0; }

		//begin=IntegerCommand
		public Assignment getBeginAssignment_2() { return cBeginAssignment_2; }

		//IntegerCommand
		public RuleCall getBeginIntegerCommandParserRuleCall_2_0() { return cBeginIntegerCommandParserRuleCall_2_0; }

		//end=IntegerCommand
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }

		//IntegerCommand
		public RuleCall getEndIntegerCommandParserRuleCall_3_0() { return cEndIntegerCommandParserRuleCall_3_0; }
	}

	public class StringIndexOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringIndexOf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrIndexOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStrStrCommandParserRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		private final Assignment cScharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScharStrCommandParserRuleCall_2_0 = (RuleCall)cScharAssignment_2.eContents().get(0);
		
		//// char type?
		//StringIndexOf:
		//	"strIndexOf" str=StrCommand schar=StrCommand;
		public ParserRule getRule() { return rule; }

		//"strIndexOf" str=StrCommand schar=StrCommand
		public Group getGroup() { return cGroup; }

		//"strIndexOf"
		public Keyword getStrIndexOfKeyword_0() { return cStrIndexOfKeyword_0; }

		//str=StrCommand
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }

		//StrCommand
		public RuleCall getStrStrCommandParserRuleCall_1_0() { return cStrStrCommandParserRuleCall_1_0; }

		//schar=StrCommand
		public Assignment getScharAssignment_2() { return cScharAssignment_2; }

		//StrCommand
		public RuleCall getScharStrCommandParserRuleCall_2_0() { return cScharStrCommandParserRuleCall_2_0; }
	}

	public class StringLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStrStrCommandParserRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		
		//StringLength:
		//	"strLength" str=StrCommand;
		public ParserRule getRule() { return rule; }

		//"strLength" str=StrCommand
		public Group getGroup() { return cGroup; }

		//"strLength"
		public Keyword getStrLengthKeyword_0() { return cStrLengthKeyword_0; }

		//str=StrCommand
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }

		//StrCommand
		public RuleCall getStrStrCommandParserRuleCall_1_0() { return cStrStrCommandParserRuleCall_1_0; }
	}

	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFm_leftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFm_leftFMCommandParserRuleCall_1_0 = (RuleCall)cFm_leftAssignment_1.eContents().get(0);
		private final Assignment cFm_rightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFm_rightFMCommandParserRuleCall_2_0 = (RuleCall)cFm_rightAssignment_2.eContents().get(0);
		
		//// Boolean formula?
		//Compare:
		//	"compare" fm_left=FMCommand fm_right=FMCommand;
		public ParserRule getRule() { return rule; }

		//"compare" fm_left=FMCommand fm_right=FMCommand
		public Group getGroup() { return cGroup; }

		//"compare"
		public Keyword getCompareKeyword_0() { return cCompareKeyword_0; }

		//fm_left=FMCommand
		public Assignment getFm_leftAssignment_1() { return cFm_leftAssignment_1; }

		//FMCommand
		public RuleCall getFm_leftFMCommandParserRuleCall_1_0() { return cFm_leftFMCommandParserRuleCall_1_0; }

		//fm_right=FMCommand
		public Assignment getFm_rightAssignment_2() { return cFm_rightAssignment_2; }

		//FMCommand
		public RuleCall getFm_rightFMCommandParserRuleCall_2_0() { return cFm_rightFMCommandParserRuleCall_2_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTypedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTypedColonKeyword_2_0_0 = (Keyword)cTypedAssignment_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeLTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//Parameter:
		//	"parameter" param=FML_IDENTIFIER (typed=":" type=lType)?;
		public ParserRule getRule() { return rule; }

		//"parameter" param=FML_IDENTIFIER (typed=":" type=lType)?
		public Group getGroup() { return cGroup; }

		//"parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//param=FML_IDENTIFIER
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getParamFML_IDENTIFIERParserRuleCall_1_0() { return cParamFML_IDENTIFIERParserRuleCall_1_0; }

		//(typed=":" type=lType)?
		public Group getGroup_2() { return cGroup_2; }

		//typed=":"
		public Assignment getTypedAssignment_2_0() { return cTypedAssignment_2_0; }

		//":"
		public Keyword getTypedColonKeyword_2_0_0() { return cTypedColonKeyword_2_0_0; }

		//type=lType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//lType
		public RuleCall getTypeLTypeParserRuleCall_2_1_0() { return cTypeLTypeParserRuleCall_2_1_0; }
	}

	public class LoadGenericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoadGeneric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStreamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStreamAlternatives_1_0 = (Alternatives)cStreamAssignment_1.eContents().get(0);
		private final RuleCall cStreamSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cStreamAlternatives_1_0.eContents().get(0);
		private final RuleCall cStreamFML_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cStreamAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsFML_IDENTIFIERParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIntoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNsFML_IDENTIFIERParserRuleCall_3_1_0 = (RuleCall)cNsAssignment_3_1.eContents().get(0);
		
		//// TODO: distinguish between string and simple identifier
		//LoadGeneric:
		//	"run" stream=(STRING | FML_IDENTIFIER) (LEFT_BRACKET params+=FML_IDENTIFIER* RIGHT_BRACKET)? ("into"
		//	ns=FML_IDENTIFIER)?;
		public ParserRule getRule() { return rule; }

		//"run" stream=(STRING | FML_IDENTIFIER) (LEFT_BRACKET params+=FML_IDENTIFIER* RIGHT_BRACKET)? ("into" ns=FML_IDENTIFIER)?
		public Group getGroup() { return cGroup; }

		//"run"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }

		//stream=(STRING | FML_IDENTIFIER)
		public Assignment getStreamAssignment_1() { return cStreamAssignment_1; }

		//STRING | FML_IDENTIFIER
		public Alternatives getStreamAlternatives_1_0() { return cStreamAlternatives_1_0; }

		//STRING
		public RuleCall getStreamSTRINGTerminalRuleCall_1_0_0() { return cStreamSTRINGTerminalRuleCall_1_0_0; }

		//FML_IDENTIFIER
		public RuleCall getStreamFML_IDENTIFIERParserRuleCall_1_0_1() { return cStreamFML_IDENTIFIERParserRuleCall_1_0_1; }

		//(LEFT_BRACKET params+=FML_IDENTIFIER* RIGHT_BRACKET)?
		public Group getGroup_2() { return cGroup_2; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2_0() { return cLEFT_BRACKETTerminalRuleCall_2_0; }

		//params+=FML_IDENTIFIER*
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//FML_IDENTIFIER
		public RuleCall getParamsFML_IDENTIFIERParserRuleCall_2_1_0() { return cParamsFML_IDENTIFIERParserRuleCall_2_1_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_2_2() { return cRIGHT_BRACKETTerminalRuleCall_2_2; }

		//("into" ns=FML_IDENTIFIER)?
		public Group getGroup_3() { return cGroup_3; }

		//"into"
		public Keyword getIntoKeyword_3_0() { return cIntoKeyword_3_0; }

		//ns=FML_IDENTIFIER
		public Assignment getNsAssignment_3_1() { return cNsAssignment_3_1; }

		//FML_IDENTIFIER
		public RuleCall getNsFML_IDENTIFIERParserRuleCall_3_1_0() { return cNsFML_IDENTIFIERParserRuleCall_3_1_0; }
	}

	public class CTCRCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CTCRCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCtcrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//CTCRCommand:
		//	"ctcr" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"ctcr" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"ctcr"
		public Keyword getCtcrKeyword_0() { return cCtcrKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class MergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Merge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBackendAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBackendBDDBackendEnumRuleCall_1_0 = (RuleCall)cBackendAssignment_1.eContents().get(0);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeMergeModeEnumRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cLfmsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cLfmsFMCommandParserRuleCall_3_0_1_0 = (RuleCall)cLfmsAssignment_3_0_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final Assignment cFmsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFmsLFMArgsParserRuleCall_3_1_0 = (RuleCall)cFmsAssignment_3_1.eContents().get(0);
		
		/// ****** COMPOSITION OPERATORS *********** / Merge:
		//	"merge" backend=BDDBackend? mode=MergeMode (LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs);
		public ParserRule getRule() { return rule; }

		//"merge" backend=BDDBackend? mode=MergeMode (LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs)
		public Group getGroup() { return cGroup; }

		//"merge"
		public Keyword getMergeKeyword_0() { return cMergeKeyword_0; }

		//backend=BDDBackend?
		public Assignment getBackendAssignment_1() { return cBackendAssignment_1; }

		//BDDBackend
		public RuleCall getBackendBDDBackendEnumRuleCall_1_0() { return cBackendBDDBackendEnumRuleCall_1_0; }

		//mode=MergeMode
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//MergeMode
		public RuleCall getModeMergeModeEnumRuleCall_2_0() { return cModeMergeModeEnumRuleCall_2_0; }

		//LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET
		public Group getGroup_3_0() { return cGroup_3_0; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3_0_0() { return cLEFT_BRACKETTerminalRuleCall_3_0_0; }

		//lfms+=FMCommand+
		public Assignment getLfmsAssignment_3_0_1() { return cLfmsAssignment_3_0_1; }

		//FMCommand
		public RuleCall getLfmsFMCommandParserRuleCall_3_0_1_0() { return cLfmsFMCommandParserRuleCall_3_0_1_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_3_0_2() { return cRIGHT_BRACKETTerminalRuleCall_3_0_2; }

		//fms=LFMArgs
		public Assignment getFmsAssignment_3_1() { return cFmsAssignment_3_1; }

		//LFMArgs
		public RuleCall getFmsLFMArgsParserRuleCall_3_1_0() { return cFmsLFMArgsParserRuleCall_3_1_0; }
	}

	public class LFMArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LFMArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLfmsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLfmsFMCommandParserRuleCall_0_0 = (RuleCall)cLfmsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLfmsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLfmsFMCommandParserRuleCall_1_1_0 = (RuleCall)cLfmsAssignment_1_1.eContents().get(0);
		
		//LFMArgs:
		//	lfms+=FMCommand (COMMA lfms+=FMCommand)*;
		public ParserRule getRule() { return rule; }

		//lfms+=FMCommand (COMMA lfms+=FMCommand)*
		public Group getGroup() { return cGroup; }

		//lfms+=FMCommand
		public Assignment getLfmsAssignment_0() { return cLfmsAssignment_0; }

		//FMCommand
		public RuleCall getLfmsFMCommandParserRuleCall_0_0() { return cLfmsFMCommandParserRuleCall_0_0; }

		//(COMMA lfms+=FMCommand)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//lfms+=FMCommand
		public Assignment getLfmsAssignment_1_1() { return cLfmsAssignment_1_1; }

		//FMCommand
		public RuleCall getLfmsFMCommandParserRuleCall_1_1_0() { return cLfmsFMCommandParserRuleCall_1_1_0; }
	}

	public class AggregateMergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AggregateMerge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAggregateMergeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cHierarchySpecifiedAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cHierarchySpecifiedHierarchyKeyword_1_0_0 = (Keyword)cHierarchySpecifiedAssignment_1_0.eContents().get(0);
		private final Assignment cHierarchyStrategyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHierarchyStrategyHierarchyStrategyEnumRuleCall_1_1_0 = (RuleCall)cHierarchyStrategyAssignment_1_1.eContents().get(0);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeMergeModeEnumRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cLfmsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cLfmsFMCommandParserRuleCall_3_0_1_0 = (RuleCall)cLfmsAssignment_3_0_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final Assignment cFmsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cFmsLFMArgsParserRuleCall_3_1_0 = (RuleCall)cFmsAssignment_3_1.eContents().get(0);
		
		//AggregateMerge:
		//	"aggregateMerge" (hierarchySpecified?="--hierarchy" hierarchyStrategy=HierarchyStrategy)? mode=MergeMode (LEFT_BRACKET
		//	lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs);
		public ParserRule getRule() { return rule; }

		//"aggregateMerge" (hierarchySpecified?="--hierarchy" hierarchyStrategy=HierarchyStrategy)? mode=MergeMode (LEFT_BRACKET
		//lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs)
		public Group getGroup() { return cGroup; }

		//"aggregateMerge"
		public Keyword getAggregateMergeKeyword_0() { return cAggregateMergeKeyword_0; }

		//(hierarchySpecified?="--hierarchy" hierarchyStrategy=HierarchyStrategy)?
		public Group getGroup_1() { return cGroup_1; }

		//hierarchySpecified?="--hierarchy"
		public Assignment getHierarchySpecifiedAssignment_1_0() { return cHierarchySpecifiedAssignment_1_0; }

		//"--hierarchy"
		public Keyword getHierarchySpecifiedHierarchyKeyword_1_0_0() { return cHierarchySpecifiedHierarchyKeyword_1_0_0; }

		//hierarchyStrategy=HierarchyStrategy
		public Assignment getHierarchyStrategyAssignment_1_1() { return cHierarchyStrategyAssignment_1_1; }

		//HierarchyStrategy
		public RuleCall getHierarchyStrategyHierarchyStrategyEnumRuleCall_1_1_0() { return cHierarchyStrategyHierarchyStrategyEnumRuleCall_1_1_0; }

		//mode=MergeMode
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//MergeMode
		public RuleCall getModeMergeModeEnumRuleCall_2_0() { return cModeMergeModeEnumRuleCall_2_0; }

		//LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET
		public Group getGroup_3_0() { return cGroup_3_0; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3_0_0() { return cLEFT_BRACKETTerminalRuleCall_3_0_0; }

		//lfms+=FMCommand+
		public Assignment getLfmsAssignment_3_0_1() { return cLfmsAssignment_3_0_1; }

		//FMCommand
		public RuleCall getLfmsFMCommandParserRuleCall_3_0_1_0() { return cLfmsFMCommandParserRuleCall_3_0_1_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_3_0_2() { return cRIGHT_BRACKETTerminalRuleCall_3_0_2; }

		//fms=LFMArgs
		public Assignment getFmsAssignment_3_1() { return cFmsAssignment_3_1; }

		//LFMArgs
		public RuleCall getFmsLFMArgsParserRuleCall_3_1_0() { return cFmsLFMArgsParserRuleCall_3_1_0; }
	}

	public class SynthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Synthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKsynthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInteractiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInteractiveInteractiveKeyword_1_0 = (Keyword)cInteractiveAssignment_1.eContents().get(0);
		private final Assignment cFmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFmFMCommandParserRuleCall_2_0 = (RuleCall)cFmAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKstAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKstKnowledgeSpecificationParserRuleCall_3_1_0 = (RuleCall)cKstAssignment_3_1.eContents().get(0);
		
		/// *
		// could be ksynthesis fm0 with fm1
		// BUT
		// it is preferable to have a decomposed specification with all parts optional
		// importantly, KST can be specified using accessors of FML
		// * / Synthesis:
		//	"ksynthesis" interactive?="--interactive" fm=FMCommand ("with" kst=KnowledgeSpecification)?;
		public ParserRule getRule() { return rule; }

		//"ksynthesis" interactive?="--interactive" fm=FMCommand ("with" kst=KnowledgeSpecification)?
		public Group getGroup() { return cGroup; }

		//"ksynthesis"
		public Keyword getKsynthesisKeyword_0() { return cKsynthesisKeyword_0; }

		//interactive?="--interactive"
		public Assignment getInteractiveAssignment_1() { return cInteractiveAssignment_1; }

		//"--interactive"
		public Keyword getInteractiveInteractiveKeyword_1_0() { return cInteractiveInteractiveKeyword_1_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_2() { return cFmAssignment_2; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_2_0() { return cFmFMCommandParserRuleCall_2_0; }

		//("with" kst=KnowledgeSpecification)?
		public Group getGroup_3() { return cGroup_3; }

		//"with"
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//kst=KnowledgeSpecification
		public Assignment getKstAssignment_3_1() { return cKstAssignment_3_1; }

		//KnowledgeSpecification
		public RuleCall getKstKnowledgeSpecificationParserRuleCall_3_1_0() { return cKstKnowledgeSpecificationParserRuleCall_3_1_0; }
	}

	public class KnowledgeSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KnowledgeSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnowledgeSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cHierarchyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHierarchyHierarchySpecificationParserRuleCall_1_0 = (RuleCall)cHierarchyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cGroupsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGroupsGroupsSpecificationParserRuleCall_2_1_0 = (RuleCall)cGroupsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstraintsConstraintsSpecificationParserRuleCall_3_1_0 = (RuleCall)cConstraintsAssignment_3_1.eContents().get(0);
		
		//// ('withKST' kst=KnowledgeSpecification)? ;
		////('with' LEFT_HOOK kst=KnowledgeSpecification RIGHT_HOOK)? ;
		//KnowledgeSpecification:
		//	{KnowledgeSpecification} hierarchy=HierarchySpecification? (COMMA groups=GroupsSpecification)? (COMMA
		//	constraints=ConstraintsSpecification)?;
		public ParserRule getRule() { return rule; }

		//{KnowledgeSpecification} hierarchy=HierarchySpecification? (COMMA groups=GroupsSpecification)? (COMMA
		//constraints=ConstraintsSpecification)?
		public Group getGroup() { return cGroup; }

		//{KnowledgeSpecification}
		public Action getKnowledgeSpecificationAction_0() { return cKnowledgeSpecificationAction_0; }

		//hierarchy=HierarchySpecification?
		public Assignment getHierarchyAssignment_1() { return cHierarchyAssignment_1; }

		//HierarchySpecification
		public RuleCall getHierarchyHierarchySpecificationParserRuleCall_1_0() { return cHierarchyHierarchySpecificationParserRuleCall_1_0; }

		//(COMMA groups=GroupsSpecification)?
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }

		//groups=GroupsSpecification
		public Assignment getGroupsAssignment_2_1() { return cGroupsAssignment_2_1; }

		//GroupsSpecification
		public RuleCall getGroupsGroupsSpecificationParserRuleCall_2_1_0() { return cGroupsGroupsSpecificationParserRuleCall_2_1_0; }

		//(COMMA constraints=ConstraintsSpecification)?
		public Group getGroup_3() { return cGroup_3; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }

		//constraints=ConstraintsSpecification
		public Assignment getConstraintsAssignment_3_1() { return cConstraintsAssignment_3_1; }

		//ConstraintsSpecification
		public RuleCall getConstraintsConstraintsSpecificationParserRuleCall_3_1_0() { return cConstraintsConstraintsSpecificationParserRuleCall_3_1_0; }
	}

	public class HierarchySpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HierarchySpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHierarchyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cHierarchyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cHierarchyHierarchyParserRuleCall_1_0_0 = (RuleCall)cHierarchyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFeaturesHProductionParserRuleCall_1_1_0_0 = (RuleCall)cFeaturesAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//HierarchySpecification:
		//	"hierarchy=" (hierarchy=Hierarchy | (features+=HProduction ";")+);
		public ParserRule getRule() { return rule; }

		//"hierarchy=" (hierarchy=Hierarchy | (features+=HProduction ";")+)
		public Group getGroup() { return cGroup; }

		//"hierarchy="
		public Keyword getHierarchyKeyword_0() { return cHierarchyKeyword_0; }

		//hierarchy=Hierarchy | (features+=HProduction ";")+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//hierarchy=Hierarchy
		public Assignment getHierarchyAssignment_1_0() { return cHierarchyAssignment_1_0; }

		//Hierarchy
		public RuleCall getHierarchyHierarchyParserRuleCall_1_0_0() { return cHierarchyHierarchyParserRuleCall_1_0_0; }

		//(features+=HProduction ";")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//features+=HProduction
		public Assignment getFeaturesAssignment_1_1_0() { return cFeaturesAssignment_1_1_0; }

		//HProduction
		public RuleCall getFeaturesHProductionParserRuleCall_1_1_0_0() { return cFeaturesHProductionParserRuleCall_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
	}

	public class HProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HProduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesFT_IDParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		
		//HProduction:
		//	name=ID ":" features+=FT_ID+;
		public ParserRule getRule() { return rule; }

		//name=ID ":" features+=FT_ID+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//features+=FT_ID+
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_2_0() { return cFeaturesFT_IDParserRuleCall_2_0; }
	}

	public class GroupsSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupsSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGroupsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGroupsGroupSpecParserRuleCall_1_0_0 = (RuleCall)cGroupsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// getFGroups?
		//GroupsSpecification:
		//	"groups=" (groups+=GroupSpec ";")+;
		public ParserRule getRule() { return rule; }

		//"groups=" (groups+=GroupSpec ";")+
		public Group getGroup() { return cGroup; }

		//"groups="
		public Keyword getGroupsKeyword_0() { return cGroupsKeyword_0; }

		//(groups+=GroupSpec ";")+
		public Group getGroup_1() { return cGroup_1; }

		//groups+=GroupSpec
		public Assignment getGroupsAssignment_1_0() { return cGroupsAssignment_1_0; }

		//GroupSpec
		public RuleCall getGroupsGroupSpecParserRuleCall_1_0_0() { return cGroupsGroupSpecParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class GroupSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXorGroupSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMtxGroupSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOrGroupSpecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GroupSpec:
		//	XorGroupSpec | MtxGroupSpec | OrGroupSpec;
		public ParserRule getRule() { return rule; }

		//XorGroupSpec | MtxGroupSpec | OrGroupSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//XorGroupSpec
		public RuleCall getXorGroupSpecParserRuleCall_0() { return cXorGroupSpecParserRuleCall_0; }

		//MtxGroupSpec
		public RuleCall getMtxGroupSpecParserRuleCall_1() { return cMtxGroupSpecParserRuleCall_1; }

		//OrGroupSpec
		public RuleCall getOrGroupSpecParserRuleCall_2() { return cOrGroupSpecParserRuleCall_2; }
	}

	public class XorGroupSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XorGroupSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXorGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFT_IDParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//XorGroupSpec:
		//	"xorGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//"xorGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//"xorGroup"
		public Keyword getXorGroupKeyword_0() { return cXorGroupKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//features+=FT_ID+
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_4_0() { return cFeaturesFT_IDParserRuleCall_4_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_5() { return cRIGHT_PARENTerminalRuleCall_5; }
	}

	public class MtxGroupSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MtxGroupSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMtxGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFT_IDParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MtxGroupSpec:
		//	"mtxGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//"mtxGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//"mtxGroup"
		public Keyword getMtxGroupKeyword_0() { return cMtxGroupKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//features+=FT_ID+
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_4_0() { return cFeaturesFT_IDParserRuleCall_4_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_5() { return cRIGHT_PARENTerminalRuleCall_5; }
	}

	public class OrGroupSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrGroupSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFT_IDParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//OrGroupSpec:
		//	"orGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//"orGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//"orGroup"
		public Keyword getOrGroupKeyword_0() { return cOrGroupKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//features+=FT_ID+
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_4_0() { return cFeaturesFT_IDParserRuleCall_4_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_5() { return cRIGHT_PARENTerminalRuleCall_5; }
	}

	public class ConstraintsSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintsSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCstsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCstsConstraintExprParserRuleCall_1_0 = (RuleCall)cCstsAssignment_1.eContents().get(0);
		
		//// constraint strategy
		//ConstraintsSpecification:
		//	"constraints=" csts=ConstraintExpr;
		public ParserRule getRule() { return rule; }

		//"constraints=" csts=ConstraintExpr
		public Group getGroup() { return cGroup; }

		//"constraints="
		public Keyword getConstraintsKeyword_0() { return cConstraintsKeyword_0; }

		//csts=ConstraintExpr
		public Assignment getCstsAssignment_1() { return cCstsAssignment_1; }

		//ConstraintExpr
		public RuleCall getCstsConstraintExprParserRuleCall_1_0() { return cCstsConstraintExprParserRuleCall_1_0; }
	}

	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeSliceModeEnumRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		private final Assignment cFtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFtsSetCommandParserRuleCall_3_0 = (RuleCall)cFtsAssignment_3.eContents().get(0);
		
		////Predirectives : '@pre[' instr+=(AlignmentInstr)+ ']' ;
		////Postdirectives : '@post[' instr+=(AlignmentInstr)+ ']' ;
		////AlignmentInstr : (RenameFeature|RemoveFeature|Insert) ;
		////Aggregate : 'aggregate' LEFT_BRACKET (fms+=FMCommand)+ RIGHT_BRACKET ('map' LEFT_BRACKET (constraints+=CNF ';')+ RIGHT_BRACKET)?;
		//// issue: side effect or purely functional?
		//Slice:
		//	"slice" fm=FMCommand mode=SliceMode fts=SetCommand;
		public ParserRule getRule() { return rule; }

		//"slice" fm=FMCommand mode=SliceMode fts=SetCommand
		public Group getGroup() { return cGroup; }

		//"slice"
		public Keyword getSliceKeyword_0() { return cSliceKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }

		//mode=SliceMode
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//SliceMode
		public RuleCall getModeSliceModeEnumRuleCall_2_0() { return cModeSliceModeEnumRuleCall_2_0; }

		//fts=SetCommand
		public Assignment getFtsAssignment_3() { return cFtsAssignment_3; }

		//SetCommand
		public RuleCall getFtsSetCommandParserRuleCall_3_0() { return cFtsSetCommandParserRuleCall_3_0; }
	}

	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAggregateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRenamingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRenamingsRenamingsKeyword_1_0 = (Keyword)cRenamingsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2_0_0 = (RuleCall)cGroup_2_0.eContents().get(0);
		private final Assignment cFmsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFmsFMCommandParserRuleCall_2_0_1_0 = (RuleCall)cFmsAssignment_2_0_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_2_0_2 = (RuleCall)cGroup_2_0.eContents().get(2);
		private final Assignment cSfmsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSfmsIdentifierExprParserRuleCall_2_1_0 = (RuleCall)cSfmsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithMappingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMappingAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMappingSetCommandParserRuleCall_3_1_0 = (RuleCall)cMappingAssignment_3_1.eContents().get(0);
		
		//Aggregate:
		//	"aggregate" renamings?="--renamings"? (LEFT_BRACKET fms+=FMCommand+ RIGHT_BRACKET | sfms=IdentifierExpr)
		//	("withMapping" mapping=SetCommand)?;
		public ParserRule getRule() { return rule; }

		//"aggregate" renamings?="--renamings"? (LEFT_BRACKET fms+=FMCommand+ RIGHT_BRACKET | sfms=IdentifierExpr) ("withMapping"
		//mapping=SetCommand)?
		public Group getGroup() { return cGroup; }

		//"aggregate"
		public Keyword getAggregateKeyword_0() { return cAggregateKeyword_0; }

		//renamings?="--renamings"?
		public Assignment getRenamingsAssignment_1() { return cRenamingsAssignment_1; }

		//"--renamings"
		public Keyword getRenamingsRenamingsKeyword_1_0() { return cRenamingsRenamingsKeyword_1_0; }

		//LEFT_BRACKET fms+=FMCommand+ RIGHT_BRACKET | sfms=IdentifierExpr
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//LEFT_BRACKET fms+=FMCommand+ RIGHT_BRACKET
		public Group getGroup_2_0() { return cGroup_2_0; }

		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2_0_0() { return cLEFT_BRACKETTerminalRuleCall_2_0_0; }

		//fms+=FMCommand+
		public Assignment getFmsAssignment_2_0_1() { return cFmsAssignment_2_0_1; }

		//FMCommand
		public RuleCall getFmsFMCommandParserRuleCall_2_0_1_0() { return cFmsFMCommandParserRuleCall_2_0_1_0; }

		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_2_0_2() { return cRIGHT_BRACKETTerminalRuleCall_2_0_2; }

		//sfms=IdentifierExpr
		public Assignment getSfmsAssignment_2_1() { return cSfmsAssignment_2_1; }

		//IdentifierExpr
		public RuleCall getSfmsIdentifierExprParserRuleCall_2_1_0() { return cSfmsIdentifierExprParserRuleCall_2_1_0; }

		//("withMapping" mapping=SetCommand)?
		public Group getGroup_3() { return cGroup_3; }

		//"withMapping"
		public Keyword getWithMappingKeyword_3_0() { return cWithMappingKeyword_3_0; }

		//mapping=SetCommand
		public Assignment getMappingAssignment_3_1() { return cMappingAssignment_3_1; }

		//SetCommand
		public RuleCall getMappingSetCommandParserRuleCall_3_1_0() { return cMappingSetCommandParserRuleCall_3_1_0; }
	}

	public class FeatureModelOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureModelOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInsertParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEditOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExtractParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////LEFT_BRACKET (fms+=FMCommand)+ RIGHT_BRACKET
		//FeatureModelOperation:
		//	Insert | EditOperation | Extract;
		public ParserRule getRule() { return rule; }

		//Insert | EditOperation | Extract
		public Alternatives getAlternatives() { return cAlternatives; }

		//Insert
		public RuleCall getInsertParserRuleCall_0() { return cInsertParserRuleCall_0; }

		//EditOperation
		public RuleCall getEditOperationParserRuleCall_1() { return cEditOperationParserRuleCall_1; }

		//Extract
		public RuleCall getExtractParserRuleCall_2() { return cExtractParserRuleCall_2; }
	}

	public class EditOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EditOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRemoveFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRenameFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EditOperation:
		//	RemoveFeature | RenameFeature;
		public ParserRule getRule() { return rule; }

		//RemoveFeature | RenameFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//RemoveFeature
		public RuleCall getRemoveFeatureParserRuleCall_0() { return cRemoveFeatureParserRuleCall_0; }

		//RenameFeature
		public RuleCall getRenameFeatureParserRuleCall_1() { return cRenameFeatureParserRuleCall_1; }
	}

	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAspectfmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAspectfmFMCommandParserRuleCall_1_0 = (RuleCall)cAspectfmAssignment_1.eContents().get(0);
		private final Keyword cIntoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseftFTCommandParserRuleCall_3_0 = (RuleCall)cBaseftAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOpVariabilityOpCommandParserRuleCall_5_0 = (RuleCall)cOpAssignment_5.eContents().get(0);
		
		////TODO:  op2=(FML_IDENTIFIER)?  ;
		//Insert:
		//	"insert" aspectfm=FMCommand "into" baseft=FTCommand "with" op=VariabilityOpCommand;
		public ParserRule getRule() { return rule; }

		//"insert" aspectfm=FMCommand "into" baseft=FTCommand "with" op=VariabilityOpCommand
		public Group getGroup() { return cGroup; }

		//"insert"
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }

		//aspectfm=FMCommand
		public Assignment getAspectfmAssignment_1() { return cAspectfmAssignment_1; }

		//FMCommand
		public RuleCall getAspectfmFMCommandParserRuleCall_1_0() { return cAspectfmFMCommandParserRuleCall_1_0; }

		//"into"
		public Keyword getIntoKeyword_2() { return cIntoKeyword_2; }

		//baseft=FTCommand
		public Assignment getBaseftAssignment_3() { return cBaseftAssignment_3; }

		//FTCommand
		public RuleCall getBaseftFTCommandParserRuleCall_3_0() { return cBaseftFTCommandParserRuleCall_3_0; }

		//"with"
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }

		//op=VariabilityOpCommand
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }

		//VariabilityOpCommand
		public RuleCall getOpVariabilityOpCommandParserRuleCall_5_0() { return cOpVariabilityOpCommandParserRuleCall_5_0; }
	}

	public class RemoveFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureFTCommandParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		//RemoveFeature:
		//	"removeFeature" feature=FTCommand;
		public ParserRule getRule() { return rule; }

		//"removeFeature" feature=FTCommand
		public Group getGroup() { return cGroup; }

		//"removeFeature"
		public Keyword getRemoveFeatureKeyword_0() { return cRemoveFeatureKeyword_0; }

		//feature=FTCommand
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//FTCommand
		public RuleCall getFeatureFTCommandParserRuleCall_1_0() { return cFeatureFTCommandParserRuleCall_1_0; }
	}

	public class RenameFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RenameFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRenameFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureFTCommandParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureNewAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureNewStrCommandParserRuleCall_3_0 = (RuleCall)cFeatureNewAssignment_3.eContents().get(0);
		
		////'in' fm=FML_IDENTIFIER ;
		//RenameFeature:
		//	"renameFeature" feature=FTCommand "as" featureNew=StrCommand;
		public ParserRule getRule() { return rule; }

		//"renameFeature" feature=FTCommand "as" featureNew=StrCommand
		public Group getGroup() { return cGroup; }

		//"renameFeature"
		public Keyword getRenameFeatureKeyword_0() { return cRenameFeatureKeyword_0; }

		//feature=FTCommand
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }

		//FTCommand
		public RuleCall getFeatureFTCommandParserRuleCall_1_0() { return cFeatureFTCommandParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//featureNew=StrCommand
		public Assignment getFeatureNewAssignment_3() { return cFeatureNewAssignment_3; }

		//StrCommand
		public RuleCall getFeatureNewStrCommandParserRuleCall_3_0() { return cFeatureNewStrCommandParserRuleCall_3_0; }
	}

	public class ExtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootfeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootfeatureFTCommandParserRuleCall_1_0 = (RuleCall)cRootfeatureAssignment_1.eContents().get(0);
		
		//Extract:
		//	"extract" rootfeature=FTCommand;
		public ParserRule getRule() { return rule; }

		//"extract" rootfeature=FTCommand
		public Group getGroup() { return cGroup; }

		//"extract"
		public Keyword getExtractKeyword_0() { return cExtractKeyword_0; }

		//rootfeature=FTCommand
		public Assignment getRootfeatureAssignment_1() { return cRootfeatureAssignment_1; }

		//FTCommand
		public RuleCall getRootfeatureFTCommandParserRuleCall_1_0() { return cRootfeatureFTCommandParserRuleCall_1_0; }
	}

	public class AssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAssertionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssertionComplexCommandParserRuleCall_2_0 = (RuleCall)cAssertionAssignment_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//// should be a BooleanOperation
		//Assertion:
		//	"assert" LEFT_PAREN assertion=ComplexCommand RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//"assert" LEFT_PAREN assertion=ComplexCommand RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//assertion=ComplexCommand
		public Assignment getAssertionAssignment_2() { return cAssertionAssignment_2; }

		//ComplexCommand
		public RuleCall getAssertionComplexCommandParserRuleCall_2_0() { return cAssertionComplexCommandParserRuleCall_2_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_3() { return cRIGHT_PARENTerminalRuleCall_3; }
	}

	public class VariableNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsNullKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//VariableNull:
		//	"isNull" var=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//"isNull" var=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//"isNull"
		public Keyword getIsNullKeyword_0() { return cIsNullKeyword_0; }

		//var=FML_IDENTIFIER
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getVarFML_IDENTIFIERParserRuleCall_1_0() { return cVarFML_IDENTIFIERParserRuleCall_1_0; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgLVidentifierParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		
		//// Export/ Hide
		//Export:
		//	"export" arg=LVidentifier;
		public ParserRule getRule() { return rule; }

		//"export" arg=LVidentifier
		public Group getGroup() { return cGroup; }

		//"export"
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }

		//arg=LVidentifier
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }

		//LVidentifier
		public RuleCall getArgLVidentifierParserRuleCall_1_0() { return cArgLVidentifierParserRuleCall_1_0; }
	}

	public class HiddenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hidden");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgLVidentifierParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		
		//Hidden:
		//	"hide" arg=LVidentifier;
		public ParserRule getRule() { return rule; }

		//"hide" arg=LVidentifier
		public Group getGroup() { return cGroup; }

		//"hide"
		public Keyword getHideKeyword_0() { return cHideKeyword_0; }

		//arg=LVidentifier
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }

		//LVidentifier
		public RuleCall getArgLVidentifierParserRuleCall_1_0() { return cArgLVidentifierParserRuleCall_1_0; }
	}

	public class LVidentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LVidentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsFML_IDENTIFIERParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsFML_IDENTIFIERParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//// list of identifiers
		//LVidentifier:
		//	args+=FML_IDENTIFIER (COMMA args+=FML_IDENTIFIER)*;
		public ParserRule getRule() { return rule; }

		//args+=FML_IDENTIFIER (COMMA args+=FML_IDENTIFIER)*
		public Group getGroup() { return cGroup; }

		//args+=FML_IDENTIFIER
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//FML_IDENTIFIER
		public RuleCall getArgsFML_IDENTIFIERParserRuleCall_0_0() { return cArgsFML_IDENTIFIERParserRuleCall_0_0; }

		//(COMMA args+=FML_IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//args+=FML_IDENTIFIER
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//FML_IDENTIFIER
		public RuleCall getArgsFML_IDENTIFIERParserRuleCall_1_1_0() { return cArgsFML_IDENTIFIERParserRuleCall_1_1_0; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependenciesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//// return the set of FMs which are dependent from var // TODO: deprecated???
		//Dependency:
		//	"dependencies" var=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//"dependencies" var=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//"dependencies"
		public Keyword getDependenciesKeyword_0() { return cDependenciesKeyword_0; }

		//var=FML_IDENTIFIER
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getVarFML_IDENTIFIERParserRuleCall_1_0() { return cVarFML_IDENTIFIERParserRuleCall_1_0; }
	}

	public class ConfigurationCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationCmd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateConfigurationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompleteConfigurationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionFeatureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAutoConfigurationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSelectedConfigurationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeselectedConfigurationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnselectedConfigurationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// a configuration is a set of features selected
		//// BUT: some features are also 'deselected'
		//// and some other features are not selected / deselected
		//ConfigurationCmd:
		//	CreateConfiguration | CompleteConfiguration | SelectionFeature | AutoConfiguration | SelectedConfiguration |
		//	DeselectedConfiguration | UnselectedConfiguration;
		public ParserRule getRule() { return rule; }

		//CreateConfiguration | CompleteConfiguration | SelectionFeature | AutoConfiguration | SelectedConfiguration |
		//DeselectedConfiguration | UnselectedConfiguration
		public Alternatives getAlternatives() { return cAlternatives; }

		//CreateConfiguration
		public RuleCall getCreateConfigurationParserRuleCall_0() { return cCreateConfigurationParserRuleCall_0; }

		//CompleteConfiguration
		public RuleCall getCompleteConfigurationParserRuleCall_1() { return cCompleteConfigurationParserRuleCall_1; }

		//SelectionFeature
		public RuleCall getSelectionFeatureParserRuleCall_2() { return cSelectionFeatureParserRuleCall_2; }

		//AutoConfiguration
		public RuleCall getAutoConfigurationParserRuleCall_3() { return cAutoConfigurationParserRuleCall_3; }

		//SelectedConfiguration
		public RuleCall getSelectedConfigurationParserRuleCall_4() { return cSelectedConfigurationParserRuleCall_4; }

		//DeselectedConfiguration
		public RuleCall getDeselectedConfigurationParserRuleCall_5() { return cDeselectedConfigurationParserRuleCall_5; }

		//UnselectedConfiguration
		public RuleCall getUnselectedConfigurationParserRuleCall_6() { return cUnselectedConfigurationParserRuleCall_6; }
	}

	public class CreateConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//CreateConfiguration:
		//	"configuration" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"configuration" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"configuration"
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class CompleteConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompleteConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsCompleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigConfigurationCommandParserRuleCall_1_0 = (RuleCall)cConfigAssignment_1.eContents().get(0);
		
		//// full configuration?
		//CompleteConfiguration:
		//	"isComplete" config=ConfigurationCommand;
		public ParserRule getRule() { return rule; }

		//"isComplete" config=ConfigurationCommand
		public Group getGroup() { return cGroup; }

		//"isComplete"
		public Keyword getIsCompleteKeyword_0() { return cIsCompleteKeyword_0; }

		//config=ConfigurationCommand
		public Assignment getConfigAssignment_1() { return cConfigAssignment_1; }

		//ConfigurationCommand
		public RuleCall getConfigConfigurationCommandParserRuleCall_1_0() { return cConfigConfigurationCommandParserRuleCall_1_0; }
	}

	public class SelectionFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpSelectKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpDeselectKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Keyword cOpUnselectKeyword_0_0_2 = (Keyword)cOpAlternatives_0_0.eContents().get(2);
		private final Assignment cFtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFtsFeatureExpressionParserRuleCall_1_0 = (RuleCall)cFtsAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigConfigurationCommandParserRuleCall_3_0 = (RuleCall)cConfigAssignment_3.eContents().get(0);
		
		//// STRING? // TODO: in conflict with the "in"/foreach
		//SelectionFeature:
		//	op=("select" | "deselect" | "unselect") fts+=FeatureExpression+ "in" config=ConfigurationCommand;
		public ParserRule getRule() { return rule; }

		//op=("select" | "deselect" | "unselect") fts+=FeatureExpression+ "in" config=ConfigurationCommand
		public Group getGroup() { return cGroup; }

		//op=("select" | "deselect" | "unselect")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"select" | "deselect" | "unselect"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"select"
		public Keyword getOpSelectKeyword_0_0_0() { return cOpSelectKeyword_0_0_0; }

		//"deselect"
		public Keyword getOpDeselectKeyword_0_0_1() { return cOpDeselectKeyword_0_0_1; }

		//"unselect"
		public Keyword getOpUnselectKeyword_0_0_2() { return cOpUnselectKeyword_0_0_2; }

		//fts+=FeatureExpression+
		public Assignment getFtsAssignment_1() { return cFtsAssignment_1; }

		//FeatureExpression
		public RuleCall getFtsFeatureExpressionParserRuleCall_1_0() { return cFtsFeatureExpressionParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//config=ConfigurationCommand
		public Assignment getConfigAssignment_3() { return cConfigAssignment_3; }

		//ConfigurationCommand
		public RuleCall getConfigConfigurationCommandParserRuleCall_3_0() { return cConfigConfigurationCommandParserRuleCall_3_0; }
	}

	public class FeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFtIdentifierExprParserRuleCall_0_0 = (RuleCall)cFtAssignment_0.eContents().get(0);
		private final Assignment cFtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFtStringExprParserRuleCall_1_0 = (RuleCall)cFtAssignment_1.eContents().get(0);
		
		//FeatureExpression:
		//	ft=IdentifierExpr | ft=StringExpr;
		public ParserRule getRule() { return rule; }

		//ft=IdentifierExpr | ft=StringExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//ft=IdentifierExpr
		public Assignment getFtAssignment_0() { return cFtAssignment_0; }

		//IdentifierExpr
		public RuleCall getFtIdentifierExprParserRuleCall_0_0() { return cFtIdentifierExprParserRuleCall_0_0; }

		//ft=StringExpr
		public Assignment getFtAssignment_1() { return cFtAssignment_1; }

		//StringExpr
		public RuleCall getFtStringExprParserRuleCall_1_0() { return cFtStringExprParserRuleCall_1_0; }
	}

	public class AutoConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AutoConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutoSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigConfigurationCommandParserRuleCall_1_0 = (RuleCall)cConfigAssignment_1.eContents().get(0);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeAutoConfModeEnumRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		
		//// populate a configuration such that the configuration is valid
		//AutoConfiguration:
		//	"autoSelect" config=ConfigurationCommand mode=AutoConfMode?;
		public ParserRule getRule() { return rule; }

		//"autoSelect" config=ConfigurationCommand mode=AutoConfMode?
		public Group getGroup() { return cGroup; }

		//"autoSelect"
		public Keyword getAutoSelectKeyword_0() { return cAutoSelectKeyword_0; }

		//config=ConfigurationCommand
		public Assignment getConfigAssignment_1() { return cConfigAssignment_1; }

		//ConfigurationCommand
		public RuleCall getConfigConfigurationCommandParserRuleCall_1_0() { return cConfigConfigurationCommandParserRuleCall_1_0; }

		//mode=AutoConfMode?
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//AutoConfMode
		public RuleCall getModeAutoConfModeEnumRuleCall_2_0() { return cModeAutoConfModeEnumRuleCall_2_0; }
	}

	public class SelectedConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectedConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectedFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigConfigurationCommandParserRuleCall_1_0 = (RuleCall)cConfigAssignment_1.eContents().get(0);
		
		//// features selected in a configuration
		//SelectedConfiguration:
		//	"selectedF" config=ConfigurationCommand;
		public ParserRule getRule() { return rule; }

		//"selectedF" config=ConfigurationCommand
		public Group getGroup() { return cGroup; }

		//"selectedF"
		public Keyword getSelectedFKeyword_0() { return cSelectedFKeyword_0; }

		//config=ConfigurationCommand
		public Assignment getConfigAssignment_1() { return cConfigAssignment_1; }

		//ConfigurationCommand
		public RuleCall getConfigConfigurationCommandParserRuleCall_1_0() { return cConfigConfigurationCommandParserRuleCall_1_0; }
	}

	public class DeselectedConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeselectedConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeselectedFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigConfigurationCommandParserRuleCall_1_0 = (RuleCall)cConfigAssignment_1.eContents().get(0);
		
		//// features deselected in a configuration
		//DeselectedConfiguration:
		//	"deselectedF" config=ConfigurationCommand;
		public ParserRule getRule() { return rule; }

		//"deselectedF" config=ConfigurationCommand
		public Group getGroup() { return cGroup; }

		//"deselectedF"
		public Keyword getDeselectedFKeyword_0() { return cDeselectedFKeyword_0; }

		//config=ConfigurationCommand
		public Assignment getConfigAssignment_1() { return cConfigAssignment_1; }

		//ConfigurationCommand
		public RuleCall getConfigConfigurationCommandParserRuleCall_1_0() { return cConfigConfigurationCommandParserRuleCall_1_0; }
	}

	public class UnselectedConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnselectedConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnselectedFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigConfigurationCommandParserRuleCall_1_0 = (RuleCall)cConfigAssignment_1.eContents().get(0);
		
		//// features unselected in a configuration
		//UnselectedConfiguration:
		//	"unselectedF" config=ConfigurationCommand;
		public ParserRule getRule() { return rule; }

		//"unselectedF" config=ConfigurationCommand
		public Group getGroup() { return cGroup; }

		//"unselectedF"
		public Keyword getUnselectedFKeyword_0() { return cUnselectedFKeyword_0; }

		//config=ConfigurationCommand
		public Assignment getConfigAssignment_1() { return cConfigAssignment_1; }

		//ConfigurationCommand
		public RuleCall getConfigConfigurationCommandParserRuleCall_1_0() { return cConfigConfigurationCommandParserRuleCall_1_0; }
	}

	public class AsFMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AsFM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsFMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfConfigurationCommandParserRuleCall_1_0 = (RuleCall)cConfAssignment_1.eContents().get(0);
		
		//AsFM:
		//	"asFM" conf=ConfigurationCommand;
		public ParserRule getRule() { return rule; }

		//"asFM" conf=ConfigurationCommand
		public Group getGroup() { return cGroup; }

		//"asFM"
		public Keyword getAsFMKeyword_0() { return cAsFMKeyword_0; }

		//conf=ConfigurationCommand
		public Assignment getConfAssignment_1() { return cConfAssignment_1; }

		//ConfigurationCommand
		public RuleCall getConfConfigurationCommandParserRuleCall_1_0() { return cConfConfigurationCommandParserRuleCall_1_0; }
	}

	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCstAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCstSetCommandParserRuleCall_3_0 = (RuleCall)cCstAssignment_3.eContents().get(0);
		
		//Map:
		//	"map" fm=FMCommand "with" cst=SetCommand;
		public ParserRule getRule() { return rule; }

		//"map" fm=FMCommand "with" cst=SetCommand
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//cst=SetCommand
		public Assignment getCstAssignment_3() { return cCstAssignment_3; }

		//SetCommand
		public RuleCall getCstSetCommandParserRuleCall_3_0() { return cCstSetCommandParserRuleCall_3_0; }
	}

	public class UnMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnmapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//UnMap:
		//	"unmap" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"unmap" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"unmap"
		public Keyword getUnmapKeyword_0() { return cUnmapKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class CleanUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CleanUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCleanupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//// functional style?
		//CleanUp:
		//	"cleanup" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"cleanup" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"cleanup"
		public Keyword getCleanupKeyword_0() { return cCleanupKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class CoresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cores");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//// core features
		//Cores:
		//	"cores" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"cores" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"cores"
		public Keyword getCoresKeyword_0() { return cCoresKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class DeadsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deads");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeadsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//// dead features
		//Deads:
		//	"deads" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"deads" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"deads"
		public Keyword getDeadsKeyword_0() { return cDeadsKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class FullMandatorysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullMandatorys");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullMandatorysKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFalseOptionalsKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//// TODO: make the difference!
		//// full mandatory features
		//FullMandatorys:
		//	("fullMandatorys" | "falseOptionals") fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//("fullMandatorys" | "falseOptionals") fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"fullMandatorys" | "falseOptionals"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"fullMandatorys"
		public Keyword getFullMandatorysKeyword_0_0() { return cFullMandatorysKeyword_0_0; }

		//"falseOptionals"
		public Keyword getFalseOptionalsKeyword_0_1() { return cFalseOptionalsKeyword_0_1; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class CliquesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cliques");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCliquesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//// cliques (aka atomic sets?)
		//Cliques:
		//	"cliques" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"cliques" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"cliques"
		public Keyword getCliquesKeyword_0() { return cCliquesKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class ScriptDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_HOOKTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Assignment cCmdsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCmdsScriptCommandParserRuleCall_2_0 = (RuleCall)cCmdsAssignment_2.eContents().get(0);
		private final Assignment cExportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cExportsAlternatives_3_0 = (Alternatives)cExportsAssignment_3.eContents().get(0);
		private final RuleCall cExportsExportParserRuleCall_3_0_0 = (RuleCall)cExportsAlternatives_3_0.eContents().get(0);
		private final RuleCall cExportsHiddenParserRuleCall_3_0_1 = (RuleCall)cExportsAlternatives_3_0.eContents().get(1);
		private final RuleCall cRIGHT_HOOKTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// isDead? isCore? isFullMandatory? can be written with an FML script
		//ScriptDefinition:
		//	LEFT_HOOK params+=Parameter* cmds+=ScriptCommand+ exports+=(Export | Hidden)* RIGHT_HOOK;
		public ParserRule getRule() { return rule; }

		//LEFT_HOOK params+=Parameter* cmds+=ScriptCommand+ exports+=(Export | Hidden)* RIGHT_HOOK
		public Group getGroup() { return cGroup; }

		//LEFT_HOOK
		public RuleCall getLEFT_HOOKTerminalRuleCall_0() { return cLEFT_HOOKTerminalRuleCall_0; }

		//params+=Parameter*
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_1_0() { return cParamsParameterParserRuleCall_1_0; }

		//cmds+=ScriptCommand+
		public Assignment getCmdsAssignment_2() { return cCmdsAssignment_2; }

		//ScriptCommand
		public RuleCall getCmdsScriptCommandParserRuleCall_2_0() { return cCmdsScriptCommandParserRuleCall_2_0; }

		//exports+=(Export | Hidden)*
		public Assignment getExportsAssignment_3() { return cExportsAssignment_3; }

		//Export | Hidden
		public Alternatives getExportsAlternatives_3_0() { return cExportsAlternatives_3_0; }

		//Export
		public RuleCall getExportsExportParserRuleCall_3_0_0() { return cExportsExportParserRuleCall_3_0_0; }

		//Hidden
		public RuleCall getExportsHiddenParserRuleCall_3_0_1() { return cExportsHiddenParserRuleCall_3_0_1; }

		//RIGHT_HOOK
		public RuleCall getRIGHT_HOOKTerminalRuleCall_4() { return cRIGHT_HOOKTerminalRuleCall_4; }
	}

	public class ShellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shell");
		private final Assignment cCmdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCmdAlternatives_0 = (Alternatives)cCmdAssignment.eContents().get(0);
		private final RuleCall cCmdExitParserRuleCall_0_0 = (RuleCall)cCmdAlternatives_0.eContents().get(0);
		private final RuleCall cCmdExistParserRuleCall_0_1 = (RuleCall)cCmdAlternatives_0.eContents().get(1);
		private final RuleCall cCmdListingParserRuleCall_0_2 = (RuleCall)cCmdAlternatives_0.eContents().get(2);
		private final RuleCall cCmdIsConflictingParserRuleCall_0_3 = (RuleCall)cCmdAlternatives_0.eContents().get(3);
		private final RuleCall cCmdStateParserRuleCall_0_4 = (RuleCall)cCmdAlternatives_0.eContents().get(4);
		
		//// shell commands
		//// |Help) ;
		//Shell:
		//	cmd=(Exit | Exist | Listing | IsConflicting | State);
		public ParserRule getRule() { return rule; }

		//cmd=(Exit | Exist | Listing | IsConflicting | State)
		public Assignment getCmdAssignment() { return cCmdAssignment; }

		//Exit | Exist | Listing | IsConflicting | State
		public Alternatives getCmdAlternatives_0() { return cCmdAlternatives_0; }

		//Exit
		public RuleCall getCmdExitParserRuleCall_0_0() { return cCmdExitParserRuleCall_0_0; }

		//Exist
		public RuleCall getCmdExistParserRuleCall_0_1() { return cCmdExistParserRuleCall_0_1; }

		//Listing
		public RuleCall getCmdListingParserRuleCall_0_2() { return cCmdListingParserRuleCall_0_2; }

		//IsConflicting
		public RuleCall getCmdIsConflictingParserRuleCall_0_3() { return cCmdIsConflictingParserRuleCall_0_3; }

		//State
		public RuleCall getCmdStateParserRuleCall_0_4() { return cCmdStateParserRuleCall_0_4; }
	}

	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exit");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final Keyword cValQuitKeyword_0_0 = (Keyword)cValAlternatives_0.eContents().get(0);
		private final Keyword cValExitKeyword_0_1 = (Keyword)cValAlternatives_0.eContents().get(1);
		
		//Exit:
		//	val=("quit" | "exit");
		public ParserRule getRule() { return rule; }

		//val=("quit" | "exit")
		public Assignment getValAssignment() { return cValAssignment; }

		//"quit" | "exit"
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }

		//"quit"
		public Keyword getValQuitKeyword_0_0() { return cValQuitKeyword_0_0; }

		//"exit"
		public Keyword getValExitKeyword_0_1() { return cValExitKeyword_0_1; }
	}

	public class ExistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValIsExistingKeyword_0_0 = (Keyword)cValAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//Exist:
		//	val="isExisting" var=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//val="isExisting" var=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//val="isExisting"
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//"isExisting"
		public Keyword getValIsExistingKeyword_0_0() { return cValIsExistingKeyword_0_0; }

		//var=FML_IDENTIFIER
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getVarFML_IDENTIFIERParserRuleCall_1_0() { return cVarFML_IDENTIFIERParserRuleCall_1_0; }
	}

	public class IsConflictingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IsConflicting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValIsConflictingKeyword_0_0 = (Keyword)cValAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		
		//IsConflicting:
		//	val="isConflicting" var=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//val="isConflicting" var=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//val="isConflicting"
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//"isConflicting"
		public Keyword getValIsConflictingKeyword_0_0() { return cValIsConflictingKeyword_0_0; }

		//var=FML_IDENTIFIER
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getVarFML_IDENTIFIERParserRuleCall_1_0() { return cVarFML_IDENTIFIERParserRuleCall_1_0; }
	}

	public class ListingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Listing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cValAlternatives_0_0 = (Alternatives)cValAssignment_0.eContents().get(0);
		private final Keyword cValLsKeyword_0_0_0 = (Keyword)cValAlternatives_0_0.eContents().get(0);
		private final Keyword cValVarsKeyword_0_0_1 = (Keyword)cValAlternatives_0_0.eContents().get(1);
		private final Assignment cOptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptOPT_LISTINGEnumRuleCall_1_0 = (RuleCall)cOptAssignment_1.eContents().get(0);
		
		//Listing:
		//	val=("ls" | "vars") opt=OPT_LISTING?;
		public ParserRule getRule() { return rule; }

		//val=("ls" | "vars") opt=OPT_LISTING?
		public Group getGroup() { return cGroup; }

		//val=("ls" | "vars")
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//"ls" | "vars"
		public Alternatives getValAlternatives_0_0() { return cValAlternatives_0_0; }

		//"ls"
		public Keyword getValLsKeyword_0_0_0() { return cValLsKeyword_0_0_0; }

		//"vars"
		public Keyword getValVarsKeyword_0_0_1() { return cValVarsKeyword_0_0_1; }

		//opt=OPT_LISTING?
		public Assignment getOptAssignment_1() { return cOptAssignment_1; }

		//OPT_LISTING
		public RuleCall getOptOPT_LISTINGEnumRuleCall_1_0() { return cOptOPT_LISTINGEnumRuleCall_1_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final Keyword cValMemoryKeyword_0_0 = (Keyword)cValAlternatives_0.eContents().get(0);
		private final Keyword cValCpuKeyword_0_1 = (Keyword)cValAlternatives_0.eContents().get(1);
		
		//// memory usage, CPU speed?
		//State:
		//	val=("memory" | "cpu");
		public ParserRule getRule() { return rule; }

		//val=("memory" | "cpu")
		public Assignment getValAssignment() { return cValAssignment; }

		//"memory" | "cpu"
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }

		//"memory"
		public Keyword getValMemoryKeyword_0_0() { return cValMemoryKeyword_0_0; }

		//"cpu"
		public Keyword getValCpuKeyword_0_1() { return cValCpuKeyword_0_1; }
	}

	public class CopyVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CopyVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCopyKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCpKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cVidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVidFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cVidAssignment_1.eContents().get(0);
		
		////Help : val=('help') ; //cmd=FML_IDENTIFIER;
		////('as')? (newvar=FML_IDENTIFIER)?;
		//CopyVariable:
		//	("copy" | "cp") vid=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//("copy" | "cp") vid=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//"copy" | "cp"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"copy"
		public Keyword getCopyKeyword_0_0() { return cCopyKeyword_0_0; }

		//"cp"
		public Keyword getCpKeyword_0_1() { return cCpKeyword_0_1; }

		//vid=FML_IDENTIFIER
		public Assignment getVidAssignment_1() { return cVidAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getVidFML_IDENTIFIERParserRuleCall_1_0() { return cVidFML_IDENTIFIERParserRuleCall_1_0; }
	}

	public class RemoveVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRemoveVariableKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRmKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cVidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVidFML_IDENTIFIERParserRuleCall_1_0 = (RuleCall)cVidAssignment_1.eContents().get(0);
		
		//RemoveVariable:
		//	("removeVariable" | "rm") vid=FML_IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//("removeVariable" | "rm") vid=FML_IDENTIFIER
		public Group getGroup() { return cGroup; }

		//"removeVariable" | "rm"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"removeVariable"
		public Keyword getRemoveVariableKeyword_0_0() { return cRemoveVariableKeyword_0_0; }

		//"rm"
		public Keyword getRmKeyword_0_1() { return cRmKeyword_0_1; }

		//vid=FML_IDENTIFIER
		public Assignment getVidAssignment_1() { return cVidAssignment_1; }

		//FML_IDENTIFIER
		public RuleCall getVidFML_IDENTIFIERParserRuleCall_1_0() { return cVidFML_IDENTIFIERParserRuleCall_1_0; }
	}

	public class ConvertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Convert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConvertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVFMCommandParserRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		private final Keyword cIntoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFormatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormatFMFormatEnumRuleCall_3_0 = (RuleCall)cFormatAssignment_3.eContents().get(0);
		
		//// convert e.g., featureide, pure::variants, etc.
		//// returns a string
		//Convert:
		//	"convert" v=FMCommand "into" format=FMFormat;
		public ParserRule getRule() { return rule; }

		//"convert" v=FMCommand "into" format=FMFormat
		public Group getGroup() { return cGroup; }

		//"convert"
		public Keyword getConvertKeyword_0() { return cConvertKeyword_0; }

		//v=FMCommand
		public Assignment getVAssignment_1() { return cVAssignment_1; }

		//FMCommand
		public RuleCall getVFMCommandParserRuleCall_1_0() { return cVFMCommandParserRuleCall_1_0; }

		//"into"
		public Keyword getIntoKeyword_2() { return cIntoKeyword_2; }

		//format=FMFormat
		public Assignment getFormatAssignment_3() { return cFormatAssignment_3; }

		//FMFormat
		public RuleCall getFormatFMFormatEnumRuleCall_3_0() { return cFormatFMFormatEnumRuleCall_3_0; }
	}

	public class FMLSaveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FMLSave");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSaveKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSerializeKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cVAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVFMCommandParserRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		private final Keyword cIntoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFormatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormatFMFormatEnumRuleCall_3_0 = (RuleCall)cFormatAssignment_3.eContents().get(0);
		
		//FMLSave:
		//	("save" | "serialize") v=FMCommand "into" format=FMFormat;
		public ParserRule getRule() { return rule; }

		//("save" | "serialize") v=FMCommand "into" format=FMFormat
		public Group getGroup() { return cGroup; }

		//"save" | "serialize"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"save"
		public Keyword getSaveKeyword_0_0() { return cSaveKeyword_0_0; }

		//"serialize"
		public Keyword getSerializeKeyword_0_1() { return cSerializeKeyword_0_1; }

		//v=FMCommand
		public Assignment getVAssignment_1() { return cVAssignment_1; }

		//FMCommand
		public RuleCall getVFMCommandParserRuleCall_1_0() { return cVFMCommandParserRuleCall_1_0; }

		//"into"
		public Keyword getIntoKeyword_2() { return cIntoKeyword_2; }

		//format=FMFormat
		public Assignment getFormatAssignment_3() { return cFormatAssignment_3; }

		//FMFormat
		public RuleCall getFormatFMFormatEnumRuleCall_3_0() { return cFormatFMFormatEnumRuleCall_3_0; }
	}

	public class HierarchyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Hierarchy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHierarchyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFmFMCommandParserRuleCall_1_0 = (RuleCall)cFmAssignment_1.eContents().get(0);
		
		//Hierarchy:
		//	"hierarchy" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"hierarchy" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"hierarchy"
		public Keyword getHierarchyKeyword_0() { return cHierarchyKeyword_0; }

		//fm=FMCommand
		public Assignment getFmAssignment_1() { return cFmAssignment_1; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_1_0() { return cFmFMCommandParserRuleCall_1_0; }
	}

	public class PrinterUtilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrinterUtility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0 = (Alternatives)cOpAssignment_0.eContents().get(0);
		private final Keyword cOpPrintKeyword_0_0_0 = (Keyword)cOpAlternatives_0_0.eContents().get(0);
		private final Keyword cOpPrintlnKeyword_0_0_1 = (Keyword)cOpAlternatives_0_0.eContents().get(1);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgLArgsParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		
		/// *** UTILITIES ****** / PrinterUtility:
		//	op=("print" | "println") arg=LArgs;
		public ParserRule getRule() { return rule; }

		//op=("print" | "println") arg=LArgs
		public Group getGroup() { return cGroup; }

		//op=("print" | "println")
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"print" | "println"
		public Alternatives getOpAlternatives_0_0() { return cOpAlternatives_0_0; }

		//"print"
		public Keyword getOpPrintKeyword_0_0_0() { return cOpPrintKeyword_0_0_0; }

		//"println"
		public Keyword getOpPrintlnKeyword_0_0_1() { return cOpPrintlnKeyword_0_0_1; }

		//arg=LArgs
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }

		//LArgs
		public RuleCall getArgLArgsParserRuleCall_1_0() { return cArgLArgsParserRuleCall_1_0; }
	}

	public class LArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsCommandParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsCommandParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//LArgs:
		//	args+=Command (COMMA args+=Command)*;
		public ParserRule getRule() { return rule; }

		//args+=Command (COMMA args+=Command)*
		public Group getGroup() { return cGroup; }

		//args+=Command
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//Command
		public RuleCall getArgsCommandParserRuleCall_0_0() { return cArgsCommandParserRuleCall_0_0; }

		//(COMMA args+=Command)*
		public Group getGroup_1() { return cGroup_1; }

		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }

		//args+=Command
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//Command
		public RuleCall getArgsCommandParserRuleCall_1_1_0() { return cArgsCommandParserRuleCall_1_1_0; }
	}

	public class GDisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GDisplay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCmdDisplayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCmdDisplayGdisplayKeyword_0_0 = (Keyword)cCmdDisplayAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cVarAlternatives_1_0 = (Alternatives)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarFMCommandParserRuleCall_1_0_0 = (RuleCall)cVarAlternatives_1_0.eContents().get(0);
		private final RuleCall cVarConfigurationCommandParserRuleCall_1_0_1 = (RuleCall)cVarAlternatives_1_0.eContents().get(1);
		
		//// TODO: unify! @deprecated: print_vars
		////Arg : StringArg | IdArg ;
		////StringArg : val=STRING;
		////IdArg : val=FML_IDENTIFIER;
		//// graphical display or print information on the variable
		////@deprecated: display //@deprecated: 'print_var'// can also be a configuration
		//GDisplay:
		//	cmdDisplay="gdisplay" var=(FMCommand | ConfigurationCommand);
		public ParserRule getRule() { return rule; }

		//cmdDisplay="gdisplay" var=(FMCommand | ConfigurationCommand)
		public Group getGroup() { return cGroup; }

		//cmdDisplay="gdisplay"
		public Assignment getCmdDisplayAssignment_0() { return cCmdDisplayAssignment_0; }

		//"gdisplay"
		public Keyword getCmdDisplayGdisplayKeyword_0_0() { return cCmdDisplayGdisplayKeyword_0_0; }

		//var=(FMCommand | ConfigurationCommand)
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//FMCommand | ConfigurationCommand
		public Alternatives getVarAlternatives_1_0() { return cVarAlternatives_1_0; }

		//FMCommand
		public RuleCall getVarFMCommandParserRuleCall_1_0_0() { return cVarFMCommandParserRuleCall_1_0_0; }

		//ConfigurationCommand
		public RuleCall getVarConfigurationCommandParserRuleCall_1_0_1() { return cVarConfigurationCommandParserRuleCall_1_0_1; }
	}

	public class GListingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GListing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cCmdGlistingKeyword_0_0 = (Keyword)cCmdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGlsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cGListingAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//// TODO: what's that?
		//GListing:
		//	cmd="glisting" | "gls" {GListing};
		public ParserRule getRule() { return rule; }

		//cmd="glisting" | "gls" {GListing}
		public Alternatives getAlternatives() { return cAlternatives; }

		//cmd="glisting"
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }

		//"glisting"
		public Keyword getCmdGlistingKeyword_0_0() { return cCmdGlistingKeyword_0_0; }

		//"gls" {GListing}
		public Group getGroup_1() { return cGroup_1; }

		//"gls"
		public Keyword getGlsKeyword_1_0() { return cGlsKeyword_1_0; }

		//{GListing}
		public Action getGListingAction_1_1() { return cGListingAction_1_1; }
	}

	public class ModifyVOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifyVOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryEditParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalEditParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeEditParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrEditParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// change the variability operator associated to a feature
		//ModifyVOperator:
		//	MandatoryEdit | OptionalEdit | AlternativeEdit | OrEdit;
		public ParserRule getRule() { return rule; }

		//MandatoryEdit | OptionalEdit | AlternativeEdit | OrEdit
		public Alternatives getAlternatives() { return cAlternatives; }

		//MandatoryEdit
		public RuleCall getMandatoryEditParserRuleCall_0() { return cMandatoryEditParserRuleCall_0; }

		//OptionalEdit
		public RuleCall getOptionalEditParserRuleCall_1() { return cOptionalEditParserRuleCall_1; }

		//AlternativeEdit
		public RuleCall getAlternativeEditParserRuleCall_2() { return cAlternativeEditParserRuleCall_2; }

		//OrEdit
		public RuleCall getOrEditParserRuleCall_3() { return cOrEditParserRuleCall_3; }
	}

	public class MandatoryEditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MandatoryEdit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFtFTCommandParserRuleCall_1_0 = (RuleCall)cFtAssignment_1.eContents().get(0);
		
		//MandatoryEdit:
		//	"setMandatory" ft=FTCommand;
		public ParserRule getRule() { return rule; }

		//"setMandatory" ft=FTCommand
		public Group getGroup() { return cGroup; }

		//"setMandatory"
		public Keyword getSetMandatoryKeyword_0() { return cSetMandatoryKeyword_0; }

		//ft=FTCommand
		public Assignment getFtAssignment_1() { return cFtAssignment_1; }

		//FTCommand
		public RuleCall getFtFTCommandParserRuleCall_1_0() { return cFtFTCommandParserRuleCall_1_0; }
	}

	public class OptionalEditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionalEdit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFtFTCommandParserRuleCall_1_0 = (RuleCall)cFtAssignment_1.eContents().get(0);
		
		//OptionalEdit:
		//	"setOptional" ft=FTCommand;
		public ParserRule getRule() { return rule; }

		//"setOptional" ft=FTCommand
		public Group getGroup() { return cGroup; }

		//"setOptional"
		public Keyword getSetOptionalKeyword_0() { return cSetOptionalKeyword_0; }

		//ft=FTCommand
		public Assignment getFtAssignment_1() { return cFtAssignment_1; }

		//FTCommand
		public RuleCall getFtFTCommandParserRuleCall_1_0() { return cFtFTCommandParserRuleCall_1_0; }
	}

	public class AlternativeEditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlternativeEdit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetAlternativeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFtsSetCommandParserRuleCall_1_0 = (RuleCall)cFtsAssignment_1.eContents().get(0);
		
		//// should be a set of features
		//AlternativeEdit:
		//	"setAlternative" fts=SetCommand;
		public ParserRule getRule() { return rule; }

		//"setAlternative" fts=SetCommand
		public Group getGroup() { return cGroup; }

		//"setAlternative"
		public Keyword getSetAlternativeKeyword_0() { return cSetAlternativeKeyword_0; }

		//fts=SetCommand
		public Assignment getFtsAssignment_1() { return cFtsAssignment_1; }

		//SetCommand
		public RuleCall getFtsSetCommandParserRuleCall_1_0() { return cFtsSetCommandParserRuleCall_1_0; }
	}

	public class OrEditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrEdit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFtsSetCommandParserRuleCall_1_0 = (RuleCall)cFtsAssignment_1.eContents().get(0);
		
		//// should be a set of features 
		//OrEdit:
		//	"setOr" fts=SetCommand;
		public ParserRule getRule() { return rule; }

		//"setOr" fts=SetCommand
		public Group getGroup() { return cGroup; }

		//"setOr"
		public Keyword getSetOrKeyword_0() { return cSetOrKeyword_0; }

		//fts=SetCommand
		public Assignment getFtsAssignment_1() { return cFtsAssignment_1; }

		//SetCommand
		public RuleCall getFtsSetCommandParserRuleCall_1_0() { return cFtsSetCommandParserRuleCall_1_0; }
	}

	public class AddConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCstConstraintCommandParserRuleCall_1_0 = (RuleCall)cCstAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFmFMCommandParserRuleCall_3_0 = (RuleCall)cFmAssignment_3.eContents().get(0);
		
		/// ******* CONSTRAINT ******** / // TODO???
		////cst=ConstraintCommand ;
		//AddConstraint:
		//	"addConstraint" cst=ConstraintCommand "to" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"addConstraint" cst=ConstraintCommand "to" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"addConstraint"
		public Keyword getAddConstraintKeyword_0() { return cAddConstraintKeyword_0; }

		//cst=ConstraintCommand
		public Assignment getCstAssignment_1() { return cCstAssignment_1; }

		//ConstraintCommand
		public RuleCall getCstConstraintCommandParserRuleCall_1_0() { return cCstConstraintCommandParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//fm=FMCommand
		public Assignment getFmAssignment_3() { return cFmAssignment_3; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_3_0() { return cFmFMCommandParserRuleCall_3_0; }
	}

	public class RemoveConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCstConstraintCommandParserRuleCall_1_0 = (RuleCall)cCstAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFmFMCommandParserRuleCall_3_0 = (RuleCall)cFmAssignment_3.eContents().get(0);
		
		////TODO //cst=ConstraintCommand ; // LEFT_BRACKET (clause+=CNF ';')+ RIGHT_BRACKET ;
		//RemoveConstraint:
		//	"removeConstraint" cst=ConstraintCommand "in" fm=FMCommand;
		public ParserRule getRule() { return rule; }

		//"removeConstraint" cst=ConstraintCommand "in" fm=FMCommand
		public Group getGroup() { return cGroup; }

		//"removeConstraint"
		public Keyword getRemoveConstraintKeyword_0() { return cRemoveConstraintKeyword_0; }

		//cst=ConstraintCommand
		public Assignment getCstAssignment_1() { return cCstAssignment_1; }

		//ConstraintCommand
		public RuleCall getCstConstraintCommandParserRuleCall_1_0() { return cCstConstraintCommandParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//fm=FMCommand
		public Assignment getFmAssignment_3() { return cFmAssignment_3; }

		//FMCommand
		public RuleCall getFmFMCommandParserRuleCall_3_0() { return cFmFMCommandParserRuleCall_3_0; }
	}

	public class CNFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CNF");
		private final RuleCall cOr_exprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		//CNF: lterm=FeatureTerm (op=(Imply|BiImply) rterm=FeatureTerm)? ;
		//FeatureTerm: ((not?=B_NOT feature=FML_IDENTIFIER) | feature=FML_IDENTIFIER) (op=(AndBoolean|OrBoolean)
		//            rfeature=FeatureTerm)?;
		//
		////ImplyOperator : Imply | Exclude | BiImply ;
		//ImplyOperator : Imply | BiImply ;
		//Imply : name=B_IMPLY;
		////Exclude : name='excludes' ;
		//BiImply : name=B_BIMPLY;
		//
		//
		//
		//
		//BooleanOperator : AndBoolean | OrBoolean ;
		//AndBoolean : name=B_AND ;
		//OrBoolean : name=B_OR ;
		// * / / ***** canonical CNF ******** / //(expr+=Or_expr)+ ;
		//CNF:
		//	Or_expr;
		public ParserRule getRule() { return rule; }

		//Or_expr
		public RuleCall getOr_exprParserRuleCall() { return cOr_exprParserRuleCall; }
	}

	public class Or_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOr_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cB_ORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAnd_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or_expr returns CNFExpression:
		//	And_expr ({Or_expr.left=current} B_OR right=And_expr)*;
		public ParserRule getRule() { return rule; }

		//And_expr ({Or_expr.left=current} B_OR right=And_expr)*
		public Group getGroup() { return cGroup; }

		//And_expr
		public RuleCall getAnd_exprParserRuleCall_0() { return cAnd_exprParserRuleCall_0; }

		//({Or_expr.left=current} B_OR right=And_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or_expr.left=current}
		public Action getOr_exprLeftAction_1_0() { return cOr_exprLeftAction_1_0; }

		//B_OR
		public RuleCall getB_ORTerminalRuleCall_1_1() { return cB_ORTerminalRuleCall_1_1; }

		//right=And_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And_expr
		public RuleCall getRightAnd_exprParserRuleCall_1_2_0() { return cRightAnd_exprParserRuleCall_1_2_0; }
	}

	public class And_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpl_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAnd_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cB_ANDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImpl_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And_expr returns CNFExpression:
		//	Impl_expr ({And_expr.left=current} B_AND right=Impl_expr)*;
		public ParserRule getRule() { return rule; }

		//Impl_expr ({And_expr.left=current} B_AND right=Impl_expr)*
		public Group getGroup() { return cGroup; }

		//Impl_expr
		public RuleCall getImpl_exprParserRuleCall_0() { return cImpl_exprParserRuleCall_0; }

		//({And_expr.left=current} B_AND right=Impl_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{And_expr.left=current}
		public Action getAnd_exprLeftAction_1_0() { return cAnd_exprLeftAction_1_0; }

		//B_AND
		public RuleCall getB_ANDTerminalRuleCall_1_1() { return cB_ANDTerminalRuleCall_1_1; }

		//right=Impl_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Impl_expr
		public RuleCall getRightImpl_exprParserRuleCall_1_2_0() { return cRightImpl_exprParserRuleCall_1_2_0; }
	}

	public class Impl_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Impl_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBiimpl_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpl_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cB_IMPLYTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBiimpl_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Impl_expr returns CNFExpression:
		//	Biimpl_expr ({Impl_expr.left=current} B_IMPLY right=Biimpl_expr)*;
		public ParserRule getRule() { return rule; }

		//Biimpl_expr ({Impl_expr.left=current} B_IMPLY right=Biimpl_expr)*
		public Group getGroup() { return cGroup; }

		//Biimpl_expr
		public RuleCall getBiimpl_exprParserRuleCall_0() { return cBiimpl_exprParserRuleCall_0; }

		//({Impl_expr.left=current} B_IMPLY right=Biimpl_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Impl_expr.left=current}
		public Action getImpl_exprLeftAction_1_0() { return cImpl_exprLeftAction_1_0; }

		//B_IMPLY
		public RuleCall getB_IMPLYTerminalRuleCall_1_1() { return cB_IMPLYTerminalRuleCall_1_1; }

		//right=Biimpl_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Biimpl_expr
		public RuleCall getRightBiimpl_exprParserRuleCall_1_2_0() { return cRightBiimpl_exprParserRuleCall_1_2_0; }
	}

	public class Biimpl_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Biimpl_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBiimpl_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cB_BIMPLYTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnary_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Biimpl_expr returns CNFExpression:
		//	Unary_expr ({Biimpl_expr.left=current} B_BIMPLY right=Unary_expr)*;
		public ParserRule getRule() { return rule; }

		//Unary_expr ({Biimpl_expr.left=current} B_BIMPLY right=Unary_expr)*
		public Group getGroup() { return cGroup; }

		//Unary_expr
		public RuleCall getUnary_exprParserRuleCall_0() { return cUnary_exprParserRuleCall_0; }

		//({Biimpl_expr.left=current} B_BIMPLY right=Unary_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Biimpl_expr.left=current}
		public Action getBiimpl_exprLeftAction_1_0() { return cBiimpl_exprLeftAction_1_0; }

		//B_BIMPLY
		public RuleCall getB_BIMPLYTerminalRuleCall_1_1() { return cB_BIMPLYTerminalRuleCall_1_1; }

		//right=Unary_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Unary_expr
		public RuleCall getRightUnary_exprParserRuleCall_1_2_0() { return cRightUnary_exprParserRuleCall_1_2_0; }
	}

	public class Unary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unary_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNeg_exprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimary_exprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Unary_expr returns CNFExpression:
		//	Neg_expr | Primary_expr;
		public ParserRule getRule() { return rule; }

		//Neg_expr | Primary_expr
		public Alternatives getAlternatives() { return cAlternatives; }

		//Neg_expr
		public RuleCall getNeg_exprParserRuleCall_0() { return cNeg_exprParserRuleCall_0; }

		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_1() { return cPrimary_exprParserRuleCall_1; }
	}

	public class Neg_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Neg_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cB_NOTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprPrimary_exprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		////name=FML_IDENTIFIER ;
		//Neg_expr:
		//	B_NOT expr=Primary_expr;
		public ParserRule getRule() { return rule; }

		//B_NOT expr=Primary_expr
		public Group getGroup() { return cGroup; }

		//B_NOT
		public RuleCall getB_NOTTerminalRuleCall_0() { return cB_NOTTerminalRuleCall_0; }

		//expr=Primary_expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Primary_expr
		public RuleCall getExprPrimary_exprParserRuleCall_1_0() { return cExprPrimary_exprParserRuleCall_1_0; }
	}

	public class Primary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameTrueKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameFalseKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cOr_exprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Primary_expr returns CNFExpression:
		//	name=(ID | "true" | "false") | LEFT_PAREN Or_expr RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//name=(ID | "true" | "false") | LEFT_PAREN Or_expr RIGHT_PAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=(ID | "true" | "false")
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID | "true" | "false"
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//"true"
		public Keyword getNameTrueKeyword_0_0_1() { return cNameTrueKeyword_0_0_1; }

		//"false"
		public Keyword getNameFalseKeyword_0_0_2() { return cNameFalseKeyword_0_0_2; }

		//LEFT_PAREN Or_expr RIGHT_PAREN
		public Group getGroup_1() { return cGroup_1; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1_0() { return cLEFT_PARENTerminalRuleCall_1_0; }

		//Or_expr
		public RuleCall getOr_exprParserRuleCall_1_1() { return cOr_exprParserRuleCall_1_1; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_1_2() { return cRIGHT_PARENTerminalRuleCall_1_2; }
	}

	public class FeatureModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFMKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFeaturemodelKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cLEFT_PARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cRootAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cRootIDTerminalRuleCall_2_0_0_0_0 = (RuleCall)cRootAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Group cGroup_2_0_1_0 = (Group)cGroup_2_0_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_0_1_0_0 = (Assignment)cGroup_2_0_1_0.eContents().get(0);
		private final RuleCall cFeaturesProductionParserRuleCall_2_0_1_0_0_0 = (RuleCall)cFeaturesAssignment_2_0_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_0_1 = (Keyword)cGroup_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Assignment cExprAssignment_2_0_1_1_0 = (Assignment)cGroup_2_0_1_1.eContents().get(0);
		private final RuleCall cExprCNFParserRuleCall_2_0_1_1_0_0 = (RuleCall)cExprAssignment_2_0_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_1_1 = (Keyword)cGroup_2_0_1_1.eContents().get(1);
		private final Assignment cFileAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFileStringExprParserRuleCall_2_1_0 = (RuleCall)cFileAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		/// ******** FEATURE MODEL ************** / FeatureModel:
		//	("FM" | "featuremodel") LEFT_PAREN ((root=ID ";" | (features+=Production ";")+ (expr+=CNF ";")*) | file=StringExpr)
		//	RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//("FM" | "featuremodel") LEFT_PAREN ((root=ID ";" | (features+=Production ";")+ (expr+=CNF ";")*) | file=StringExpr)
		//RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//"FM" | "featuremodel"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"FM"
		public Keyword getFMKeyword_0_0() { return cFMKeyword_0_0; }

		//"featuremodel"
		public Keyword getFeaturemodelKeyword_0_1() { return cFeaturemodelKeyword_0_1; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_1() { return cLEFT_PARENTerminalRuleCall_1; }

		//(root=ID ";" | (features+=Production ";")+ (expr+=CNF ";")*) | file=StringExpr
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//root=ID ";" | (features+=Production ";")+ (expr+=CNF ";")*
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//root=ID ";"
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//root=ID
		public Assignment getRootAssignment_2_0_0_0() { return cRootAssignment_2_0_0_0; }

		//ID
		public RuleCall getRootIDTerminalRuleCall_2_0_0_0_0() { return cRootIDTerminalRuleCall_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }

		//(features+=Production ";")+ (expr+=CNF ";")*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//(features+=Production ";")+
		public Group getGroup_2_0_1_0() { return cGroup_2_0_1_0; }

		//features+=Production
		public Assignment getFeaturesAssignment_2_0_1_0_0() { return cFeaturesAssignment_2_0_1_0_0; }

		//Production
		public RuleCall getFeaturesProductionParserRuleCall_2_0_1_0_0_0() { return cFeaturesProductionParserRuleCall_2_0_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_0_1() { return cSemicolonKeyword_2_0_1_0_1; }

		//(expr+=CNF ";")*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }

		//expr+=CNF
		public Assignment getExprAssignment_2_0_1_1_0() { return cExprAssignment_2_0_1_1_0; }

		//CNF
		public RuleCall getExprCNFParserRuleCall_2_0_1_1_0_0() { return cExprCNFParserRuleCall_2_0_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_1_1() { return cSemicolonKeyword_2_0_1_1_1; }

		//file=StringExpr
		public Assignment getFileAssignment_2_1() { return cFileAssignment_2_1; }

		//StringExpr
		public RuleCall getFileStringExprParserRuleCall_2_1_0() { return cFileStringExprParserRuleCall_2_1_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_3() { return cRIGHT_PARENTerminalRuleCall_3; }
	}

	public class ProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Production");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesChildParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		
		////expr+=Fexpr
		////FeatureDescription : Production | Expr ;
		//Production:
		//	name=ID ":" features+=Child+;
		public ParserRule getRule() { return rule; }

		//name=ID ":" features+=Child+
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//features+=Child+
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//Child
		public RuleCall getFeaturesChildParserRuleCall_2_0() { return cFeaturesChildParserRuleCall_2_0; }
	}

	public class ChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Child");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXorgroupParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrgroupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMutexgroupParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Child:
		//	Mandatory //                );             
		//	| Optional | Xorgroup | Orgroup | Mutexgroup;
		public ParserRule getRule() { return rule; }

		//Mandatory //                );             
		//| Optional | Xorgroup | Orgroup | Mutexgroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mandatory
		public RuleCall getMandatoryParserRuleCall_0() { return cMandatoryParserRuleCall_0; }

		//Optional
		public RuleCall getOptionalParserRuleCall_1() { return cOptionalParserRuleCall_1; }

		//Xorgroup
		public RuleCall getXorgroupParserRuleCall_2() { return cXorgroupParserRuleCall_2; }

		//Orgroup
		public RuleCall getOrgroupParserRuleCall_3() { return cOrgroupParserRuleCall_3; }

		//Mutexgroup
		public RuleCall getMutexgroupParserRuleCall_4() { return cMutexgroupParserRuleCall_4; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameFT_IDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////                | Andgroup)  ;
		//Mandatory:
		//	name=FT_ID;
		public ParserRule getRule() { return rule; }

		//name=FT_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//FT_ID
		public RuleCall getNameFT_IDParserRuleCall_0() { return cNameFT_IDParserRuleCall_0; }
	}

	public class OptionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Optional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_HOOKTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cRIGHT_HOOKTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////Optional    : name=FML_IDENTIFIER '?' | '[' name=FML_IDENTIFIER ']' ;
		//Optional:
		//	LEFT_HOOK name=ID RIGHT_HOOK;
		public ParserRule getRule() { return rule; }

		//LEFT_HOOK name=ID RIGHT_HOOK
		public Group getGroup() { return cGroup; }

		//LEFT_HOOK
		public RuleCall getLEFT_HOOKTerminalRuleCall_0() { return cLEFT_HOOKTerminalRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//RIGHT_HOOK
		public RuleCall getRIGHT_HOOKTerminalRuleCall_2() { return cRIGHT_HOOKTerminalRuleCall_2; }
	}

	public class XorgroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xorgroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_PARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFT_IDParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cB_ORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesFT_IDParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Xorgroup:
		//	LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ RIGHT_PAREN;
		public ParserRule getRule() { return rule; }

		//LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ RIGHT_PAREN
		public Group getGroup() { return cGroup; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_0() { return cLEFT_PARENTerminalRuleCall_0; }

		//features+=FT_ID
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_1_0() { return cFeaturesFT_IDParserRuleCall_1_0; }

		//(B_OR features+=FT_ID)+
		public Group getGroup_2() { return cGroup_2; }

		//B_OR
		public RuleCall getB_ORTerminalRuleCall_2_0() { return cB_ORTerminalRuleCall_2_0; }

		//features+=FT_ID
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_2_1_0() { return cFeaturesFT_IDParserRuleCall_2_1_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_3() { return cRIGHT_PARENTerminalRuleCall_3; }
	}

	public class OrgroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Orgroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_PARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFT_IDParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cB_ORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesFT_IDParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPLUSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Orgroup:
		//	LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ RIGHT_PAREN PLUS;
		public ParserRule getRule() { return rule; }

		//LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ RIGHT_PAREN PLUS
		public Group getGroup() { return cGroup; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_0() { return cLEFT_PARENTerminalRuleCall_0; }

		//features+=FT_ID
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_1_0() { return cFeaturesFT_IDParserRuleCall_1_0; }

		//(B_OR features+=FT_ID)+
		public Group getGroup_2() { return cGroup_2; }

		//B_OR
		public RuleCall getB_ORTerminalRuleCall_2_0() { return cB_ORTerminalRuleCall_2_0; }

		//features+=FT_ID
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_2_1_0() { return cFeaturesFT_IDParserRuleCall_2_1_0; }

		//RIGHT_PAREN
		public RuleCall getRIGHT_PARENTerminalRuleCall_3() { return cRIGHT_PARENTerminalRuleCall_3; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_4() { return cPLUSTerminalRuleCall_4; }
	}

	public class MutexgroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mutexgroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_PARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cFeaturesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeaturesFT_IDParserRuleCall_1_0 = (RuleCall)cFeaturesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cB_ORTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeaturesFT_IDParserRuleCall_2_1_0 = (RuleCall)cFeaturesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisQuestionMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Andgroup   : LEFT_PAREN features+=FT_ID ('|' features+=FT_ID)+ RIGHT_PAREN ; // TODO: (identifier=FML_IDENTIFIER '=')?
		//Mutexgroup:
		//	LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ ")?";
		public ParserRule getRule() { return rule; }

		//LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ ")?"
		public Group getGroup() { return cGroup; }

		//LEFT_PAREN
		public RuleCall getLEFT_PARENTerminalRuleCall_0() { return cLEFT_PARENTerminalRuleCall_0; }

		//features+=FT_ID
		public Assignment getFeaturesAssignment_1() { return cFeaturesAssignment_1; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_1_0() { return cFeaturesFT_IDParserRuleCall_1_0; }

		//(B_OR features+=FT_ID)+
		public Group getGroup_2() { return cGroup_2; }

		//B_OR
		public RuleCall getB_ORTerminalRuleCall_2_0() { return cB_ORTerminalRuleCall_2_0; }

		//features+=FT_ID
		public Assignment getFeaturesAssignment_2_1() { return cFeaturesAssignment_2_1; }

		//FT_ID
		public RuleCall getFeaturesFT_IDParserRuleCall_2_1_0() { return cFeaturesFT_IDParserRuleCall_2_1_0; }

		//")?"
		public Keyword getRightParenthesisQuestionMarkKeyword_3() { return cRightParenthesisQuestionMarkKeyword_3; }
	}

	public class FT_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FT_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////terminal QUOTE :  '"' ;
		////IDENTIFIER :
		////terminal FML_IDENTIFIER : ID ; //Letter (Letter | DIGIT)*;
		//// TODO: abstract feature / concrete feature
		//// setAbstract or FM (A : B C D ; abstract D : (E|F|G) ; )
		//// feature ID
		//FT_ID:
		//	(ID | "$") ("." ID)*;
		public ParserRule getRule() { return rule; }

		//(ID | "$") ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID | "$"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"$"
		public Keyword getDollarSignKeyword_0_1() { return cDollarSignKeyword_0_1; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class FML_IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FML_IDENTIFIER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1_1_0 = (RuleCall)cAlternatives_0_1_1.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_1_1_1 = (Keyword)cAlternatives_0_1_1.eContents().get(1);
		private final RuleCall cSTARTerminalRuleCall_0_1_1_2 = (RuleCall)cAlternatives_0_1_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSTARTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////terminal Letter :  'a'..'z' |  'A'..'Z' |  '_' |  '.' ;
		////terminal DIGIT :  '0'..'9';
		//FML_IDENTIFIER:
		//	(ID | "$") ("." (ID | "$" | STAR))* | ID STAR;
		public ParserRule getRule() { return rule; }

		//(ID | "$") ("." (ID | "$" | STAR))* //terminal Letter :  'a'..'z' |  'A'..'Z' |  '_' |  '.' ;
		////terminal DIGIT :  '0'..'9';
		//| ID STAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//(ID | "$") ("." (ID | "$" | STAR))*
		public Group getGroup_0() { return cGroup_0; }

		//ID | "$"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0_0() { return cIDTerminalRuleCall_0_0_0; }

		//"$"
		public Keyword getDollarSignKeyword_0_0_1() { return cDollarSignKeyword_0_0_1; }

		//("." (ID | "$" | STAR))*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//ID | "$" | STAR
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1_0() { return cIDTerminalRuleCall_0_1_1_0; }

		//"$"
		public Keyword getDollarSignKeyword_0_1_1_1() { return cDollarSignKeyword_0_1_1_1; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_0_1_1_2() { return cSTARTerminalRuleCall_0_1_1_2; }

		//ID STAR //terminal Letter :  'a'..'z' |  'A'..'Z' |  '_' |  '.' ;
		////terminal DIGIT :  '0'..'9';
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		////terminal Letter :  'a'..'z' |  'A'..'Z' |  '_' |  '.' ;
		////terminal DIGIT :  '0'..'9';
		//STAR
		public RuleCall getSTARTerminalRuleCall_1_1() { return cSTARTerminalRuleCall_1_1; }
	}
	
	
	public class EditConstantElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EditConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREFACTORINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREFACTORINGREFACTORINGKeyword_0_0 = (Keyword)cREFACTORINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSPECIALIZATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSPECIALIZATIONSPECIALIZATIONKeyword_1_0 = (Keyword)cSPECIALIZATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGENERALIZATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGENERALIZATIONGENERALIZATIONKeyword_2_0 = (Keyword)cGENERALIZATIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cARBITRARYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cARBITRARYARBITRARYKeyword_3_0 = (Keyword)cARBITRARYEnumLiteralDeclaration_3.eContents().get(0);
		
		////ConstraintExpr : 'constraints' LEFT_BRACKET (constraints+=CNF ';')+ RIGHT_BRACKET ;
		//enum EditConstant:
		//	REFACTORING | SPECIALIZATION | GENERALIZATION | ARBITRARY;
		public EnumRule getRule() { return rule; }

		//REFACTORING | SPECIALIZATION | GENERALIZATION | ARBITRARY
		public Alternatives getAlternatives() { return cAlternatives; }

		//REFACTORING
		public EnumLiteralDeclaration getREFACTORINGEnumLiteralDeclaration_0() { return cREFACTORINGEnumLiteralDeclaration_0; }

		//"REFACTORING"
		public Keyword getREFACTORINGREFACTORINGKeyword_0_0() { return cREFACTORINGREFACTORINGKeyword_0_0; }

		//SPECIALIZATION
		public EnumLiteralDeclaration getSPECIALIZATIONEnumLiteralDeclaration_1() { return cSPECIALIZATIONEnumLiteralDeclaration_1; }

		//"SPECIALIZATION"
		public Keyword getSPECIALIZATIONSPECIALIZATIONKeyword_1_0() { return cSPECIALIZATIONSPECIALIZATIONKeyword_1_0; }

		//GENERALIZATION
		public EnumLiteralDeclaration getGENERALIZATIONEnumLiteralDeclaration_2() { return cGENERALIZATIONEnumLiteralDeclaration_2; }

		//"GENERALIZATION"
		public Keyword getGENERALIZATIONGENERALIZATIONKeyword_2_0() { return cGENERALIZATIONGENERALIZATIONKeyword_2_0; }

		//ARBITRARY
		public EnumLiteralDeclaration getARBITRARYEnumLiteralDeclaration_3() { return cARBITRARYEnumLiteralDeclaration_3; }

		//"ARBITRARY"
		public Keyword getARBITRARYARBITRARYKeyword_3_0() { return cARBITRARYARBITRARYKeyword_3_0; }
	}

	public class FeatureEdgeKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureEdgeKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMANDATORYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMANDATORYMandKeyword_0_0 = (Keyword)cMANDATORYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOPTIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOPTIONALOptKeyword_1_0 = (Keyword)cOPTIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALTERNATIVEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALTERNATIVEXorKeyword_2_0 = (Keyword)cALTERNATIVEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOROrKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMUTEXEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMUTEXMutexKeyword_4_0 = (Keyword)cMUTEXEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum FeatureEdgeKind:
		//	MANDATORY="mand" | OPTIONAL="opt" | ALTERNATIVE="Xor" | OR="Or" | MUTEX="Mutex";
		public EnumRule getRule() { return rule; }

		//MANDATORY="mand" | OPTIONAL="opt" | ALTERNATIVE="Xor" | OR="Or" | MUTEX="Mutex"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MANDATORY="mand"
		public EnumLiteralDeclaration getMANDATORYEnumLiteralDeclaration_0() { return cMANDATORYEnumLiteralDeclaration_0; }

		//"mand"
		public Keyword getMANDATORYMandKeyword_0_0() { return cMANDATORYMandKeyword_0_0; }

		//OPTIONAL="opt"
		public EnumLiteralDeclaration getOPTIONALEnumLiteralDeclaration_1() { return cOPTIONALEnumLiteralDeclaration_1; }

		//"opt"
		public Keyword getOPTIONALOptKeyword_1_0() { return cOPTIONALOptKeyword_1_0; }

		//ALTERNATIVE="Xor"
		public EnumLiteralDeclaration getALTERNATIVEEnumLiteralDeclaration_2() { return cALTERNATIVEEnumLiteralDeclaration_2; }

		//"Xor"
		public Keyword getALTERNATIVEXorKeyword_2_0() { return cALTERNATIVEXorKeyword_2_0; }

		//OR="Or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }

		//"Or"
		public Keyword getOROrKeyword_3_0() { return cOROrKeyword_3_0; }

		//MUTEX="Mutex"
		public EnumLiteralDeclaration getMUTEXEnumLiteralDeclaration_4() { return cMUTEXEnumLiteralDeclaration_4; }

		//"Mutex"
		public Keyword getMUTEXMutexKeyword_4_0() { return cMUTEXMutexKeyword_4_0; }
	}

	public class KindOfGetElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfGet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIERARCHY_IMPLIESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIERARCHY_IMPLIESGetImpliesHierarchyKeyword_0_0 = (Keyword)cHIERARCHY_IMPLIESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHIERARCHY_EXCLUDESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHIERARCHY_EXCLUDESGetExcludesHierarchyKeyword_1_0 = (Keyword)cHIERARCHY_EXCLUDESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHIERARCHY_BIIMPLIESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHIERARCHY_BIIMPLIESGetBiimpliesHierarchyKeyword_2_0 = (Keyword)cHIERARCHY_BIIMPLIESEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTRAINT_IMPLIESEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCONSTRAINT_IMPLIESGetImpliesConstraintKeyword_3_0 = (Keyword)cCONSTRAINT_IMPLIESEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTRAINT_EXCLUDESEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCONSTRAINT_EXCLUDESGetExcludesConstraintKeyword_4_0 = (Keyword)cCONSTRAINT_EXCLUDESEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTRAINT_BIIMPLIESEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCONSTRAINT_BIIMPLIESGetBiimpliesConstraintKeyword_5_0 = (Keyword)cCONSTRAINT_BIIMPLIESEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum KindOfGet:
		//	HIERARCHY_IMPLIES="getImpliesHierarchy" | HIERARCHY_EXCLUDES="getExcludesHierarchy" |
		//	HIERARCHY_BIIMPLIES="getBiimpliesHierarchy" | CONSTRAINT_IMPLIES="getImpliesConstraint" |
		//	CONSTRAINT_EXCLUDES="getExcludesConstraint" | CONSTRAINT_BIIMPLIES="getBiimpliesConstraint";
		public EnumRule getRule() { return rule; }

		//HIERARCHY_IMPLIES="getImpliesHierarchy" | HIERARCHY_EXCLUDES="getExcludesHierarchy" |
		//HIERARCHY_BIIMPLIES="getBiimpliesHierarchy" | CONSTRAINT_IMPLIES="getImpliesConstraint" |
		//CONSTRAINT_EXCLUDES="getExcludesConstraint" | CONSTRAINT_BIIMPLIES="getBiimpliesConstraint"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HIERARCHY_IMPLIES="getImpliesHierarchy"
		public EnumLiteralDeclaration getHIERARCHY_IMPLIESEnumLiteralDeclaration_0() { return cHIERARCHY_IMPLIESEnumLiteralDeclaration_0; }

		//"getImpliesHierarchy"
		public Keyword getHIERARCHY_IMPLIESGetImpliesHierarchyKeyword_0_0() { return cHIERARCHY_IMPLIESGetImpliesHierarchyKeyword_0_0; }

		//HIERARCHY_EXCLUDES="getExcludesHierarchy"
		public EnumLiteralDeclaration getHIERARCHY_EXCLUDESEnumLiteralDeclaration_1() { return cHIERARCHY_EXCLUDESEnumLiteralDeclaration_1; }

		//"getExcludesHierarchy"
		public Keyword getHIERARCHY_EXCLUDESGetExcludesHierarchyKeyword_1_0() { return cHIERARCHY_EXCLUDESGetExcludesHierarchyKeyword_1_0; }

		//HIERARCHY_BIIMPLIES="getBiimpliesHierarchy"
		public EnumLiteralDeclaration getHIERARCHY_BIIMPLIESEnumLiteralDeclaration_2() { return cHIERARCHY_BIIMPLIESEnumLiteralDeclaration_2; }

		//"getBiimpliesHierarchy"
		public Keyword getHIERARCHY_BIIMPLIESGetBiimpliesHierarchyKeyword_2_0() { return cHIERARCHY_BIIMPLIESGetBiimpliesHierarchyKeyword_2_0; }

		//CONSTRAINT_IMPLIES="getImpliesConstraint"
		public EnumLiteralDeclaration getCONSTRAINT_IMPLIESEnumLiteralDeclaration_3() { return cCONSTRAINT_IMPLIESEnumLiteralDeclaration_3; }

		//"getImpliesConstraint"
		public Keyword getCONSTRAINT_IMPLIESGetImpliesConstraintKeyword_3_0() { return cCONSTRAINT_IMPLIESGetImpliesConstraintKeyword_3_0; }

		//CONSTRAINT_EXCLUDES="getExcludesConstraint"
		public EnumLiteralDeclaration getCONSTRAINT_EXCLUDESEnumLiteralDeclaration_4() { return cCONSTRAINT_EXCLUDESEnumLiteralDeclaration_4; }

		//"getExcludesConstraint"
		public Keyword getCONSTRAINT_EXCLUDESGetExcludesConstraintKeyword_4_0() { return cCONSTRAINT_EXCLUDESGetExcludesConstraintKeyword_4_0; }

		//CONSTRAINT_BIIMPLIES="getBiimpliesConstraint"
		public EnumLiteralDeclaration getCONSTRAINT_BIIMPLIESEnumLiteralDeclaration_5() { return cCONSTRAINT_BIIMPLIESEnumLiteralDeclaration_5; }

		//"getBiimpliesConstraint"
		public Keyword getCONSTRAINT_BIIMPLIESGetBiimpliesConstraintKeyword_5_0() { return cCONSTRAINT_BIIMPLIESGetBiimpliesConstraintKeyword_5_0; }
	}

	public class KindOfComputeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfCompute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIMPLIESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIMPLIESComputeImpliesKeyword_0_0 = (Keyword)cIMPLIESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXCLUDESComputeExcludesKeyword_1_0 = (Keyword)cEXCLUDESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIIMPLIESEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBIIMPLIESComputeBiimpliesKeyword_2_0 = (Keyword)cBIIMPLIESEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum KindOfCompute:
		//	IMPLIES="computeImplies" | EXCLUDES="computeExcludes" | BIIMPLIES="computeBiimplies";
		public EnumRule getRule() { return rule; }

		//IMPLIES="computeImplies" | EXCLUDES="computeExcludes" | BIIMPLIES="computeBiimplies"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IMPLIES="computeImplies"
		public EnumLiteralDeclaration getIMPLIESEnumLiteralDeclaration_0() { return cIMPLIESEnumLiteralDeclaration_0; }

		//"computeImplies"
		public Keyword getIMPLIESComputeImpliesKeyword_0_0() { return cIMPLIESComputeImpliesKeyword_0_0; }

		//EXCLUDES="computeExcludes"
		public EnumLiteralDeclaration getEXCLUDESEnumLiteralDeclaration_1() { return cEXCLUDESEnumLiteralDeclaration_1; }

		//"computeExcludes"
		public Keyword getEXCLUDESComputeExcludesKeyword_1_0() { return cEXCLUDESComputeExcludesKeyword_1_0; }

		//BIIMPLIES="computeBiimplies"
		public EnumLiteralDeclaration getBIIMPLIESEnumLiteralDeclaration_2() { return cBIIMPLIESEnumLiteralDeclaration_2; }

		//"computeBiimplies"
		public Keyword getBIIMPLIESComputeBiimpliesKeyword_2_0() { return cBIIMPLIESComputeBiimpliesKeyword_2_0; }
	}

	public class KindOfGetGroupsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfGetGroups");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORGetORGroupsKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXORGetXORGroupsKeyword_1_0 = (Keyword)cXOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMUTEXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMUTEXGetMUTEXGroupsKeyword_2_0 = (Keyword)cMUTEXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum KindOfGetGroups:
		//	OR="getORGroups" | XOR="getXORGroups" | MUTEX="getMUTEXGroups";
		public EnumRule getRule() { return rule; }

		//OR="getORGroups" | XOR="getXORGroups" | MUTEX="getMUTEXGroups"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR="getORGroups"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }

		//"getORGroups"
		public Keyword getORGetORGroupsKeyword_0_0() { return cORGetORGroupsKeyword_0_0; }

		//XOR="getXORGroups"
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_1() { return cXOREnumLiteralDeclaration_1; }

		//"getXORGroups"
		public Keyword getXORGetXORGroupsKeyword_1_0() { return cXORGetXORGroupsKeyword_1_0; }

		//MUTEX="getMUTEXGroups"
		public EnumLiteralDeclaration getMUTEXEnumLiteralDeclaration_2() { return cMUTEXEnumLiteralDeclaration_2; }

		//"getMUTEXGroups"
		public Keyword getMUTEXGetMUTEXGroupsKeyword_2_0() { return cMUTEXGetMUTEXGroupsKeyword_2_0; }
	}

	public class KindOfComputeGroupsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfComputeGroups");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORComputeORGroupsKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXORComputeXORGroupsKeyword_1_0 = (Keyword)cXOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMUTEXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMUTEXComputeMUTEXGroupsKeyword_2_0 = (Keyword)cMUTEXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum KindOfComputeGroups:
		//	OR="computeORGroups" | XOR="computeXORGroups" | MUTEX="computeMUTEXGroups";
		public EnumRule getRule() { return rule; }

		//OR="computeORGroups" | XOR="computeXORGroups" | MUTEX="computeMUTEXGroups"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR="computeORGroups"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }

		//"computeORGroups"
		public Keyword getORComputeORGroupsKeyword_0_0() { return cORComputeORGroupsKeyword_0_0; }

		//XOR="computeXORGroups"
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_1() { return cXOREnumLiteralDeclaration_1; }

		//"computeXORGroups"
		public Keyword getXORComputeXORGroupsKeyword_1_0() { return cXORComputeXORGroupsKeyword_1_0; }

		//MUTEX="computeMUTEXGroups"
		public EnumLiteralDeclaration getMUTEXEnumLiteralDeclaration_2() { return cMUTEXEnumLiteralDeclaration_2; }

		//"computeMUTEXGroups"
		public Keyword getMUTEXComputeMUTEXGroupsKeyword_2_0() { return cMUTEXComputeMUTEXGroupsKeyword_2_0; }
	}

	public class BDDBackendElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BDDBackend");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBDD_DEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBDD_DEFAULTBackendDEFAULTKeyword_0_0 = (Keyword)cBDD_DEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBDD_BASICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBDD_BASICBackendBDDKeyword_1_0 = (Keyword)cBDD_BASICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBDD_SPLOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBDD_SPLOTBackendBDD_SPLOTKeyword_2_0 = (Keyword)cBDD_SPLOTEnumLiteralDeclaration_2.eContents().get(0);
		
		////(pre=Predirectives)?
		////(post=Postdirectives)?; // alignment directives
		//// BDD-DEFAULT is a workaround
		//// TODO integrate new results with SAT
		//enum BDDBackend:
		//	BDD_DEFAULT="@backend=DEFAULT" | BDD_BASIC="@backend=BDD" | BDD_SPLOT="@backend=BDD_SPLOT";
		public EnumRule getRule() { return rule; }

		//BDD_DEFAULT="@backend=DEFAULT" | BDD_BASIC="@backend=BDD" | BDD_SPLOT="@backend=BDD_SPLOT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BDD_DEFAULT="@backend=DEFAULT"
		public EnumLiteralDeclaration getBDD_DEFAULTEnumLiteralDeclaration_0() { return cBDD_DEFAULTEnumLiteralDeclaration_0; }

		//"@backend=DEFAULT"
		public Keyword getBDD_DEFAULTBackendDEFAULTKeyword_0_0() { return cBDD_DEFAULTBackendDEFAULTKeyword_0_0; }

		//BDD_BASIC="@backend=BDD"
		public EnumLiteralDeclaration getBDD_BASICEnumLiteralDeclaration_1() { return cBDD_BASICEnumLiteralDeclaration_1; }

		//"@backend=BDD"
		public Keyword getBDD_BASICBackendBDDKeyword_1_0() { return cBDD_BASICBackendBDDKeyword_1_0; }

		//BDD_SPLOT="@backend=BDD_SPLOT"
		public EnumLiteralDeclaration getBDD_SPLOTEnumLiteralDeclaration_2() { return cBDD_SPLOTEnumLiteralDeclaration_2; }

		//"@backend=BDD_SPLOT"
		public Keyword getBDD_SPLOTBackendBDD_SPLOTKeyword_2_0() { return cBDD_SPLOTBackendBDD_SPLOTKeyword_2_0; }
	}

	public class MergeModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MergeMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCROSSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCROSSCrossproductKeyword_0_0 = (Keyword)cCROSSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNIONUnionKeyword_1_0 = (Keyword)cUNIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUNIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUNIONSunionKeyword_2_0 = (Keyword)cSUNIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTERIntersectionKeyword_3_0 = (Keyword)cINTEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDIFFDiffKeyword_4_0 = (Keyword)cDIFFEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum MergeMode:
		//	CROSS="crossproduct" | UNION="union" | SUNION="sunion" | INTER="intersection" | DIFF="diff";
		public EnumRule getRule() { return rule; }

		//CROSS="crossproduct" | UNION="union" | SUNION="sunion" | INTER="intersection" | DIFF="diff"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CROSS="crossproduct"
		public EnumLiteralDeclaration getCROSSEnumLiteralDeclaration_0() { return cCROSSEnumLiteralDeclaration_0; }

		//"crossproduct"
		public Keyword getCROSSCrossproductKeyword_0_0() { return cCROSSCrossproductKeyword_0_0; }

		//UNION="union"
		public EnumLiteralDeclaration getUNIONEnumLiteralDeclaration_1() { return cUNIONEnumLiteralDeclaration_1; }

		//"union"
		public Keyword getUNIONUnionKeyword_1_0() { return cUNIONUnionKeyword_1_0; }

		//SUNION="sunion"
		public EnumLiteralDeclaration getSUNIONEnumLiteralDeclaration_2() { return cSUNIONEnumLiteralDeclaration_2; }

		//"sunion"
		public Keyword getSUNIONSunionKeyword_2_0() { return cSUNIONSunionKeyword_2_0; }

		//INTER="intersection"
		public EnumLiteralDeclaration getINTEREnumLiteralDeclaration_3() { return cINTEREnumLiteralDeclaration_3; }

		//"intersection"
		public Keyword getINTERIntersectionKeyword_3_0() { return cINTERIntersectionKeyword_3_0; }

		//DIFF="diff"
		public EnumLiteralDeclaration getDIFFEnumLiteralDeclaration_4() { return cDIFFEnumLiteralDeclaration_4; }

		//"diff"
		public Keyword getDIFFDiffKeyword_4_0() { return cDIFFDiffKeyword_4_0; }
	}

	public class HierarchyStrategyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HierarchyStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBASICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBASICBasicKeyword_0_0 = (Keyword)cBASICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFLATEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFLATFlatKeyword_1_0 = (Keyword)cFLATEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMSTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMSTMstKeyword_2_0 = (Keyword)cMSTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HierarchyStrategy:
		//	BASIC="=basic" | FLAT="=flat" | MST="=mst";
		public EnumRule getRule() { return rule; }

		//BASIC="=basic" | FLAT="=flat" | MST="=mst"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BASIC="=basic"
		public EnumLiteralDeclaration getBASICEnumLiteralDeclaration_0() { return cBASICEnumLiteralDeclaration_0; }

		//"=basic"
		public Keyword getBASICBasicKeyword_0_0() { return cBASICBasicKeyword_0_0; }

		//FLAT="=flat"
		public EnumLiteralDeclaration getFLATEnumLiteralDeclaration_1() { return cFLATEnumLiteralDeclaration_1; }

		//"=flat"
		public Keyword getFLATFlatKeyword_1_0() { return cFLATFlatKeyword_1_0; }

		//MST="=mst"
		public EnumLiteralDeclaration getMSTEnumLiteralDeclaration_2() { return cMSTEnumLiteralDeclaration_2; }

		//"=mst"
		public Keyword getMSTMstKeyword_2_0() { return cMSTMstKeyword_2_0; }
	}

	public class SliceModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SliceMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCLUDINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCLUDINGIncludingKeyword_0_0 = (Keyword)cINCLUDINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXCLUDINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXCLUDINGExcludingKeyword_1_0 = (Keyword)cEXCLUDINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SliceMode:
		//	INCLUDING="including" | EXCLUDING="excluding";
		public EnumRule getRule() { return rule; }

		//INCLUDING="including" | EXCLUDING="excluding"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INCLUDING="including"
		public EnumLiteralDeclaration getINCLUDINGEnumLiteralDeclaration_0() { return cINCLUDINGEnumLiteralDeclaration_0; }

		//"including"
		public Keyword getINCLUDINGIncludingKeyword_0_0() { return cINCLUDINGIncludingKeyword_0_0; }

		//EXCLUDING="excluding"
		public EnumLiteralDeclaration getEXCLUDINGEnumLiteralDeclaration_1() { return cEXCLUDINGEnumLiteralDeclaration_1; }

		//"excluding"
		public Keyword getEXCLUDINGExcludingKeyword_1_0() { return cEXCLUDINGExcludingKeyword_1_0; }
	}

	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualNeqKeyword_1_0 = (Keyword)cNotEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLesserThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLesserThanLessThanSignKeyword_2_0 = (Keyword)cLesserThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanGreaterThanSignKeyword_3_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cREF_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cREF_EQUALEqualsSignEqualsSignKeyword_4_0 = (Keyword)cREF_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cREF_NotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cREF_NotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cREF_NotEqualEnumLiteralDeclaration_5.eContents().get(0);
		
		////| IntegerOperator ) ;
		//enum ComparisonOperator:
		//	EQUAL="eq" | NotEqual="neq" | LesserThan="<" | GreaterThan=">" | REF_EQUAL="==" | REF_NotEqual="!=";
		public EnumRule getRule() { return rule; }

		//EQUAL="eq" | NotEqual="neq" | LesserThan="<" | GreaterThan=">" | REF_EQUAL="==" | REF_NotEqual="!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="eq"
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"eq"
		public Keyword getEQUALEqKeyword_0_0() { return cEQUALEqKeyword_0_0; }

		//NotEqual="neq"
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_1() { return cNotEqualEnumLiteralDeclaration_1; }

		//"neq"
		public Keyword getNotEqualNeqKeyword_1_0() { return cNotEqualNeqKeyword_1_0; }

		//LesserThan="<"
		public EnumLiteralDeclaration getLesserThanEnumLiteralDeclaration_2() { return cLesserThanEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLesserThanLessThanSignKeyword_2_0() { return cLesserThanLessThanSignKeyword_2_0; }

		//GreaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_3() { return cGreaterThanEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_3_0() { return cGreaterThanGreaterThanSignKeyword_3_0; }

		//REF_EQUAL="=="
		public EnumLiteralDeclaration getREF_EQUALEnumLiteralDeclaration_4() { return cREF_EQUALEnumLiteralDeclaration_4; }

		//"=="
		public Keyword getREF_EQUALEqualsSignEqualsSignKeyword_4_0() { return cREF_EQUALEqualsSignEqualsSignKeyword_4_0; }

		//REF_NotEqual="!="
		public EnumLiteralDeclaration getREF_NotEqualEnumLiteralDeclaration_5() { return cREF_NotEqualEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getREF_NotEqualExclamationMarkEqualsSignKeyword_5_0() { return cREF_NotEqualExclamationMarkEqualsSignKeyword_5_0; }
	}

	public class SetOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SetOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUNIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUNIONPlusSignPlusSignKeyword_0_0 = (Keyword)cSUNIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSDIFFEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSDIFFHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cSDIFFEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SetOperator:
		//	SUNION="++" | SDIFF="--";
		public EnumRule getRule() { return rule; }

		//SUNION="++" | SDIFF="--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SUNION="++"
		public EnumLiteralDeclaration getSUNIONEnumLiteralDeclaration_0() { return cSUNIONEnumLiteralDeclaration_0; }

		//"++"
		public Keyword getSUNIONPlusSignPlusSignKeyword_0_0() { return cSUNIONPlusSignPlusSignKeyword_0_0; }

		//SDIFF="--"
		public EnumLiteralDeclaration getSDIFFEnumLiteralDeclaration_1() { return cSDIFFEnumLiteralDeclaration_1; }

		//"--"
		public Keyword getSDIFFHyphenMinusHyphenMinusKeyword_1_0() { return cSDIFFHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class OpSelectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OpSelection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSELECTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSELECTSelectKeyword_0_0 = (Keyword)cSELECTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDESELECTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDESELECTDeselectKeyword_1_0 = (Keyword)cDESELECTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNSELECTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNSELECTUnselectKeyword_2_0 = (Keyword)cUNSELECTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OpSelection:
		//	SELECT="select" | DESELECT="deselect" | UNSELECT="unselect";
		public EnumRule getRule() { return rule; }

		//SELECT="select" | DESELECT="deselect" | UNSELECT="unselect"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SELECT="select"
		public EnumLiteralDeclaration getSELECTEnumLiteralDeclaration_0() { return cSELECTEnumLiteralDeclaration_0; }

		//"select"
		public Keyword getSELECTSelectKeyword_0_0() { return cSELECTSelectKeyword_0_0; }

		//DESELECT="deselect"
		public EnumLiteralDeclaration getDESELECTEnumLiteralDeclaration_1() { return cDESELECTEnumLiteralDeclaration_1; }

		//"deselect"
		public Keyword getDESELECTDeselectKeyword_1_0() { return cDESELECTDeselectKeyword_1_0; }

		//UNSELECT="unselect"
		public EnumLiteralDeclaration getUNSELECTEnumLiteralDeclaration_2() { return cUNSELECTEnumLiteralDeclaration_2; }

		//"unselect"
		public Keyword getUNSELECTUnselectKeyword_2_0() { return cUNSELECTUnselectKeyword_2_0; }
	}

	public class AutoConfModeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AutoConfMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRANDOMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRANDOMRANDOMKeyword_0_0 = (Keyword)cRANDOMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMAXMAXKeyword_1_0 = (Keyword)cMAXEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINMINKeyword_2_0 = (Keyword)cMINEnumLiteralDeclaration_2.eContents().get(0);
		
		//// current strategies to populate a configuration: select the maximum/minimum number of features or randomly
		//enum AutoConfMode:
		//	RANDOM | MAX | MIN;
		public EnumRule getRule() { return rule; }

		//RANDOM | MAX | MIN
		public Alternatives getAlternatives() { return cAlternatives; }

		//RANDOM
		public EnumLiteralDeclaration getRANDOMEnumLiteralDeclaration_0() { return cRANDOMEnumLiteralDeclaration_0; }

		//"RANDOM"
		public Keyword getRANDOMRANDOMKeyword_0_0() { return cRANDOMRANDOMKeyword_0_0; }

		//MAX
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_1() { return cMAXEnumLiteralDeclaration_1; }

		//"MAX"
		public Keyword getMAXMAXKeyword_1_0() { return cMAXMAXKeyword_1_0; }

		//MIN
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_2() { return cMINEnumLiteralDeclaration_2; }

		//"MIN"
		public Keyword getMINMINKeyword_2_0() { return cMINMINKeyword_2_0; }
	}

	public class OPT_LISTINGElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OPT_LISTING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNormalKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVERBOSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVERBOSEVerboseKeyword_1_0 = (Keyword)cVERBOSEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVALUE_ONLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVALUE_ONLYWithValuesKeyword_2_0 = (Keyword)cVALUE_ONLYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OPT_LISTING:
		//	NORMAL="--normal" | VERBOSE="--verbose" | VALUE_ONLY="--withValues";
		public EnumRule getRule() { return rule; }

		//NORMAL="--normal" | VERBOSE="--verbose" | VALUE_ONLY="--withValues"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL="--normal"
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"--normal"
		public Keyword getNORMALNormalKeyword_0_0() { return cNORMALNormalKeyword_0_0; }

		//VERBOSE="--verbose"
		public EnumLiteralDeclaration getVERBOSEEnumLiteralDeclaration_1() { return cVERBOSEEnumLiteralDeclaration_1; }

		//"--verbose"
		public Keyword getVERBOSEVerboseKeyword_1_0() { return cVERBOSEVerboseKeyword_1_0; }

		//VALUE_ONLY="--withValues"
		public EnumLiteralDeclaration getVALUE_ONLYEnumLiteralDeclaration_2() { return cVALUE_ONLYEnumLiteralDeclaration_2; }

		//"--withValues"
		public Keyword getVALUE_ONLYWithValuesKeyword_2_0() { return cVALUE_ONLYWithValuesKeyword_2_0; }
	}

	public class FMFormatElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FMFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDIMACSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDIMACSDIMACSKeyword_0_0 = (Keyword)cDIMACSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFMLBDDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFMLBDDFmlbddKeyword_1_0 = (Keyword)cFMLBDDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFIDEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFIDEFeatureideKeyword_2_0 = (Keyword)cFIDEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFCALCEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFCALCFmcalcKeyword_3_0 = (Keyword)cFCALCEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFFMLEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFFMLFmlKeyword_4_0 = (Keyword)cFFMLEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFSPLOTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFSPLOTSPLOTKeyword_5_0 = (Keyword)cFSPLOTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFTVLEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFTVLTVLKeyword_6_0 = (Keyword)cFTVLEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFTRISKELLEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFTRISKELLFdKeyword_7_0 = (Keyword)cFTRISKELLEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cFFML2EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cFFML2XmiKeyword_8_0 = (Keyword)cFFML2EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cS2T2EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cS2T2S2T2Keyword_9_0 = (Keyword)cS2T2EnumLiteralDeclaration_9.eContents().get(0);
		
		//enum FMFormat:
		//	DIMACS | FMLBDD="fmlbdd" | FIDE="featureide" | FCALC="fmcalc" | FFML="fml" | FSPLOT="SPLOT" | FTVL="TVL" |
		//	FTRISKELL="fd" | FFML2="xmi" | S2T2;
		public EnumRule getRule() { return rule; }

		//DIMACS | FMLBDD="fmlbdd" | FIDE="featureide" | FCALC="fmcalc" | FFML="fml" | FSPLOT="SPLOT" | FTVL="TVL" |
		//FTRISKELL="fd" | FFML2="xmi" | S2T2
		public Alternatives getAlternatives() { return cAlternatives; }

		//DIMACS
		public EnumLiteralDeclaration getDIMACSEnumLiteralDeclaration_0() { return cDIMACSEnumLiteralDeclaration_0; }

		//"DIMACS"
		public Keyword getDIMACSDIMACSKeyword_0_0() { return cDIMACSDIMACSKeyword_0_0; }

		//FMLBDD="fmlbdd"
		public EnumLiteralDeclaration getFMLBDDEnumLiteralDeclaration_1() { return cFMLBDDEnumLiteralDeclaration_1; }

		//"fmlbdd"
		public Keyword getFMLBDDFmlbddKeyword_1_0() { return cFMLBDDFmlbddKeyword_1_0; }

		//FIDE="featureide"
		public EnumLiteralDeclaration getFIDEEnumLiteralDeclaration_2() { return cFIDEEnumLiteralDeclaration_2; }

		//"featureide"
		public Keyword getFIDEFeatureideKeyword_2_0() { return cFIDEFeatureideKeyword_2_0; }

		//FCALC="fmcalc"
		public EnumLiteralDeclaration getFCALCEnumLiteralDeclaration_3() { return cFCALCEnumLiteralDeclaration_3; }

		//"fmcalc"
		public Keyword getFCALCFmcalcKeyword_3_0() { return cFCALCFmcalcKeyword_3_0; }

		//FFML="fml"
		public EnumLiteralDeclaration getFFMLEnumLiteralDeclaration_4() { return cFFMLEnumLiteralDeclaration_4; }

		//"fml"
		public Keyword getFFMLFmlKeyword_4_0() { return cFFMLFmlKeyword_4_0; }

		//FSPLOT="SPLOT"
		public EnumLiteralDeclaration getFSPLOTEnumLiteralDeclaration_5() { return cFSPLOTEnumLiteralDeclaration_5; }

		//"SPLOT"
		public Keyword getFSPLOTSPLOTKeyword_5_0() { return cFSPLOTSPLOTKeyword_5_0; }

		//FTVL="TVL"
		public EnumLiteralDeclaration getFTVLEnumLiteralDeclaration_6() { return cFTVLEnumLiteralDeclaration_6; }

		//"TVL"
		public Keyword getFTVLTVLKeyword_6_0() { return cFTVLTVLKeyword_6_0; }

		//FTRISKELL="fd"
		public EnumLiteralDeclaration getFTRISKELLEnumLiteralDeclaration_7() { return cFTRISKELLEnumLiteralDeclaration_7; }

		//"fd"
		public Keyword getFTRISKELLFdKeyword_7_0() { return cFTRISKELLFdKeyword_7_0; }

		//FFML2="xmi"
		public EnumLiteralDeclaration getFFML2EnumLiteralDeclaration_8() { return cFFML2EnumLiteralDeclaration_8; }

		//"xmi"
		public Keyword getFFML2XmiKeyword_8_0() { return cFFML2XmiKeyword_8_0; }

		//S2T2
		public EnumLiteralDeclaration getS2T2EnumLiteralDeclaration_9() { return cS2T2EnumLiteralDeclaration_9; }

		//"S2T2"
		public Keyword getS2T2S2T2Keyword_9_0() { return cS2T2S2T2Keyword_9_0; }
	}

	public class BOOL_OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL_Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOL_OREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOL_ORVerticalLineVerticalLineKeyword_0_0 = (Keyword)cBOOL_OREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOL_ANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOL_ANDAmpersandAmpersandKeyword_1_0 = (Keyword)cBOOL_ANDEnumLiteralDeclaration_1.eContents().get(0);
		
		////	not?='!' expr=Primary_expr | 	
		//enum BOOL_Operator:
		//	BOOL_OR="||" | BOOL_AND="&&";
		public EnumRule getRule() { return rule; }

		//BOOL_OR="||" | BOOL_AND="&&"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOL_OR="||"
		public EnumLiteralDeclaration getBOOL_OREnumLiteralDeclaration_0() { return cBOOL_OREnumLiteralDeclaration_0; }

		//"||"
		public Keyword getBOOL_ORVerticalLineVerticalLineKeyword_0_0() { return cBOOL_ORVerticalLineVerticalLineKeyword_0_0; }

		//BOOL_AND="&&"
		public EnumLiteralDeclaration getBOOL_ANDEnumLiteralDeclaration_1() { return cBOOL_ANDEnumLiteralDeclaration_1; }

		//"&&"
		public Keyword getBOOL_ANDAmpersandAmpersandKeyword_1_0() { return cBOOL_ANDAmpersandAmpersandKeyword_1_0; }
	}
	
	private FamiliarScriptElements pFamiliarScript;
	private ScriptCommandElements pScriptCommand;
	private ComplexCommandElements pComplexCommand;
	private CommandElements pCommand;
	private IntegerExprElements pIntegerExpr;
	private BooleanExprElements pBooleanExpr;
	private IdentifierExprElements pIdentifierExpr;
	private StringExprElements pStringExpr;
	private SetExprElements pSetExpr;
	private AtomicConstraintExprElements pAtomicConstraintExpr;
	private ConstraintExprElements pConstraintExpr;
	private EditConstantElements unknownRuleEditConstant;
	private FeatureVariabilityOperatorElements pFeatureVariabilityOperator;
	private FeatureEdgeKindElements unknownRuleFeatureEdgeKind;
	private IfConditionElements pIfCondition;
	private ForeachSetElements pForeachSet;
	private LTypeElements pLType;
	private FMLAbstractCommandElements pFMLAbstractCommand;
	private FMCommandElements pFMCommand;
	private FTCommandElements pFTCommand;
	private BCommandElements pBCommand;
	private StrCommandElements pStrCommand;
	private ConfigurationCommandElements pConfigurationCommand;
	private SetCommandElements pSetCommand;
	private LeavesElements pLeaves;
	private ConstraintCommandElements pConstraintCommand;
	private GetConstraintsElements pGetConstraints;
	private KindOfGetElements unknownRuleKindOfGet;
	private ComputeConstraintsElements pComputeConstraints;
	private KindOfComputeElements unknownRuleKindOfCompute;
	private GetFGroupsElements pGetFGroups;
	private KindOfGetGroupsElements unknownRuleKindOfGetGroups;
	private ComputeFGroupsElements pComputeFGroups;
	private KindOfComputeGroupsElements unknownRuleKindOfComputeGroups;
	private PairwiseCommandElements pPairwiseCommand;
	private IntegerCommandElements pIntegerCommand;
	private DoubleCommandElements pDoubleCommand;
	private VariabilityOpCommandElements pVariabilityOpCommand;
	private AnalysisOperationElements pAnalysisOperation;
	private SetOperationsElements pSetOperations;
	private SetCardElements pSetCard;
	private SetBelongsElements pSetBelongs;
	private SetUnionOrIntersectionElements pSetUnionOrIntersection;
	private SetEmptyElements pSetEmpty;
	private SetAddOrRemoveElements pSetAddOrRemove;
	private IsEmptySetElements pIsEmptySet;
	private SetToNamesElements pSetToNames;
	private FeatureOperationElements pFeatureOperation;
	private AncestorFeatureElements pAncestorFeature;
	private DescendantFeatureElements pDescendantFeature;
	private ChildrenFeatureElements pChildrenFeature;
	private SiblingFeatureElements pSiblingFeature;
	private ParentFeatureElements pParentFeature;
	private NameFeatureElements pNameFeature;
	private FMFeatureElements pFMFeature;
	private FeatureOperatorElements pFeatureOperator;
	private StringOperationElements pStringOperation;
	private StringInitElements pStringInit;
	private StringConcatElements pStringConcat;
	private StringSubstringElements pStringSubstring;
	private StringIndexOfElements pStringIndexOf;
	private StringLengthElements pStringLength;
	private CompareElements pCompare;
	private ParameterElements pParameter;
	private LoadGenericElements pLoadGeneric;
	private CTCRCommandElements pCTCRCommand;
	private MergeElements pMerge;
	private BDDBackendElements unknownRuleBDDBackend;
	private MergeModeElements unknownRuleMergeMode;
	private LFMArgsElements pLFMArgs;
	private AggregateMergeElements pAggregateMerge;
	private HierarchyStrategyElements unknownRuleHierarchyStrategy;
	private SynthesisElements pSynthesis;
	private KnowledgeSpecificationElements pKnowledgeSpecification;
	private HierarchySpecificationElements pHierarchySpecification;
	private HProductionElements pHProduction;
	private GroupsSpecificationElements pGroupsSpecification;
	private GroupSpecElements pGroupSpec;
	private XorGroupSpecElements pXorGroupSpec;
	private MtxGroupSpecElements pMtxGroupSpec;
	private OrGroupSpecElements pOrGroupSpec;
	private ConstraintsSpecificationElements pConstraintsSpecification;
	private SliceElements pSlice;
	private SliceModeElements unknownRuleSliceMode;
	private AggregateElements pAggregate;
	private FeatureModelOperationElements pFeatureModelOperation;
	private EditOperationElements pEditOperation;
	private InsertElements pInsert;
	private RemoveFeatureElements pRemoveFeature;
	private RenameFeatureElements pRenameFeature;
	private ExtractElements pExtract;
	private AssertionElements pAssertion;
	private ComparisonOperatorElements unknownRuleComparisonOperator;
	private SetOperatorElements unknownRuleSetOperator;
	private VariableNullElements pVariableNull;
	private ExportElements pExport;
	private HiddenElements pHidden;
	private LVidentifierElements pLVidentifier;
	private DependencyElements pDependency;
	private ConfigurationCmdElements pConfigurationCmd;
	private CreateConfigurationElements pCreateConfiguration;
	private CompleteConfigurationElements pCompleteConfiguration;
	private SelectionFeatureElements pSelectionFeature;
	private FeatureExpressionElements pFeatureExpression;
	private OpSelectionElements unknownRuleOpSelection;
	private AutoConfigurationElements pAutoConfiguration;
	private AutoConfModeElements unknownRuleAutoConfMode;
	private SelectedConfigurationElements pSelectedConfiguration;
	private DeselectedConfigurationElements pDeselectedConfiguration;
	private UnselectedConfigurationElements pUnselectedConfiguration;
	private AsFMElements pAsFM;
	private MapElements pMap;
	private UnMapElements pUnMap;
	private CleanUpElements pCleanUp;
	private CoresElements pCores;
	private DeadsElements pDeads;
	private FullMandatorysElements pFullMandatorys;
	private CliquesElements pCliques;
	private ScriptDefinitionElements pScriptDefinition;
	private ShellElements pShell;
	private ExitElements pExit;
	private ExistElements pExist;
	private IsConflictingElements pIsConflicting;
	private ListingElements pListing;
	private OPT_LISTINGElements unknownRuleOPT_LISTING;
	private StateElements pState;
	private CopyVariableElements pCopyVariable;
	private RemoveVariableElements pRemoveVariable;
	private ConvertElements pConvert;
	private FMFormatElements unknownRuleFMFormat;
	private FMLSaveElements pFMLSave;
	private HierarchyElements pHierarchy;
	private PrinterUtilityElements pPrinterUtility;
	private LArgsElements pLArgs;
	private GDisplayElements pGDisplay;
	private GListingElements pGListing;
	private ModifyVOperatorElements pModifyVOperator;
	private MandatoryEditElements pMandatoryEdit;
	private OptionalEditElements pOptionalEdit;
	private AlternativeEditElements pAlternativeEdit;
	private OrEditElements pOrEdit;
	private AddConstraintElements pAddConstraint;
	private RemoveConstraintElements pRemoveConstraint;
	private CNFElements pCNF;
	private Or_exprElements pOr_expr;
	private And_exprElements pAnd_expr;
	private Impl_exprElements pImpl_expr;
	private Biimpl_exprElements pBiimpl_expr;
	private Unary_exprElements pUnary_expr;
	private Neg_exprElements pNeg_expr;
	private Primary_exprElements pPrimary_expr;
	private BOOL_OperatorElements unknownRuleBOOL_Operator;
	private FeatureModelElements pFeatureModel;
	private ProductionElements pProduction;
	private ChildElements pChild;
	private MandatoryElements pMandatory;
	private OptionalElements pOptional;
	private XorgroupElements pXorgroup;
	private OrgroupElements pOrgroup;
	private MutexgroupElements pMutexgroup;
	private TerminalRule tLEFT_PAREN;
	private TerminalRule tRIGHT_PAREN;
	private TerminalRule tB_NOT;
	private TerminalRule tB_AND;
	private TerminalRule tB_OR;
	private TerminalRule tB_IMPLY;
	private TerminalRule tB_BIMPLY;
	private TerminalRule tPLUS;
	private TerminalRule tMINUS;
	private TerminalRule tSTAR;
	private TerminalRule tDIV;
	private TerminalRule tEXP;
	private TerminalRule tMULT;
	private TerminalRule tLEFT_BRACKET;
	private TerminalRule tRIGHT_BRACKET;
	private TerminalRule tLEFT_HOOK;
	private TerminalRule tRIGHT_HOOK;
	private TerminalRule tCOMMA;
	private TerminalRule tMETA_ATTRIBUTE_SYMBOL;
	private FT_IDElements pFT_ID;
	private FML_IDENTIFIERElements pFML_IDENTIFIER;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.FML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// A language to manipulate, compare, relate, reason about and automatically analyze FMs
	//// Most of the operations can be implemented using state-of-the-art tools and/or related work (including our work!)
	//// Here our purpose is to integrate into a single, concise, integrated language such efforts
	//// This language can also be used i) on top of an MDE approach,
	//// e.g., when FMs are related to other model elements or artefacts
	//// or ii) within an IDE and graphical editors
	//FamiliarScript:
	//	params+=Parameter* cmds+=ScriptCommand* exports+=(Export | Hidden)*;
	public FamiliarScriptElements getFamiliarScriptAccess() {
		return (pFamiliarScript != null) ? pFamiliarScript : (pFamiliarScript = new FamiliarScriptElements());
	}
	
	public ParserRule getFamiliarScriptRule() {
		return getFamiliarScriptAccess().getRule();
	}

	//ScriptCommand:
	//	var=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)? "=" cmd= // perhaps? metaID=(StringExpr|IdentifierExpr)  
	//	ComplexCommand | ComplexCommand;
	public ScriptCommandElements getScriptCommandAccess() {
		return (pScriptCommand != null) ? pScriptCommand : (pScriptCommand = new ScriptCommandElements());
	}
	
	public ParserRule getScriptCommandRule() {
		return getScriptCommandAccess().getRule();
	}

	//ComplexCommand:
	//	left=Command ({IntegerOperation.left=current} op=(PLUS | MINUS | MULT | DIV | EXP) right=IntegerCommand |
	//	{BoolOperation.left=current} op=BOOL_Operator right= //BCommand
	//	ComplexCommand | {ComparisonOperation.left=current} cmpOp=ComparisonOperator right= //(IntegerCommand|BCommand)
	//	ComplexCommand | {SetOperation.left=current} sop=SetOperator right= // TODO new!
	//	ComplexCommand)? | not?="not" batom=ComplexCommand;
	public ComplexCommandElements getComplexCommandAccess() {
		return (pComplexCommand != null) ? pComplexCommand : (pComplexCommand = new ComplexCommandElements());
	}
	
	public ParserRule getComplexCommandRule() {
		return getComplexCommandAccess().getRule();
	}

	//Command:
	//	LEFT_PAREN ComplexCommand RIGHT_PAREN | (StringExpr | SetExpr | BooleanExpr | IdentifierExpr | IntegerExpr |
	//	FeatureVariabilityOperator | IfCondition | ForeachSet | FeatureModel | // only internal constraints (see aggregate)
	//	AddConstraint | // what about associating an id to a constraint?
	//	RemoveConstraint | SetOperations | AnalysisOperation | // children, sibling, parent, operator
	//	FeatureOperation | StringOperation | Compare | LoadGeneric | Merge | AggregateMerge | Synthesis | Hierarchy | // insert, remove, rename, extract
	//	FeatureModelOperation | Aggregate | Slice | Map | UnMap | AtomicConstraintExpr | ConstraintExpr | GetConstraints |
	//	ComputeConstraints | GetFGroups | ComputeFGroups | VariableNull | Cores | Deads | Cliques | Leaves | FullMandatorys |
	//	PrinterUtility | Convert | Assertion | GDisplay | GListing | CleanUp | AsFM | ModifyVOperator | FMLSave |
	//	ConfigurationCmd | ScriptDefinition | Shell | CopyVariable | RemoveVariable | CTCRCommand | PairwiseCommand);
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//IntegerExpr:
	//	{IntLiteral} value=INT;
	public IntegerExprElements getIntegerExprAccess() {
		return (pIntegerExpr != null) ? pIntegerExpr : (pIntegerExpr = new IntegerExprElements());
	}
	
	public ParserRule getIntegerExprRule() {
		return getIntegerExprAccess().getRule();
	}

	/// ******** BOOLEAN EXPRESSION? ******** / BooleanExpr:
	//	{BooleanExpr} val=("true" | "false");
	public BooleanExprElements getBooleanExprAccess() {
		return (pBooleanExpr != null) ? pBooleanExpr : (pBooleanExpr = new BooleanExprElements());
	}
	
	public ParserRule getBooleanExprRule() {
		return getBooleanExprAccess().getRule();
	}

	//IdentifierExpr:
	//	val=FML_IDENTIFIER (LEFT_HOOK META_ATTRIBUTE_SYMBOL metaID=StringExpr RIGHT_HOOK)?;
	public IdentifierExprElements getIdentifierExprAccess() {
		return (pIdentifierExpr != null) ? pIdentifierExpr : (pIdentifierExpr = new IdentifierExprElements());
	}
	
	public ParserRule getIdentifierExprRule() {
		return getIdentifierExprAccess().getRule();
	}

	//StringExpr:
	//	val=STRING;
	public StringExprElements getStringExprAccess() {
		return (pStringExpr != null) ? pStringExpr : (pStringExpr = new StringExprElements());
	}
	
	public ParserRule getStringExprRule() {
		return getStringExprAccess().getRule();
	}

	//SetExpr:
	//	LEFT_BRACKET e+=ComplexCommand+ RIGHT_BRACKET;
	public SetExprElements getSetExprAccess() {
		return (pSetExpr != null) ? pSetExpr : (pSetExpr = new SetExprElements());
	}
	
	public ParserRule getSetExprRule() {
		return getSetExprAccess().getRule();
	}

	//AtomicConstraintExpr:
	//	"constraint" LEFT_PAREN expr=CNF RIGHT_PAREN;
	public AtomicConstraintExprElements getAtomicConstraintExprAccess() {
		return (pAtomicConstraintExpr != null) ? pAtomicConstraintExpr : (pAtomicConstraintExpr = new AtomicConstraintExprElements());
	}
	
	public ParserRule getAtomicConstraintExprRule() {
		return getAtomicConstraintExprAccess().getRule();
	}

	////ConstraintExpr : LEFT_BRACKET (constraints+=CNF ';')+ RIGHT_BRACKET ;
	//// TODO: refactor (types) + set ===> { constraint (A -> B) constraint (C -> D) }
	//// implies + excludes + biimplies + o 
	//ConstraintExpr:
	//	"constraints" (LEFT_PAREN (constraints+=CNF ";")+ RIGHT_PAREN | fm=FMCommand);
	public ConstraintExprElements getConstraintExprAccess() {
		return (pConstraintExpr != null) ? pConstraintExpr : (pConstraintExpr = new ConstraintExprElements());
	}
	
	public ParserRule getConstraintExprRule() {
		return getConstraintExprAccess().getRule();
	}

	////ConstraintExpr : 'constraints' LEFT_BRACKET (constraints+=CNF ';')+ RIGHT_BRACKET ;
	//enum EditConstant:
	//	REFACTORING | SPECIALIZATION | GENERALIZATION | ARBITRARY;
	public EditConstantElements getEditConstantAccess() {
		return (unknownRuleEditConstant != null) ? unknownRuleEditConstant : (unknownRuleEditConstant = new EditConstantElements());
	}
	
	public EnumRule getEditConstantRule() {
		return getEditConstantAccess().getRule();
	}

	////FeatureVariabilityOperator : 'OP' LEFT_PAREN val=FeatureEdgeKind RIGHT_PAREN ;
	//FeatureVariabilityOperator:
	//	val=FeatureEdgeKind;
	public FeatureVariabilityOperatorElements getFeatureVariabilityOperatorAccess() {
		return (pFeatureVariabilityOperator != null) ? pFeatureVariabilityOperator : (pFeatureVariabilityOperator = new FeatureVariabilityOperatorElements());
	}
	
	public ParserRule getFeatureVariabilityOperatorRule() {
		return getFeatureVariabilityOperatorAccess().getRule();
	}

	//enum FeatureEdgeKind:
	//	MANDATORY="mand" | OPTIONAL="opt" | ALTERNATIVE="Xor" | OR="Or" | MUTEX="Mutex";
	public FeatureEdgeKindElements getFeatureEdgeKindAccess() {
		return (unknownRuleFeatureEdgeKind != null) ? unknownRuleFeatureEdgeKind : (unknownRuleFeatureEdgeKind = new FeatureEdgeKindElements());
	}
	
	public EnumRule getFeatureEdgeKindRule() {
		return getFeatureEdgeKindAccess().getRule();
	}

	//IfCondition:
	//	"if" LEFT_PAREN bexpr=ComplexCommand RIGHT_PAREN //BCommand | ComparisonExpression
	//	"then" then+=ScriptCommand+ ("else" else+=ScriptCommand+)? "end";
	public IfConditionElements getIfConditionAccess() {
		return (pIfCondition != null) ? pIfCondition : (pIfCondition = new IfConditionElements());
	}
	
	public ParserRule getIfConditionRule() {
		return getIfConditionAccess().getRule();
	}

	//ForeachSet:
	//	"foreach" LEFT_PAREN val=FML_IDENTIFIER "in" var=FML_IDENTIFIER RIGHT_PAREN "do" exprs+=ScriptCommand+ "end";
	public ForeachSetElements getForeachSetAccess() {
		return (pForeachSet != null) ? pForeachSet : (pForeachSet = new ForeachSetElements());
	}
	
	public ParserRule getForeachSetRule() {
		return getForeachSetAccess().getRule();
	}

	//// TODO: whichfm for features
	/// ******* TYPE OPERATIONS ****** / lType:
	//	val=("FeatureModel" | "Feature" | "Boolean" | "String" | "Configuration" | "Set" | "Double" | "Integer" |
	//	"Constraint");
	public LTypeElements getLTypeAccess() {
		return (pLType != null) ? pLType : (pLType = new LTypeElements());
	}
	
	public ParserRule getLTypeRule() {
		return getLTypeAccess().getRule();
	}

	//FMLAbstractCommand:
	//	Command | FMCommand | FTCommand | SetCommand | ConstraintCommand;
	public FMLAbstractCommandElements getFMLAbstractCommandAccess() {
		return (pFMLAbstractCommand != null) ? pFMLAbstractCommand : (pFMLAbstractCommand = new FMLAbstractCommandElements());
	}
	
	public ParserRule getFMLAbstractCommandRule() {
		return getFMLAbstractCommandAccess().getRule();
	}

	////	| LEFT_PAREN FMCommand RIGHT_PAREN 
	//FMCommand:
	//	IdentifierExpr | CopyVariable | AggregateMerge | Merge | Synthesis | FeatureModel | FMFeature | AsFM | Aggregate |
	//	Extract | Slice | Hierarchy;
	public FMCommandElements getFMCommandAccess() {
		return (pFMCommand != null) ? pFMCommand : (pFMCommand = new FMCommandElements());
	}
	
	public ParserRule getFMCommandRule() {
		return getFMCommandAccess().getRule();
	}

	////ParentFeature ;
	//FTCommand:
	//	IdentifierExpr | CopyVariable | FeatureOperation;
	public FTCommandElements getFTCommandAccess() {
		return (pFTCommand != null) ? pFTCommand : (pFTCommand = new FTCommandElements());
	}
	
	public ParserRule getFTCommandRule() {
		return getFTCommandAccess().getRule();
	}

	//BCommand:
	//	IdentifierExpr | IsEmptySet | RemoveVariable | RemoveFeature | RenameFeature | Insert | ModifyVOperator |
	//	IsConflicting | CompleteConfiguration | SetBelongs;
	public BCommandElements getBCommandAccess() {
		return (pBCommand != null) ? pBCommand : (pBCommand = new BCommandElements());
	}
	
	public ParserRule getBCommandRule() {
		return getBCommandAccess().getRule();
	}

	////FeatureOperation for NameFeature
	//StrCommand:
	//	IdentifierExpr | CopyVariable | StringExpr | StringConcat | StringInit | StringSubstring | FeatureOperation | Convert;
	public StrCommandElements getStrCommandAccess() {
		return (pStrCommand != null) ? pStrCommand : (pStrCommand = new StrCommandElements());
	}
	
	public ParserRule getStrCommandRule() {
		return getStrCommandAccess().getRule();
	}

	////| LEFT_PAREN ConfigurationCommand RIGHT_PAREN
	//ConfigurationCommand:
	//	IdentifierExpr | CreateConfiguration;
	public ConfigurationCommandElements getConfigurationCommandAccess() {
		return (pConfigurationCommand != null) ? pConfigurationCommand : (pConfigurationCommand = new ConfigurationCommandElements());
	}
	
	public ParserRule getConfigurationCommandRule() {
		return getConfigurationCommandAccess().getRule();
	}

	//SetCommand:
	//	IdentifierExpr // TODO: AnalysisOperation due to 'features'
	//	| SetExpr | FeatureOperation | Cliques | Cores | Deads | FullMandatorys | SetToNames | SetUnionOrIntersection | Leaves
	//	| SetEmpty | SelectedConfiguration | DeselectedConfiguration | ConstraintExpr | GetConstraints | ComputeConstraints |
	//	GetFGroups | ComputeFGroups | PairwiseCommand;
	public SetCommandElements getSetCommandAccess() {
		return (pSetCommand != null) ? pSetCommand : (pSetCommand = new SetCommandElements());
	}
	
	public ParserRule getSetCommandRule() {
		return getSetCommandAccess().getRule();
	}

	//// return the set of leaves in the feature hierarchy 
	//Leaves:
	//	"leaves" fm=FMCommand;
	public LeavesElements getLeavesAccess() {
		return (pLeaves != null) ? pLeaves : (pLeaves = new LeavesElements());
	}
	
	public ParserRule getLeavesRule() {
		return getLeavesAccess().getRule();
	}

	//ConstraintCommand:
	//	IdentifierExpr | AtomicConstraintExpr;
	public ConstraintCommandElements getConstraintCommandAccess() {
		return (pConstraintCommand != null) ? pConstraintCommand : (pConstraintCommand = new ConstraintCommandElements());
	}
	
	public ParserRule getConstraintCommandRule() {
		return getConstraintCommandAccess().getRule();
	}

	//GetConstraints:
	//	kindOfGet=KindOfGet fm=FMCommand;
	public GetConstraintsElements getGetConstraintsAccess() {
		return (pGetConstraints != null) ? pGetConstraints : (pGetConstraints = new GetConstraintsElements());
	}
	
	public ParserRule getGetConstraintsRule() {
		return getGetConstraintsAccess().getRule();
	}

	//enum KindOfGet:
	//	HIERARCHY_IMPLIES="getImpliesHierarchy" | HIERARCHY_EXCLUDES="getExcludesHierarchy" |
	//	HIERARCHY_BIIMPLIES="getBiimpliesHierarchy" | CONSTRAINT_IMPLIES="getImpliesConstraint" |
	//	CONSTRAINT_EXCLUDES="getExcludesConstraint" | CONSTRAINT_BIIMPLIES="getBiimpliesConstraint";
	public KindOfGetElements getKindOfGetAccess() {
		return (unknownRuleKindOfGet != null) ? unknownRuleKindOfGet : (unknownRuleKindOfGet = new KindOfGetElements());
	}
	
	public EnumRule getKindOfGetRule() {
		return getKindOfGetAccess().getRule();
	}

	//ComputeConstraints:
	//	kindOfCompute=KindOfCompute fm=FMCommand (over?="over" fts=SetCommand)?;
	public ComputeConstraintsElements getComputeConstraintsAccess() {
		return (pComputeConstraints != null) ? pComputeConstraints : (pComputeConstraints = new ComputeConstraintsElements());
	}
	
	public ParserRule getComputeConstraintsRule() {
		return getComputeConstraintsAccess().getRule();
	}

	//enum KindOfCompute:
	//	IMPLIES="computeImplies" | EXCLUDES="computeExcludes" | BIIMPLIES="computeBiimplies";
	public KindOfComputeElements getKindOfComputeAccess() {
		return (unknownRuleKindOfCompute != null) ? unknownRuleKindOfCompute : (unknownRuleKindOfCompute = new KindOfComputeElements());
	}
	
	public EnumRule getKindOfComputeRule() {
		return getKindOfComputeAccess().getRule();
	}

	//GetFGroups:
	//	kindOfGroups=KindOfGetGroups fm=FMCommand;
	public GetFGroupsElements getGetFGroupsAccess() {
		return (pGetFGroups != null) ? pGetFGroups : (pGetFGroups = new GetFGroupsElements());
	}
	
	public ParserRule getGetFGroupsRule() {
		return getGetFGroupsAccess().getRule();
	}

	//enum KindOfGetGroups:
	//	OR="getORGroups" | XOR="getXORGroups" | MUTEX="getMUTEXGroups";
	public KindOfGetGroupsElements getKindOfGetGroupsAccess() {
		return (unknownRuleKindOfGetGroups != null) ? unknownRuleKindOfGetGroups : (unknownRuleKindOfGetGroups = new KindOfGetGroupsElements());
	}
	
	public EnumRule getKindOfGetGroupsRule() {
		return getKindOfGetGroupsAccess().getRule();
	}

	//ComputeFGroups:
	//	kindOfGroups=KindOfComputeGroups fm=FMCommand;
	public ComputeFGroupsElements getComputeFGroupsAccess() {
		return (pComputeFGroups != null) ? pComputeFGroups : (pComputeFGroups = new ComputeFGroupsElements());
	}
	
	public ParserRule getComputeFGroupsRule() {
		return getComputeFGroupsAccess().getRule();
	}

	//enum KindOfComputeGroups:
	//	OR="computeORGroups" | XOR="computeXORGroups" | MUTEX="computeMUTEXGroups";
	public KindOfComputeGroupsElements getKindOfComputeGroupsAccess() {
		return (unknownRuleKindOfComputeGroups != null) ? unknownRuleKindOfComputeGroups : (unknownRuleKindOfComputeGroups = new KindOfComputeGroupsElements());
	}
	
	public EnumRule getKindOfComputeGroupsRule() {
		return getKindOfComputeGroupsAccess().getRule();
	}

	//PairwiseCommand:
	//	"pw" fm=FMCommand ("minimization=" minimization=IntegerCommand)? ("partial=" partial=IntegerCommand)?;
	public PairwiseCommandElements getPairwiseCommandAccess() {
		return (pPairwiseCommand != null) ? pPairwiseCommand : (pPairwiseCommand = new PairwiseCommandElements());
	}
	
	public ParserRule getPairwiseCommandRule() {
		return getPairwiseCommandAccess().getRule();
	}

	//// weird for double command
	//IntegerCommand:
	//	IdentifierExpr | IntegerExpr | SetCard | StringLength | StringIndexOf | DoubleCommand;
	public IntegerCommandElements getIntegerCommandAccess() {
		return (pIntegerCommand != null) ? pIntegerCommand : (pIntegerCommand = new IntegerCommandElements());
	}
	
	public ParserRule getIntegerCommandRule() {
		return getIntegerCommandAccess().getRule();
	}

	//DoubleCommand:
	//	CTCRCommand;
	public DoubleCommandElements getDoubleCommandAccess() {
		return (pDoubleCommand != null) ? pDoubleCommand : (pDoubleCommand = new DoubleCommandElements());
	}
	
	public ParserRule getDoubleCommandRule() {
		return getDoubleCommandAccess().getRule();
	}

	//// TODO (urgent)
	////ConstraintCommand : IdentifierExpr | CopyVariable | AtomicConstraintExpr ; 
	////SetCNF : (LEFT_BRACKET (constraints+=CNF)+ RIGHT_BRACKET) | UnMap  ;
	//VariabilityOpCommand:
	//	IdentifierExpr | CopyVariable | FeatureVariabilityOperator;
	public VariabilityOpCommandElements getVariabilityOpCommandAccess() {
		return (pVariabilityOpCommand != null) ? pVariabilityOpCommand : (pVariabilityOpCommand = new VariabilityOpCommandElements());
	}
	
	public ParserRule getVariabilityOpCommandRule() {
		return getVariabilityOpCommandAccess().getRule();
	}

	//AnalysisOperation:
	//	op= // validity of a FM
	//	("isValid" | // number of products of a FM
	//	"counting" | // set of products of a FM
	//	"configs" | // number of features
	//	"nbFeatures" | // return the root feature of the fm
	//	"root" | // return the set of features
	//	"features") fm=(FMCommand | ConfigurationCommand);
	public AnalysisOperationElements getAnalysisOperationAccess() {
		return (pAnalysisOperation != null) ? pAnalysisOperation : (pAnalysisOperation = new AnalysisOperationElements());
	}
	
	public ParserRule getAnalysisOperationRule() {
		return getAnalysisOperationAccess().getRule();
	}

	//SetOperations:
	//	SetCard | SetToNames | SetBelongs | SetUnionOrIntersection | SetEmpty | SetAddOrRemove | IsEmptySet;
	public SetOperationsElements getSetOperationsAccess() {
		return (pSetOperations != null) ? pSetOperations : (pSetOperations = new SetOperationsElements());
	}
	
	public ParserRule getSetOperationsRule() {
		return getSetOperationsAccess().getRule();
	}

	////TODO: @deprecated 'set_card'
	//SetCard:
	//	"size" set=SetCommand;
	public SetCardElements getSetCardAccess() {
		return (pSetCard != null) ? pSetCard : (pSetCard = new SetCardElements());
	}
	
	public ParserRule getSetCardRule() {
		return getSetCardAccess().getRule();
	}

	//SetBelongs:
	//	"setBelongs" setl=FML_IDENTIFIER setr=FML_IDENTIFIER;
	public SetBelongsElements getSetBelongsAccess() {
		return (pSetBelongs != null) ? pSetBelongs : (pSetBelongs = new SetBelongsElements());
	}
	
	public ParserRule getSetBelongsRule() {
		return getSetBelongsAccess().getRule();
	}

	//SetUnionOrIntersection:
	//	op=("setUnion" | "setIntersection" | "setDiff") setl=SetCommand setr=SetCommand;
	public SetUnionOrIntersectionElements getSetUnionOrIntersectionAccess() {
		return (pSetUnionOrIntersection != null) ? pSetUnionOrIntersection : (pSetUnionOrIntersection = new SetUnionOrIntersectionElements());
	}
	
	public ParserRule getSetUnionOrIntersectionRule() {
		return getSetUnionOrIntersectionAccess().getRule();
	}

	//SetEmpty:
	//	val="setEmpty";
	public SetEmptyElements getSetEmptyAccess() {
		return (pSetEmpty != null) ? pSetEmpty : (pSetEmpty = new SetEmptyElements());
	}
	
	public ParserRule getSetEmptyRule() {
		return getSetEmptyAccess().getRule();
	}

	//SetAddOrRemove:
	//	op=("setAdd" | "setRemove") setl=SetCommand var=Command;
	public SetAddOrRemoveElements getSetAddOrRemoveAccess() {
		return (pSetAddOrRemove != null) ? pSetAddOrRemove : (pSetAddOrRemove = new SetAddOrRemoveElements());
	}
	
	public ParserRule getSetAddOrRemoveRule() {
		return getSetAddOrRemoveAccess().getRule();
	}

	//IsEmptySet:
	//	"setIsEmpty" set=SetCommand;
	public IsEmptySetElements getIsEmptySetAccess() {
		return (pIsEmptySet != null) ? pIsEmptySet : (pIsEmptySet = new IsEmptySetElements());
	}
	
	public ParserRule getIsEmptySetRule() {
		return getIsEmptySetAccess().getRule();
	}

	//SetToNames:
	//	"names" set=SetCommand;
	public SetToNamesElements getSetToNamesAccess() {
		return (pSetToNames != null) ? pSetToNames : (pSetToNames = new SetToNamesElements());
	}
	
	public ParserRule getSetToNamesRule() {
		return getSetToNamesAccess().getRule();
	}

	/// ********* ACCESSORS *********** / // + root (see below)
	//FeatureOperation:
	//	op=(AncestorFeature | DescendantFeature | ChildrenFeature | SiblingFeature | ParentFeature | NameFeature | FMFeature |
	//	FeatureOperator) feature=FTCommand;
	public FeatureOperationElements getFeatureOperationAccess() {
		return (pFeatureOperation != null) ? pFeatureOperation : (pFeatureOperation = new FeatureOperationElements());
	}
	
	public ParserRule getFeatureOperationRule() {
		return getFeatureOperationAccess().getRule();
	}

	//AncestorFeature:
	//	val="ancestors";
	public AncestorFeatureElements getAncestorFeatureAccess() {
		return (pAncestorFeature != null) ? pAncestorFeature : (pAncestorFeature = new AncestorFeatureElements());
	}
	
	public ParserRule getAncestorFeatureRule() {
		return getAncestorFeatureAccess().getRule();
	}

	//DescendantFeature:
	//	val="descendants";
	public DescendantFeatureElements getDescendantFeatureAccess() {
		return (pDescendantFeature != null) ? pDescendantFeature : (pDescendantFeature = new DescendantFeatureElements());
	}
	
	public ParserRule getDescendantFeatureRule() {
		return getDescendantFeatureAccess().getRule();
	}

	//// children: Set[Feature]
	//ChildrenFeature:
	//	val="children";
	public ChildrenFeatureElements getChildrenFeatureAccess() {
		return (pChildrenFeature != null) ? pChildrenFeature : (pChildrenFeature = new ChildrenFeatureElements());
	}
	
	public ParserRule getChildrenFeatureRule() {
		return getChildrenFeatureAccess().getRule();
	}

	//// sibling: Set[Feature]
	//SiblingFeature:
	//	val="sibling";
	public SiblingFeatureElements getSiblingFeatureAccess() {
		return (pSiblingFeature != null) ? pSiblingFeature : (pSiblingFeature = new SiblingFeatureElements());
	}
	
	public ParserRule getSiblingFeatureRule() {
		return getSiblingFeatureAccess().getRule();
	}

	//// parent: Feature
	//ParentFeature:
	//	val="parent";
	public ParentFeatureElements getParentFeatureAccess() {
		return (pParentFeature != null) ? pParentFeature : (pParentFeature = new ParentFeatureElements());
	}
	
	public ParserRule getParentFeatureRule() {
		return getParentFeatureAccess().getRule();
	}

	//// name: String
	//NameFeature:
	//	val="name";
	public NameFeatureElements getNameFeatureAccess() {
		return (pNameFeature != null) ? pNameFeature : (pNameFeature = new NameFeatureElements());
	}
	
	public ParserRule getNameFeatureRule() {
		return getNameFeatureAccess().getRule();
	}

	//// whichfm : FM
	//FMFeature:
	//	val="whichfm";
	public FMFeatureElements getFMFeatureAccess() {
		return (pFMFeature != null) ? pFMFeature : (pFMFeature = new FMFeatureElements());
	}
	
	public ParserRule getFMFeatureRule() {
		return getFMFeatureAccess().getRule();
	}

	//// operator: enum {AND, XOR, OR, ANDOPT}
	//FeatureOperator:
	//	val="operator";
	public FeatureOperatorElements getFeatureOperatorAccess() {
		return (pFeatureOperator != null) ? pFeatureOperator : (pFeatureOperator = new FeatureOperatorElements());
	}
	
	public ParserRule getFeatureOperatorRule() {
		return getFeatureOperatorAccess().getRule();
	}

	//StringOperation:
	//	StringInit | StringConcat | StringSubstring | StringIndexOf | StringLength;
	public StringOperationElements getStringOperationAccess() {
		return (pStringOperation != null) ? pStringOperation : (pStringOperation = new StringOperationElements());
	}
	
	public ParserRule getStringOperationRule() {
		return getStringOperationAccess().getRule();
	}

	//StringInit:
	//	val="strInit";
	public StringInitElements getStringInitAccess() {
		return (pStringInit != null) ? pStringInit : (pStringInit = new StringInitElements());
	}
	
	public ParserRule getStringInitRule() {
		return getStringInitAccess().getRule();
	}

	//// a variable or a string literal
	//StringConcat:
	//	"strConcat" lstr=StrCommand rstr=StrCommand;
	public StringConcatElements getStringConcatAccess() {
		return (pStringConcat != null) ? pStringConcat : (pStringConcat = new StringConcatElements());
	}
	
	public ParserRule getStringConcatRule() {
		return getStringConcatAccess().getRule();
	}

	//StringSubstring:
	//	"strSubstring" str=StrCommand begin=IntegerCommand end=IntegerCommand;
	public StringSubstringElements getStringSubstringAccess() {
		return (pStringSubstring != null) ? pStringSubstring : (pStringSubstring = new StringSubstringElements());
	}
	
	public ParserRule getStringSubstringRule() {
		return getStringSubstringAccess().getRule();
	}

	//// char type?
	//StringIndexOf:
	//	"strIndexOf" str=StrCommand schar=StrCommand;
	public StringIndexOfElements getStringIndexOfAccess() {
		return (pStringIndexOf != null) ? pStringIndexOf : (pStringIndexOf = new StringIndexOfElements());
	}
	
	public ParserRule getStringIndexOfRule() {
		return getStringIndexOfAccess().getRule();
	}

	//StringLength:
	//	"strLength" str=StrCommand;
	public StringLengthElements getStringLengthAccess() {
		return (pStringLength != null) ? pStringLength : (pStringLength = new StringLengthElements());
	}
	
	public ParserRule getStringLengthRule() {
		return getStringLengthAccess().getRule();
	}

	//// Boolean formula?
	//Compare:
	//	"compare" fm_left=FMCommand fm_right=FMCommand;
	public CompareElements getCompareAccess() {
		return (pCompare != null) ? pCompare : (pCompare = new CompareElements());
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}

	//Parameter:
	//	"parameter" param=FML_IDENTIFIER (typed=":" type=lType)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// TODO: distinguish between string and simple identifier
	//LoadGeneric:
	//	"run" stream=(STRING | FML_IDENTIFIER) (LEFT_BRACKET params+=FML_IDENTIFIER* RIGHT_BRACKET)? ("into"
	//	ns=FML_IDENTIFIER)?;
	public LoadGenericElements getLoadGenericAccess() {
		return (pLoadGeneric != null) ? pLoadGeneric : (pLoadGeneric = new LoadGenericElements());
	}
	
	public ParserRule getLoadGenericRule() {
		return getLoadGenericAccess().getRule();
	}

	//CTCRCommand:
	//	"ctcr" fm=FMCommand;
	public CTCRCommandElements getCTCRCommandAccess() {
		return (pCTCRCommand != null) ? pCTCRCommand : (pCTCRCommand = new CTCRCommandElements());
	}
	
	public ParserRule getCTCRCommandRule() {
		return getCTCRCommandAccess().getRule();
	}

	/// ****** COMPOSITION OPERATORS *********** / Merge:
	//	"merge" backend=BDDBackend? mode=MergeMode (LEFT_BRACKET lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs);
	public MergeElements getMergeAccess() {
		return (pMerge != null) ? pMerge : (pMerge = new MergeElements());
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}

	////(pre=Predirectives)?
	////(post=Postdirectives)?; // alignment directives
	//// BDD-DEFAULT is a workaround
	//// TODO integrate new results with SAT
	//enum BDDBackend:
	//	BDD_DEFAULT="@backend=DEFAULT" | BDD_BASIC="@backend=BDD" | BDD_SPLOT="@backend=BDD_SPLOT";
	public BDDBackendElements getBDDBackendAccess() {
		return (unknownRuleBDDBackend != null) ? unknownRuleBDDBackend : (unknownRuleBDDBackend = new BDDBackendElements());
	}
	
	public EnumRule getBDDBackendRule() {
		return getBDDBackendAccess().getRule();
	}

	//enum MergeMode:
	//	CROSS="crossproduct" | UNION="union" | SUNION="sunion" | INTER="intersection" | DIFF="diff";
	public MergeModeElements getMergeModeAccess() {
		return (unknownRuleMergeMode != null) ? unknownRuleMergeMode : (unknownRuleMergeMode = new MergeModeElements());
	}
	
	public EnumRule getMergeModeRule() {
		return getMergeModeAccess().getRule();
	}

	//LFMArgs:
	//	lfms+=FMCommand (COMMA lfms+=FMCommand)*;
	public LFMArgsElements getLFMArgsAccess() {
		return (pLFMArgs != null) ? pLFMArgs : (pLFMArgs = new LFMArgsElements());
	}
	
	public ParserRule getLFMArgsRule() {
		return getLFMArgsAccess().getRule();
	}

	//AggregateMerge:
	//	"aggregateMerge" (hierarchySpecified?="--hierarchy" hierarchyStrategy=HierarchyStrategy)? mode=MergeMode (LEFT_BRACKET
	//	lfms+=FMCommand+ RIGHT_BRACKET | fms=LFMArgs);
	public AggregateMergeElements getAggregateMergeAccess() {
		return (pAggregateMerge != null) ? pAggregateMerge : (pAggregateMerge = new AggregateMergeElements());
	}
	
	public ParserRule getAggregateMergeRule() {
		return getAggregateMergeAccess().getRule();
	}

	//enum HierarchyStrategy:
	//	BASIC="=basic" | FLAT="=flat" | MST="=mst";
	public HierarchyStrategyElements getHierarchyStrategyAccess() {
		return (unknownRuleHierarchyStrategy != null) ? unknownRuleHierarchyStrategy : (unknownRuleHierarchyStrategy = new HierarchyStrategyElements());
	}
	
	public EnumRule getHierarchyStrategyRule() {
		return getHierarchyStrategyAccess().getRule();
	}

	/// *
	// could be ksynthesis fm0 with fm1
	// BUT
	// it is preferable to have a decomposed specification with all parts optional
	// importantly, KST can be specified using accessors of FML
	// * / Synthesis:
	//	"ksynthesis" interactive?="--interactive" fm=FMCommand ("with" kst=KnowledgeSpecification)?;
	public SynthesisElements getSynthesisAccess() {
		return (pSynthesis != null) ? pSynthesis : (pSynthesis = new SynthesisElements());
	}
	
	public ParserRule getSynthesisRule() {
		return getSynthesisAccess().getRule();
	}

	//// ('withKST' kst=KnowledgeSpecification)? ;
	////('with' LEFT_HOOK kst=KnowledgeSpecification RIGHT_HOOK)? ;
	//KnowledgeSpecification:
	//	{KnowledgeSpecification} hierarchy=HierarchySpecification? (COMMA groups=GroupsSpecification)? (COMMA
	//	constraints=ConstraintsSpecification)?;
	public KnowledgeSpecificationElements getKnowledgeSpecificationAccess() {
		return (pKnowledgeSpecification != null) ? pKnowledgeSpecification : (pKnowledgeSpecification = new KnowledgeSpecificationElements());
	}
	
	public ParserRule getKnowledgeSpecificationRule() {
		return getKnowledgeSpecificationAccess().getRule();
	}

	//HierarchySpecification:
	//	"hierarchy=" (hierarchy=Hierarchy | (features+=HProduction ";")+);
	public HierarchySpecificationElements getHierarchySpecificationAccess() {
		return (pHierarchySpecification != null) ? pHierarchySpecification : (pHierarchySpecification = new HierarchySpecificationElements());
	}
	
	public ParserRule getHierarchySpecificationRule() {
		return getHierarchySpecificationAccess().getRule();
	}

	//HProduction:
	//	name=ID ":" features+=FT_ID+;
	public HProductionElements getHProductionAccess() {
		return (pHProduction != null) ? pHProduction : (pHProduction = new HProductionElements());
	}
	
	public ParserRule getHProductionRule() {
		return getHProductionAccess().getRule();
	}

	//// getFGroups?
	//GroupsSpecification:
	//	"groups=" (groups+=GroupSpec ";")+;
	public GroupsSpecificationElements getGroupsSpecificationAccess() {
		return (pGroupsSpecification != null) ? pGroupsSpecification : (pGroupsSpecification = new GroupsSpecificationElements());
	}
	
	public ParserRule getGroupsSpecificationRule() {
		return getGroupsSpecificationAccess().getRule();
	}

	//GroupSpec:
	//	XorGroupSpec | MtxGroupSpec | OrGroupSpec;
	public GroupSpecElements getGroupSpecAccess() {
		return (pGroupSpec != null) ? pGroupSpec : (pGroupSpec = new GroupSpecElements());
	}
	
	public ParserRule getGroupSpecRule() {
		return getGroupSpecAccess().getRule();
	}

	//XorGroupSpec:
	//	"xorGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN;
	public XorGroupSpecElements getXorGroupSpecAccess() {
		return (pXorGroupSpec != null) ? pXorGroupSpec : (pXorGroupSpec = new XorGroupSpecElements());
	}
	
	public ParserRule getXorGroupSpecRule() {
		return getXorGroupSpecAccess().getRule();
	}

	//MtxGroupSpec:
	//	"mtxGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN;
	public MtxGroupSpecElements getMtxGroupSpecAccess() {
		return (pMtxGroupSpec != null) ? pMtxGroupSpec : (pMtxGroupSpec = new MtxGroupSpecElements());
	}
	
	public ParserRule getMtxGroupSpecRule() {
		return getMtxGroupSpecAccess().getRule();
	}

	//OrGroupSpec:
	//	"orGroup" LEFT_PAREN name=ID ":" features+=FT_ID+ RIGHT_PAREN;
	public OrGroupSpecElements getOrGroupSpecAccess() {
		return (pOrGroupSpec != null) ? pOrGroupSpec : (pOrGroupSpec = new OrGroupSpecElements());
	}
	
	public ParserRule getOrGroupSpecRule() {
		return getOrGroupSpecAccess().getRule();
	}

	//// constraint strategy
	//ConstraintsSpecification:
	//	"constraints=" csts=ConstraintExpr;
	public ConstraintsSpecificationElements getConstraintsSpecificationAccess() {
		return (pConstraintsSpecification != null) ? pConstraintsSpecification : (pConstraintsSpecification = new ConstraintsSpecificationElements());
	}
	
	public ParserRule getConstraintsSpecificationRule() {
		return getConstraintsSpecificationAccess().getRule();
	}

	////Predirectives : '@pre[' instr+=(AlignmentInstr)+ ']' ;
	////Postdirectives : '@post[' instr+=(AlignmentInstr)+ ']' ;
	////AlignmentInstr : (RenameFeature|RemoveFeature|Insert) ;
	////Aggregate : 'aggregate' LEFT_BRACKET (fms+=FMCommand)+ RIGHT_BRACKET ('map' LEFT_BRACKET (constraints+=CNF ';')+ RIGHT_BRACKET)?;
	//// issue: side effect or purely functional?
	//Slice:
	//	"slice" fm=FMCommand mode=SliceMode fts=SetCommand;
	public SliceElements getSliceAccess() {
		return (pSlice != null) ? pSlice : (pSlice = new SliceElements());
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}

	//enum SliceMode:
	//	INCLUDING="including" | EXCLUDING="excluding";
	public SliceModeElements getSliceModeAccess() {
		return (unknownRuleSliceMode != null) ? unknownRuleSliceMode : (unknownRuleSliceMode = new SliceModeElements());
	}
	
	public EnumRule getSliceModeRule() {
		return getSliceModeAccess().getRule();
	}

	//Aggregate:
	//	"aggregate" renamings?="--renamings"? (LEFT_BRACKET fms+=FMCommand+ RIGHT_BRACKET | sfms=IdentifierExpr)
	//	("withMapping" mapping=SetCommand)?;
	public AggregateElements getAggregateAccess() {
		return (pAggregate != null) ? pAggregate : (pAggregate = new AggregateElements());
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}

	////LEFT_BRACKET (fms+=FMCommand)+ RIGHT_BRACKET
	//FeatureModelOperation:
	//	Insert | EditOperation | Extract;
	public FeatureModelOperationElements getFeatureModelOperationAccess() {
		return (pFeatureModelOperation != null) ? pFeatureModelOperation : (pFeatureModelOperation = new FeatureModelOperationElements());
	}
	
	public ParserRule getFeatureModelOperationRule() {
		return getFeatureModelOperationAccess().getRule();
	}

	//EditOperation:
	//	RemoveFeature | RenameFeature;
	public EditOperationElements getEditOperationAccess() {
		return (pEditOperation != null) ? pEditOperation : (pEditOperation = new EditOperationElements());
	}
	
	public ParserRule getEditOperationRule() {
		return getEditOperationAccess().getRule();
	}

	////TODO:  op2=(FML_IDENTIFIER)?  ;
	//Insert:
	//	"insert" aspectfm=FMCommand "into" baseft=FTCommand "with" op=VariabilityOpCommand;
	public InsertElements getInsertAccess() {
		return (pInsert != null) ? pInsert : (pInsert = new InsertElements());
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}

	//RemoveFeature:
	//	"removeFeature" feature=FTCommand;
	public RemoveFeatureElements getRemoveFeatureAccess() {
		return (pRemoveFeature != null) ? pRemoveFeature : (pRemoveFeature = new RemoveFeatureElements());
	}
	
	public ParserRule getRemoveFeatureRule() {
		return getRemoveFeatureAccess().getRule();
	}

	////'in' fm=FML_IDENTIFIER ;
	//RenameFeature:
	//	"renameFeature" feature=FTCommand "as" featureNew=StrCommand;
	public RenameFeatureElements getRenameFeatureAccess() {
		return (pRenameFeature != null) ? pRenameFeature : (pRenameFeature = new RenameFeatureElements());
	}
	
	public ParserRule getRenameFeatureRule() {
		return getRenameFeatureAccess().getRule();
	}

	//Extract:
	//	"extract" rootfeature=FTCommand;
	public ExtractElements getExtractAccess() {
		return (pExtract != null) ? pExtract : (pExtract = new ExtractElements());
	}
	
	public ParserRule getExtractRule() {
		return getExtractAccess().getRule();
	}

	//// should be a BooleanOperation
	//Assertion:
	//	"assert" LEFT_PAREN assertion=ComplexCommand RIGHT_PAREN;
	public AssertionElements getAssertionAccess() {
		return (pAssertion != null) ? pAssertion : (pAssertion = new AssertionElements());
	}
	
	public ParserRule getAssertionRule() {
		return getAssertionAccess().getRule();
	}

	////| IntegerOperator ) ;
	//enum ComparisonOperator:
	//	EQUAL="eq" | NotEqual="neq" | LesserThan="<" | GreaterThan=">" | REF_EQUAL="==" | REF_NotEqual="!=";
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return (unknownRuleComparisonOperator != null) ? unknownRuleComparisonOperator : (unknownRuleComparisonOperator = new ComparisonOperatorElements());
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//enum SetOperator:
	//	SUNION="++" | SDIFF="--";
	public SetOperatorElements getSetOperatorAccess() {
		return (unknownRuleSetOperator != null) ? unknownRuleSetOperator : (unknownRuleSetOperator = new SetOperatorElements());
	}
	
	public EnumRule getSetOperatorRule() {
		return getSetOperatorAccess().getRule();
	}

	//VariableNull:
	//	"isNull" var=FML_IDENTIFIER;
	public VariableNullElements getVariableNullAccess() {
		return (pVariableNull != null) ? pVariableNull : (pVariableNull = new VariableNullElements());
	}
	
	public ParserRule getVariableNullRule() {
		return getVariableNullAccess().getRule();
	}

	//// Export/ Hide
	//Export:
	//	"export" arg=LVidentifier;
	public ExportElements getExportAccess() {
		return (pExport != null) ? pExport : (pExport = new ExportElements());
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//Hidden:
	//	"hide" arg=LVidentifier;
	public HiddenElements getHiddenAccess() {
		return (pHidden != null) ? pHidden : (pHidden = new HiddenElements());
	}
	
	public ParserRule getHiddenRule() {
		return getHiddenAccess().getRule();
	}

	//// list of identifiers
	//LVidentifier:
	//	args+=FML_IDENTIFIER (COMMA args+=FML_IDENTIFIER)*;
	public LVidentifierElements getLVidentifierAccess() {
		return (pLVidentifier != null) ? pLVidentifier : (pLVidentifier = new LVidentifierElements());
	}
	
	public ParserRule getLVidentifierRule() {
		return getLVidentifierAccess().getRule();
	}

	//// return the set of FMs which are dependent from var // TODO: deprecated???
	//Dependency:
	//	"dependencies" var=FML_IDENTIFIER;
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//// a configuration is a set of features selected
	//// BUT: some features are also 'deselected'
	//// and some other features are not selected / deselected
	//ConfigurationCmd:
	//	CreateConfiguration | CompleteConfiguration | SelectionFeature | AutoConfiguration | SelectedConfiguration |
	//	DeselectedConfiguration | UnselectedConfiguration;
	public ConfigurationCmdElements getConfigurationCmdAccess() {
		return (pConfigurationCmd != null) ? pConfigurationCmd : (pConfigurationCmd = new ConfigurationCmdElements());
	}
	
	public ParserRule getConfigurationCmdRule() {
		return getConfigurationCmdAccess().getRule();
	}

	//CreateConfiguration:
	//	"configuration" fm=FMCommand;
	public CreateConfigurationElements getCreateConfigurationAccess() {
		return (pCreateConfiguration != null) ? pCreateConfiguration : (pCreateConfiguration = new CreateConfigurationElements());
	}
	
	public ParserRule getCreateConfigurationRule() {
		return getCreateConfigurationAccess().getRule();
	}

	//// full configuration?
	//CompleteConfiguration:
	//	"isComplete" config=ConfigurationCommand;
	public CompleteConfigurationElements getCompleteConfigurationAccess() {
		return (pCompleteConfiguration != null) ? pCompleteConfiguration : (pCompleteConfiguration = new CompleteConfigurationElements());
	}
	
	public ParserRule getCompleteConfigurationRule() {
		return getCompleteConfigurationAccess().getRule();
	}

	//// STRING? // TODO: in conflict with the "in"/foreach
	//SelectionFeature:
	//	op=("select" | "deselect" | "unselect") fts+=FeatureExpression+ "in" config=ConfigurationCommand;
	public SelectionFeatureElements getSelectionFeatureAccess() {
		return (pSelectionFeature != null) ? pSelectionFeature : (pSelectionFeature = new SelectionFeatureElements());
	}
	
	public ParserRule getSelectionFeatureRule() {
		return getSelectionFeatureAccess().getRule();
	}

	//FeatureExpression:
	//	ft=IdentifierExpr | ft=StringExpr;
	public FeatureExpressionElements getFeatureExpressionAccess() {
		return (pFeatureExpression != null) ? pFeatureExpression : (pFeatureExpression = new FeatureExpressionElements());
	}
	
	public ParserRule getFeatureExpressionRule() {
		return getFeatureExpressionAccess().getRule();
	}

	//enum OpSelection:
	//	SELECT="select" | DESELECT="deselect" | UNSELECT="unselect";
	public OpSelectionElements getOpSelectionAccess() {
		return (unknownRuleOpSelection != null) ? unknownRuleOpSelection : (unknownRuleOpSelection = new OpSelectionElements());
	}
	
	public EnumRule getOpSelectionRule() {
		return getOpSelectionAccess().getRule();
	}

	//// populate a configuration such that the configuration is valid
	//AutoConfiguration:
	//	"autoSelect" config=ConfigurationCommand mode=AutoConfMode?;
	public AutoConfigurationElements getAutoConfigurationAccess() {
		return (pAutoConfiguration != null) ? pAutoConfiguration : (pAutoConfiguration = new AutoConfigurationElements());
	}
	
	public ParserRule getAutoConfigurationRule() {
		return getAutoConfigurationAccess().getRule();
	}

	//// current strategies to populate a configuration: select the maximum/minimum number of features or randomly
	//enum AutoConfMode:
	//	RANDOM | MAX | MIN;
	public AutoConfModeElements getAutoConfModeAccess() {
		return (unknownRuleAutoConfMode != null) ? unknownRuleAutoConfMode : (unknownRuleAutoConfMode = new AutoConfModeElements());
	}
	
	public EnumRule getAutoConfModeRule() {
		return getAutoConfModeAccess().getRule();
	}

	//// features selected in a configuration
	//SelectedConfiguration:
	//	"selectedF" config=ConfigurationCommand;
	public SelectedConfigurationElements getSelectedConfigurationAccess() {
		return (pSelectedConfiguration != null) ? pSelectedConfiguration : (pSelectedConfiguration = new SelectedConfigurationElements());
	}
	
	public ParserRule getSelectedConfigurationRule() {
		return getSelectedConfigurationAccess().getRule();
	}

	//// features deselected in a configuration
	//DeselectedConfiguration:
	//	"deselectedF" config=ConfigurationCommand;
	public DeselectedConfigurationElements getDeselectedConfigurationAccess() {
		return (pDeselectedConfiguration != null) ? pDeselectedConfiguration : (pDeselectedConfiguration = new DeselectedConfigurationElements());
	}
	
	public ParserRule getDeselectedConfigurationRule() {
		return getDeselectedConfigurationAccess().getRule();
	}

	//// features unselected in a configuration
	//UnselectedConfiguration:
	//	"unselectedF" config=ConfigurationCommand;
	public UnselectedConfigurationElements getUnselectedConfigurationAccess() {
		return (pUnselectedConfiguration != null) ? pUnselectedConfiguration : (pUnselectedConfiguration = new UnselectedConfigurationElements());
	}
	
	public ParserRule getUnselectedConfigurationRule() {
		return getUnselectedConfigurationAccess().getRule();
	}

	//AsFM:
	//	"asFM" conf=ConfigurationCommand;
	public AsFMElements getAsFMAccess() {
		return (pAsFM != null) ? pAsFM : (pAsFM = new AsFMElements());
	}
	
	public ParserRule getAsFMRule() {
		return getAsFMAccess().getRule();
	}

	//Map:
	//	"map" fm=FMCommand "with" cst=SetCommand;
	public MapElements getMapAccess() {
		return (pMap != null) ? pMap : (pMap = new MapElements());
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}

	//UnMap:
	//	"unmap" fm=FMCommand;
	public UnMapElements getUnMapAccess() {
		return (pUnMap != null) ? pUnMap : (pUnMap = new UnMapElements());
	}
	
	public ParserRule getUnMapRule() {
		return getUnMapAccess().getRule();
	}

	//// functional style?
	//CleanUp:
	//	"cleanup" fm=FMCommand;
	public CleanUpElements getCleanUpAccess() {
		return (pCleanUp != null) ? pCleanUp : (pCleanUp = new CleanUpElements());
	}
	
	public ParserRule getCleanUpRule() {
		return getCleanUpAccess().getRule();
	}

	//// core features
	//Cores:
	//	"cores" fm=FMCommand;
	public CoresElements getCoresAccess() {
		return (pCores != null) ? pCores : (pCores = new CoresElements());
	}
	
	public ParserRule getCoresRule() {
		return getCoresAccess().getRule();
	}

	//// dead features
	//Deads:
	//	"deads" fm=FMCommand;
	public DeadsElements getDeadsAccess() {
		return (pDeads != null) ? pDeads : (pDeads = new DeadsElements());
	}
	
	public ParserRule getDeadsRule() {
		return getDeadsAccess().getRule();
	}

	//// TODO: make the difference!
	//// full mandatory features
	//FullMandatorys:
	//	("fullMandatorys" | "falseOptionals") fm=FMCommand;
	public FullMandatorysElements getFullMandatorysAccess() {
		return (pFullMandatorys != null) ? pFullMandatorys : (pFullMandatorys = new FullMandatorysElements());
	}
	
	public ParserRule getFullMandatorysRule() {
		return getFullMandatorysAccess().getRule();
	}

	//// cliques (aka atomic sets?)
	//Cliques:
	//	"cliques" fm=FMCommand;
	public CliquesElements getCliquesAccess() {
		return (pCliques != null) ? pCliques : (pCliques = new CliquesElements());
	}
	
	public ParserRule getCliquesRule() {
		return getCliquesAccess().getRule();
	}

	//// isDead? isCore? isFullMandatory? can be written with an FML script
	//ScriptDefinition:
	//	LEFT_HOOK params+=Parameter* cmds+=ScriptCommand+ exports+=(Export | Hidden)* RIGHT_HOOK;
	public ScriptDefinitionElements getScriptDefinitionAccess() {
		return (pScriptDefinition != null) ? pScriptDefinition : (pScriptDefinition = new ScriptDefinitionElements());
	}
	
	public ParserRule getScriptDefinitionRule() {
		return getScriptDefinitionAccess().getRule();
	}

	//// shell commands
	//// |Help) ;
	//Shell:
	//	cmd=(Exit | Exist | Listing | IsConflicting | State);
	public ShellElements getShellAccess() {
		return (pShell != null) ? pShell : (pShell = new ShellElements());
	}
	
	public ParserRule getShellRule() {
		return getShellAccess().getRule();
	}

	//Exit:
	//	val=("quit" | "exit");
	public ExitElements getExitAccess() {
		return (pExit != null) ? pExit : (pExit = new ExitElements());
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	//Exist:
	//	val="isExisting" var=FML_IDENTIFIER;
	public ExistElements getExistAccess() {
		return (pExist != null) ? pExist : (pExist = new ExistElements());
	}
	
	public ParserRule getExistRule() {
		return getExistAccess().getRule();
	}

	//IsConflicting:
	//	val="isConflicting" var=FML_IDENTIFIER;
	public IsConflictingElements getIsConflictingAccess() {
		return (pIsConflicting != null) ? pIsConflicting : (pIsConflicting = new IsConflictingElements());
	}
	
	public ParserRule getIsConflictingRule() {
		return getIsConflictingAccess().getRule();
	}

	//Listing:
	//	val=("ls" | "vars") opt=OPT_LISTING?;
	public ListingElements getListingAccess() {
		return (pListing != null) ? pListing : (pListing = new ListingElements());
	}
	
	public ParserRule getListingRule() {
		return getListingAccess().getRule();
	}

	//enum OPT_LISTING:
	//	NORMAL="--normal" | VERBOSE="--verbose" | VALUE_ONLY="--withValues";
	public OPT_LISTINGElements getOPT_LISTINGAccess() {
		return (unknownRuleOPT_LISTING != null) ? unknownRuleOPT_LISTING : (unknownRuleOPT_LISTING = new OPT_LISTINGElements());
	}
	
	public EnumRule getOPT_LISTINGRule() {
		return getOPT_LISTINGAccess().getRule();
	}

	//// memory usage, CPU speed?
	//State:
	//	val=("memory" | "cpu");
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	////Help : val=('help') ; //cmd=FML_IDENTIFIER;
	////('as')? (newvar=FML_IDENTIFIER)?;
	//CopyVariable:
	//	("copy" | "cp") vid=FML_IDENTIFIER;
	public CopyVariableElements getCopyVariableAccess() {
		return (pCopyVariable != null) ? pCopyVariable : (pCopyVariable = new CopyVariableElements());
	}
	
	public ParserRule getCopyVariableRule() {
		return getCopyVariableAccess().getRule();
	}

	//RemoveVariable:
	//	("removeVariable" | "rm") vid=FML_IDENTIFIER;
	public RemoveVariableElements getRemoveVariableAccess() {
		return (pRemoveVariable != null) ? pRemoveVariable : (pRemoveVariable = new RemoveVariableElements());
	}
	
	public ParserRule getRemoveVariableRule() {
		return getRemoveVariableAccess().getRule();
	}

	//// convert e.g., featureide, pure::variants, etc.
	//// returns a string
	//Convert:
	//	"convert" v=FMCommand "into" format=FMFormat;
	public ConvertElements getConvertAccess() {
		return (pConvert != null) ? pConvert : (pConvert = new ConvertElements());
	}
	
	public ParserRule getConvertRule() {
		return getConvertAccess().getRule();
	}

	//enum FMFormat:
	//	DIMACS | FMLBDD="fmlbdd" | FIDE="featureide" | FCALC="fmcalc" | FFML="fml" | FSPLOT="SPLOT" | FTVL="TVL" |
	//	FTRISKELL="fd" | FFML2="xmi" | S2T2;
	public FMFormatElements getFMFormatAccess() {
		return (unknownRuleFMFormat != null) ? unknownRuleFMFormat : (unknownRuleFMFormat = new FMFormatElements());
	}
	
	public EnumRule getFMFormatRule() {
		return getFMFormatAccess().getRule();
	}

	//FMLSave:
	//	("save" | "serialize") v=FMCommand "into" format=FMFormat;
	public FMLSaveElements getFMLSaveAccess() {
		return (pFMLSave != null) ? pFMLSave : (pFMLSave = new FMLSaveElements());
	}
	
	public ParserRule getFMLSaveRule() {
		return getFMLSaveAccess().getRule();
	}

	//Hierarchy:
	//	"hierarchy" fm=FMCommand;
	public HierarchyElements getHierarchyAccess() {
		return (pHierarchy != null) ? pHierarchy : (pHierarchy = new HierarchyElements());
	}
	
	public ParserRule getHierarchyRule() {
		return getHierarchyAccess().getRule();
	}

	/// *** UTILITIES ****** / PrinterUtility:
	//	op=("print" | "println") arg=LArgs;
	public PrinterUtilityElements getPrinterUtilityAccess() {
		return (pPrinterUtility != null) ? pPrinterUtility : (pPrinterUtility = new PrinterUtilityElements());
	}
	
	public ParserRule getPrinterUtilityRule() {
		return getPrinterUtilityAccess().getRule();
	}

	//LArgs:
	//	args+=Command (COMMA args+=Command)*;
	public LArgsElements getLArgsAccess() {
		return (pLArgs != null) ? pLArgs : (pLArgs = new LArgsElements());
	}
	
	public ParserRule getLArgsRule() {
		return getLArgsAccess().getRule();
	}

	//// TODO: unify! @deprecated: print_vars
	////Arg : StringArg | IdArg ;
	////StringArg : val=STRING;
	////IdArg : val=FML_IDENTIFIER;
	//// graphical display or print information on the variable
	////@deprecated: display //@deprecated: 'print_var'// can also be a configuration
	//GDisplay:
	//	cmdDisplay="gdisplay" var=(FMCommand | ConfigurationCommand);
	public GDisplayElements getGDisplayAccess() {
		return (pGDisplay != null) ? pGDisplay : (pGDisplay = new GDisplayElements());
	}
	
	public ParserRule getGDisplayRule() {
		return getGDisplayAccess().getRule();
	}

	//// TODO: what's that?
	//GListing:
	//	cmd="glisting" | "gls" {GListing};
	public GListingElements getGListingAccess() {
		return (pGListing != null) ? pGListing : (pGListing = new GListingElements());
	}
	
	public ParserRule getGListingRule() {
		return getGListingAccess().getRule();
	}

	//// change the variability operator associated to a feature
	//ModifyVOperator:
	//	MandatoryEdit | OptionalEdit | AlternativeEdit | OrEdit;
	public ModifyVOperatorElements getModifyVOperatorAccess() {
		return (pModifyVOperator != null) ? pModifyVOperator : (pModifyVOperator = new ModifyVOperatorElements());
	}
	
	public ParserRule getModifyVOperatorRule() {
		return getModifyVOperatorAccess().getRule();
	}

	//MandatoryEdit:
	//	"setMandatory" ft=FTCommand;
	public MandatoryEditElements getMandatoryEditAccess() {
		return (pMandatoryEdit != null) ? pMandatoryEdit : (pMandatoryEdit = new MandatoryEditElements());
	}
	
	public ParserRule getMandatoryEditRule() {
		return getMandatoryEditAccess().getRule();
	}

	//OptionalEdit:
	//	"setOptional" ft=FTCommand;
	public OptionalEditElements getOptionalEditAccess() {
		return (pOptionalEdit != null) ? pOptionalEdit : (pOptionalEdit = new OptionalEditElements());
	}
	
	public ParserRule getOptionalEditRule() {
		return getOptionalEditAccess().getRule();
	}

	//// should be a set of features
	//AlternativeEdit:
	//	"setAlternative" fts=SetCommand;
	public AlternativeEditElements getAlternativeEditAccess() {
		return (pAlternativeEdit != null) ? pAlternativeEdit : (pAlternativeEdit = new AlternativeEditElements());
	}
	
	public ParserRule getAlternativeEditRule() {
		return getAlternativeEditAccess().getRule();
	}

	//// should be a set of features 
	//OrEdit:
	//	"setOr" fts=SetCommand;
	public OrEditElements getOrEditAccess() {
		return (pOrEdit != null) ? pOrEdit : (pOrEdit = new OrEditElements());
	}
	
	public ParserRule getOrEditRule() {
		return getOrEditAccess().getRule();
	}

	/// ******* CONSTRAINT ******** / // TODO???
	////cst=ConstraintCommand ;
	//AddConstraint:
	//	"addConstraint" cst=ConstraintCommand "to" fm=FMCommand;
	public AddConstraintElements getAddConstraintAccess() {
		return (pAddConstraint != null) ? pAddConstraint : (pAddConstraint = new AddConstraintElements());
	}
	
	public ParserRule getAddConstraintRule() {
		return getAddConstraintAccess().getRule();
	}

	////TODO //cst=ConstraintCommand ; // LEFT_BRACKET (clause+=CNF ';')+ RIGHT_BRACKET ;
	//RemoveConstraint:
	//	"removeConstraint" cst=ConstraintCommand "in" fm=FMCommand;
	public RemoveConstraintElements getRemoveConstraintAccess() {
		return (pRemoveConstraint != null) ? pRemoveConstraint : (pRemoveConstraint = new RemoveConstraintElements());
	}
	
	public ParserRule getRemoveConstraintRule() {
		return getRemoveConstraintAccess().getRule();
	}

	/// *
	//CNF: lterm=FeatureTerm (op=(Imply|BiImply) rterm=FeatureTerm)? ;
	//FeatureTerm: ((not?=B_NOT feature=FML_IDENTIFIER) | feature=FML_IDENTIFIER) (op=(AndBoolean|OrBoolean)
	//            rfeature=FeatureTerm)?;
	//
	////ImplyOperator : Imply | Exclude | BiImply ;
	//ImplyOperator : Imply | BiImply ;
	//Imply : name=B_IMPLY;
	////Exclude : name='excludes' ;
	//BiImply : name=B_BIMPLY;
	//
	//
	//
	//
	//BooleanOperator : AndBoolean | OrBoolean ;
	//AndBoolean : name=B_AND ;
	//OrBoolean : name=B_OR ;
	// * / / ***** canonical CNF ******** / //(expr+=Or_expr)+ ;
	//CNF:
	//	Or_expr;
	public CNFElements getCNFAccess() {
		return (pCNF != null) ? pCNF : (pCNF = new CNFElements());
	}
	
	public ParserRule getCNFRule() {
		return getCNFAccess().getRule();
	}

	//Or_expr returns CNFExpression:
	//	And_expr ({Or_expr.left=current} B_OR right=And_expr)*;
	public Or_exprElements getOr_exprAccess() {
		return (pOr_expr != null) ? pOr_expr : (pOr_expr = new Or_exprElements());
	}
	
	public ParserRule getOr_exprRule() {
		return getOr_exprAccess().getRule();
	}

	//And_expr returns CNFExpression:
	//	Impl_expr ({And_expr.left=current} B_AND right=Impl_expr)*;
	public And_exprElements getAnd_exprAccess() {
		return (pAnd_expr != null) ? pAnd_expr : (pAnd_expr = new And_exprElements());
	}
	
	public ParserRule getAnd_exprRule() {
		return getAnd_exprAccess().getRule();
	}

	//Impl_expr returns CNFExpression:
	//	Biimpl_expr ({Impl_expr.left=current} B_IMPLY right=Biimpl_expr)*;
	public Impl_exprElements getImpl_exprAccess() {
		return (pImpl_expr != null) ? pImpl_expr : (pImpl_expr = new Impl_exprElements());
	}
	
	public ParserRule getImpl_exprRule() {
		return getImpl_exprAccess().getRule();
	}

	//Biimpl_expr returns CNFExpression:
	//	Unary_expr ({Biimpl_expr.left=current} B_BIMPLY right=Unary_expr)*;
	public Biimpl_exprElements getBiimpl_exprAccess() {
		return (pBiimpl_expr != null) ? pBiimpl_expr : (pBiimpl_expr = new Biimpl_exprElements());
	}
	
	public ParserRule getBiimpl_exprRule() {
		return getBiimpl_exprAccess().getRule();
	}

	//Unary_expr returns CNFExpression:
	//	Neg_expr | Primary_expr;
	public Unary_exprElements getUnary_exprAccess() {
		return (pUnary_expr != null) ? pUnary_expr : (pUnary_expr = new Unary_exprElements());
	}
	
	public ParserRule getUnary_exprRule() {
		return getUnary_exprAccess().getRule();
	}

	////name=FML_IDENTIFIER ;
	//Neg_expr:
	//	B_NOT expr=Primary_expr;
	public Neg_exprElements getNeg_exprAccess() {
		return (pNeg_expr != null) ? pNeg_expr : (pNeg_expr = new Neg_exprElements());
	}
	
	public ParserRule getNeg_exprRule() {
		return getNeg_exprAccess().getRule();
	}

	//Primary_expr returns CNFExpression:
	//	name=(ID | "true" | "false") | LEFT_PAREN Or_expr RIGHT_PAREN;
	public Primary_exprElements getPrimary_exprAccess() {
		return (pPrimary_expr != null) ? pPrimary_expr : (pPrimary_expr = new Primary_exprElements());
	}
	
	public ParserRule getPrimary_exprRule() {
		return getPrimary_exprAccess().getRule();
	}

	////	not?='!' expr=Primary_expr | 	
	//enum BOOL_Operator:
	//	BOOL_OR="||" | BOOL_AND="&&";
	public BOOL_OperatorElements getBOOL_OperatorAccess() {
		return (unknownRuleBOOL_Operator != null) ? unknownRuleBOOL_Operator : (unknownRuleBOOL_Operator = new BOOL_OperatorElements());
	}
	
	public EnumRule getBOOL_OperatorRule() {
		return getBOOL_OperatorAccess().getRule();
	}

	/// ******** FEATURE MODEL ************** / FeatureModel:
	//	("FM" | "featuremodel") LEFT_PAREN ((root=ID ";" | (features+=Production ";")+ (expr+=CNF ";")*) | file=StringExpr)
	//	RIGHT_PAREN;
	public FeatureModelElements getFeatureModelAccess() {
		return (pFeatureModel != null) ? pFeatureModel : (pFeatureModel = new FeatureModelElements());
	}
	
	public ParserRule getFeatureModelRule() {
		return getFeatureModelAccess().getRule();
	}

	////expr+=Fexpr
	////FeatureDescription : Production | Expr ;
	//Production:
	//	name=ID ":" features+=Child+;
	public ProductionElements getProductionAccess() {
		return (pProduction != null) ? pProduction : (pProduction = new ProductionElements());
	}
	
	public ParserRule getProductionRule() {
		return getProductionAccess().getRule();
	}

	//Child:
	//	Mandatory //                );             
	//	| Optional | Xorgroup | Orgroup | Mutexgroup;
	public ChildElements getChildAccess() {
		return (pChild != null) ? pChild : (pChild = new ChildElements());
	}
	
	public ParserRule getChildRule() {
		return getChildAccess().getRule();
	}

	////                | Andgroup)  ;
	//Mandatory:
	//	name=FT_ID;
	public MandatoryElements getMandatoryAccess() {
		return (pMandatory != null) ? pMandatory : (pMandatory = new MandatoryElements());
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	////Optional    : name=FML_IDENTIFIER '?' | '[' name=FML_IDENTIFIER ']' ;
	//Optional:
	//	LEFT_HOOK name=ID RIGHT_HOOK;
	public OptionalElements getOptionalAccess() {
		return (pOptional != null) ? pOptional : (pOptional = new OptionalElements());
	}
	
	public ParserRule getOptionalRule() {
		return getOptionalAccess().getRule();
	}

	//Xorgroup:
	//	LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ RIGHT_PAREN;
	public XorgroupElements getXorgroupAccess() {
		return (pXorgroup != null) ? pXorgroup : (pXorgroup = new XorgroupElements());
	}
	
	public ParserRule getXorgroupRule() {
		return getXorgroupAccess().getRule();
	}

	//Orgroup:
	//	LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ RIGHT_PAREN PLUS;
	public OrgroupElements getOrgroupAccess() {
		return (pOrgroup != null) ? pOrgroup : (pOrgroup = new OrgroupElements());
	}
	
	public ParserRule getOrgroupRule() {
		return getOrgroupAccess().getRule();
	}

	//// Andgroup   : LEFT_PAREN features+=FT_ID ('|' features+=FT_ID)+ RIGHT_PAREN ; // TODO: (identifier=FML_IDENTIFIER '=')?
	//Mutexgroup:
	//	LEFT_PAREN features+=FT_ID (B_OR features+=FT_ID)+ ")?";
	public MutexgroupElements getMutexgroupAccess() {
		return (pMutexgroup != null) ? pMutexgroup : (pMutexgroup = new MutexgroupElements());
	}
	
	public ParserRule getMutexgroupRule() {
		return getMutexgroupAccess().getRule();
	}

	//// old version
	////fexpr       : exp+=fexpr ('|' | '&' | '->' | '<->') //exp+=expr
	////|
	////            '!' fxpr
	////            | '(' fexpr ')'
	////           | name=FML_IDENTIFIER
	////           ;
	/// *         
	//Fexpr :  (mexpr+=Or_expr)+ ;
	//
	//Or_expr
	//    : And_expr ('|' expr+=And_expr)* ;
	//
	//And_expr
	//    : Impl_expr ('&' expr+=Impl_expr)* ;
	//
	//Impl_expr
	//    : Biimpl_expr ('->' expr+=Biimpl_expr)* ;
	//
	//Biimpl_expr
	//    : Unary_expr ('<->' expr+=Unary_expr)* ;
	//
	//Unary_expr
	//    : Neg_expr
	//    | Primary_expr
	//    ;
	//   
	//Neg_expr
	//    : '!' name=FML_IDENTIFIER
	//    ;
	//
	//Primary_expr
	//    : name=FML_IDENTIFIER
	//    | LEFT_PAREN Fexpr RIGHT_PAREN
	//    ;
	// * / // TOKEN types
	////terminal T_BOOLEAN : 'true' | 'false' ;
	//terminal LEFT_PAREN:
	//	"(";
	public TerminalRule getLEFT_PARENRule() {
		return (tLEFT_PAREN != null) ? tLEFT_PAREN : (tLEFT_PAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_PAREN"));
	} 

	//terminal RIGHT_PAREN:
	//	")";
	public TerminalRule getRIGHT_PARENRule() {
		return (tRIGHT_PAREN != null) ? tRIGHT_PAREN : (tRIGHT_PAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_PAREN"));
	} 

	//// 'not' | 
	//terminal B_NOT:
	//	"!" | "~";
	public TerminalRule getB_NOTRule() {
		return (tB_NOT != null) ? tB_NOT : (tB_NOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "B_NOT"));
	} 

	////| '&' ;
	//terminal B_AND:
	//	"&" | "and";
	public TerminalRule getB_ANDRule() {
		return (tB_AND != null) ? tB_AND : (tB_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "B_AND"));
	} 

	//terminal B_OR:
	//	"|" | "or";
	public TerminalRule getB_ORRule() {
		return (tB_OR != null) ? tB_OR : (tB_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "B_OR"));
	} 

	//terminal B_IMPLY:
	//	"->" | "implies" | "requires";
	public TerminalRule getB_IMPLYRule() {
		return (tB_IMPLY != null) ? tB_IMPLY : (tB_IMPLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "B_IMPLY"));
	} 

	//terminal B_BIMPLY:
	//	"<->" | "biimplies";
	public TerminalRule getB_BIMPLYRule() {
		return (tB_BIMPLY != null) ? tB_BIMPLY : (tB_BIMPLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "B_BIMPLY"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal STAR:
	//	"*";
	public TerminalRule getSTARRule() {
		return (tSTAR != null) ? tSTAR : (tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR"));
	} 

	//terminal DIV:
	//	"/";
	public TerminalRule getDIVRule() {
		return (tDIV != null) ? tDIV : (tDIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIV"));
	} 

	////STAR ;
	//terminal EXP:
	//	"^";
	public TerminalRule getEXPRule() {
		return (tEXP != null) ? tEXP : (tEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXP"));
	} 

	//terminal MULT:
	//	"mult";
	public TerminalRule getMULTRule() {
		return (tMULT != null) ? tMULT : (tMULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MULT"));
	} 

	////terminal NEWLINE: '\r' ? '\n' ;
	////terminal WS : (' ' |'\t' |'\n' |'\r' )+  ;
	//terminal LEFT_BRACKET:
	//	"{";
	public TerminalRule getLEFT_BRACKETRule() {
		return (tLEFT_BRACKET != null) ? tLEFT_BRACKET : (tLEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_BRACKET"));
	} 

	//terminal RIGHT_BRACKET:
	//	"}";
	public TerminalRule getRIGHT_BRACKETRule() {
		return (tRIGHT_BRACKET != null) ? tRIGHT_BRACKET : (tRIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_BRACKET"));
	} 

	//terminal LEFT_HOOK:
	//	"[";
	public TerminalRule getLEFT_HOOKRule() {
		return (tLEFT_HOOK != null) ? tLEFT_HOOK : (tLEFT_HOOK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_HOOK"));
	} 

	//terminal RIGHT_HOOK:
	//	"]";
	public TerminalRule getRIGHT_HOOKRule() {
		return (tRIGHT_HOOK != null) ? tRIGHT_HOOK : (tRIGHT_HOOK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_HOOK"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal META_ATTRIBUTE_SYMBOL:
	//	"@";
	public TerminalRule getMETA_ATTRIBUTE_SYMBOLRule() {
		return (tMETA_ATTRIBUTE_SYMBOL != null) ? tMETA_ATTRIBUTE_SYMBOL : (tMETA_ATTRIBUTE_SYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "META_ATTRIBUTE_SYMBOL"));
	} 

	////terminal QUOTE :  '"' ;
	////IDENTIFIER :
	////terminal FML_IDENTIFIER : ID ; //Letter (Letter | DIGIT)*;
	//// TODO: abstract feature / concrete feature
	//// setAbstract or FM (A : B C D ; abstract D : (E|F|G) ; )
	//// feature ID
	//FT_ID:
	//	(ID | "$") ("." ID)*;
	public FT_IDElements getFT_IDAccess() {
		return (pFT_ID != null) ? pFT_ID : (pFT_ID = new FT_IDElements());
	}
	
	public ParserRule getFT_IDRule() {
		return getFT_IDAccess().getRule();
	}

	////terminal Letter :  'a'..'z' |  'A'..'Z' |  '_' |  '.' ;
	////terminal DIGIT :  '0'..'9';
	//FML_IDENTIFIER:
	//	(ID | "$") ("." (ID | "$" | STAR))* | ID STAR;
	public FML_IDENTIFIERElements getFML_IDENTIFIERAccess() {
		return (pFML_IDENTIFIER != null) ? pFML_IDENTIFIER : (pFML_IDENTIFIER = new FML_IDENTIFIERElements());
	}
	
	public ParserRule getFML_IDENTIFIERRule() {
		return getFML_IDENTIFIERAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
