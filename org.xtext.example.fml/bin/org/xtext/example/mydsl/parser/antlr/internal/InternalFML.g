/*
* generated by Xtext
*/
grammar InternalFML;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.FMLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private FMLGrammarAccess grammarAccess;
 	
    public InternalFMLParser(TokenStream input, FMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FamiliarScript";	
   	}
   	
   	@Override
   	protected FMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFamiliarScript
entryRuleFamiliarScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFamiliarScriptRule()); }
	 iv_ruleFamiliarScript=ruleFamiliarScript 
	 { $current=$iv_ruleFamiliarScript.current; } 
	 EOF 
;

// Rule FamiliarScript
ruleFamiliarScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFamiliarScriptAccess().getParamsParameterParserRuleCall_0_0()); 
	    }
		lv_params_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFamiliarScriptRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFamiliarScriptAccess().getCmdsScriptCommandParserRuleCall_1_0()); 
	    }
		lv_cmds_1_0=ruleScriptCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFamiliarScriptRule());
	        }
       		add(
       			$current, 
       			"cmds",
        		lv_cmds_1_0, 
        		"ScriptCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getFamiliarScriptAccess().getExportsExportParserRuleCall_2_0_0()); 
	    }
		lv_exports_2_1=ruleExport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFamiliarScriptRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_2_1, 
        		"Export");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFamiliarScriptAccess().getExportsHiddenParserRuleCall_2_0_1()); 
	    }
		lv_exports_2_2=ruleHidden		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFamiliarScriptRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_2_2, 
        		"Hidden");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;





// Entry rule entryRuleScriptCommand
entryRuleScriptCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptCommandRule()); }
	 iv_ruleScriptCommand=ruleScriptCommand 
	 { $current=$iv_ruleScriptCommand.current; } 
	 EOF 
;

// Rule ScriptCommand
ruleScriptCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getScriptCommandAccess().getVarFML_IDENTIFIERParserRuleCall_0_0_0()); 
	    }
		lv_var_0_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptCommandRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_LEFT_HOOK_1=RULE_LEFT_HOOK
    { 
    newLeafNode(this_LEFT_HOOK_1, grammarAccess.getScriptCommandAccess().getLEFT_HOOKTerminalRuleCall_0_1_0()); 
    }
this_META_ATTRIBUTE_SYMBOL_2=RULE_META_ATTRIBUTE_SYMBOL
    { 
    newLeafNode(this_META_ATTRIBUTE_SYMBOL_2, grammarAccess.getScriptCommandAccess().getMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_0_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptCommandAccess().getMetaIDStringExprParserRuleCall_0_1_2_0()); 
	    }
		lv_metaID_3_0=ruleStringExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptCommandRule());
	        }
       		set(
       			$current, 
       			"metaID",
        		lv_metaID_3_0, 
        		"StringExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_HOOK_4=RULE_RIGHT_HOOK
    { 
    newLeafNode(this_RIGHT_HOOK_4, grammarAccess.getScriptCommandAccess().getRIGHT_HOOKTerminalRuleCall_0_1_3()); 
    }
)?	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScriptCommandAccess().getEqualsSignKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptCommandAccess().getCmdComplexCommandParserRuleCall_0_3_0()); 
	    }
		lv_cmd_6_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptCommandRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_6_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getScriptCommandAccess().getComplexCommandParserRuleCall_1()); 
    }
    this_ComplexCommand_7=ruleComplexCommand
    { 
        $current = $this_ComplexCommand_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComplexCommand
entryRuleComplexCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexCommandRule()); }
	 iv_ruleComplexCommand=ruleComplexCommand 
	 { $current=$iv_ruleComplexCommand.current; } 
	 EOF 
;

// Rule ComplexCommand
ruleComplexCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getLeftCommandParserRuleCall_0_0_0()); 
	    }
		lv_left_0_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComplexCommandAccess().getIntegerOperationLeftAction_0_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_PLUS
		{
			newLeafNode(lv_op_2_1, grammarAccess.getComplexCommandAccess().getOpPLUSTerminalRuleCall_0_1_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"PLUS");
	    }

    |		lv_op_2_2=RULE_MINUS
		{
			newLeafNode(lv_op_2_2, grammarAccess.getComplexCommandAccess().getOpMINUSTerminalRuleCall_0_1_0_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"MINUS");
	    }

    |		lv_op_2_3=RULE_MULT
		{
			newLeafNode(lv_op_2_3, grammarAccess.getComplexCommandAccess().getOpMULTTerminalRuleCall_0_1_0_1_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_3, 
        		"MULT");
	    }

    |		lv_op_2_4=RULE_DIV
		{
			newLeafNode(lv_op_2_4, grammarAccess.getComplexCommandAccess().getOpDIVTerminalRuleCall_0_1_0_1_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_4, 
        		"DIV");
	    }

    |		lv_op_2_5=RULE_EXP
		{
			newLeafNode(lv_op_2_5, grammarAccess.getComplexCommandAccess().getOpEXPTerminalRuleCall_0_1_0_1_0_4()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_5, 
        		"EXP");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getRightIntegerCommandParserRuleCall_0_1_0_2_0()); 
	    }
		lv_right_3_0=ruleIntegerCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"IntegerCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComplexCommandAccess().getBoolOperationLeftAction_0_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getOpBOOL_OperatorEnumRuleCall_0_1_1_1_0()); 
	    }
		lv_op_5_0=ruleBOOL_Operator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"BOOL_Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getRightComplexCommandParserRuleCall_0_1_1_2_0()); 
	    }
		lv_right_6_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComplexCommandAccess().getComparisonOperationLeftAction_0_1_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getCmpOpComparisonOperatorEnumRuleCall_0_1_2_1_0()); 
	    }
		lv_cmpOp_8_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"cmpOp",
        		lv_cmpOp_8_0, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getRightComplexCommandParserRuleCall_0_1_2_2_0()); 
	    }
		lv_right_9_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComplexCommandAccess().getSetOperationLeftAction_0_1_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getSopSetOperatorEnumRuleCall_0_1_3_1_0()); 
	    }
		lv_sop_11_0=ruleSetOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"sop",
        		lv_sop_11_0, 
        		"SetOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getRightComplexCommandParserRuleCall_0_1_3_2_0()); 
	    }
		lv_right_12_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_12_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
    |((
(
		lv_not_13_0=	'not' 
    {
        newLeafNode(lv_not_13_0, grammarAccess.getComplexCommandAccess().getNotNotKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexCommandRule());
	        }
       		setWithLastConsumed($current, "not", true, "not");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComplexCommandAccess().getBatomComplexCommandParserRuleCall_1_1_0()); 
	    }
		lv_batom_14_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComplexCommandRule());
	        }
       		set(
       			$current, 
       			"batom",
        		lv_batom_14_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_LEFT_PAREN_0=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_0, grammarAccess.getCommandAccess().getLEFT_PARENTerminalRuleCall_0_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getComplexCommandParserRuleCall_0_1()); 
    }
    this_ComplexCommand_1=ruleComplexCommand
    { 
        $current = $this_ComplexCommand_1.current; 
        afterParserOrEnumRuleCall();
    }
this_RIGHT_PAREN_2=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_2, grammarAccess.getCommandAccess().getRIGHT_PARENTerminalRuleCall_0_2()); 
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getStringExprParserRuleCall_1_0()); 
    }
    this_StringExpr_3=ruleStringExpr
    { 
        $current = $this_StringExpr_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getSetExprParserRuleCall_1_1()); 
    }
    this_SetExpr_4=ruleSetExpr
    { 
        $current = $this_SetExpr_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getBooleanExprParserRuleCall_1_2()); 
    }
    this_BooleanExpr_5=ruleBooleanExpr
    { 
        $current = $this_BooleanExpr_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getIdentifierExprParserRuleCall_1_3()); 
    }
    this_IdentifierExpr_6=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getIntegerExprParserRuleCall_1_4()); 
    }
    this_IntegerExpr_7=ruleIntegerExpr
    { 
        $current = $this_IntegerExpr_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getFeatureVariabilityOperatorParserRuleCall_1_5()); 
    }
    this_FeatureVariabilityOperator_8=ruleFeatureVariabilityOperator
    { 
        $current = $this_FeatureVariabilityOperator_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getIfConditionParserRuleCall_1_6()); 
    }
    this_IfCondition_9=ruleIfCondition
    { 
        $current = $this_IfCondition_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getForeachSetParserRuleCall_1_7()); 
    }
    this_ForeachSet_10=ruleForeachSet
    { 
        $current = $this_ForeachSet_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getFeatureModelParserRuleCall_1_8()); 
    }
    this_FeatureModel_11=ruleFeatureModel
    { 
        $current = $this_FeatureModel_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAddConstraintParserRuleCall_1_9()); 
    }
    this_AddConstraint_12=ruleAddConstraint
    { 
        $current = $this_AddConstraint_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getRemoveConstraintParserRuleCall_1_10()); 
    }
    this_RemoveConstraint_13=ruleRemoveConstraint
    { 
        $current = $this_RemoveConstraint_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getSetOperationsParserRuleCall_1_11()); 
    }
    this_SetOperations_14=ruleSetOperations
    { 
        $current = $this_SetOperations_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAnalysisOperationParserRuleCall_1_12()); 
    }
    this_AnalysisOperation_15=ruleAnalysisOperation
    { 
        $current = $this_AnalysisOperation_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getFeatureOperationParserRuleCall_1_13()); 
    }
    this_FeatureOperation_16=ruleFeatureOperation
    { 
        $current = $this_FeatureOperation_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getStringOperationParserRuleCall_1_14()); 
    }
    this_StringOperation_17=ruleStringOperation
    { 
        $current = $this_StringOperation_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCompareParserRuleCall_1_15()); 
    }
    this_Compare_18=ruleCompare
    { 
        $current = $this_Compare_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLoadGenericParserRuleCall_1_16()); 
    }
    this_LoadGeneric_19=ruleLoadGeneric
    { 
        $current = $this_LoadGeneric_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMergeParserRuleCall_1_17()); 
    }
    this_Merge_20=ruleMerge
    { 
        $current = $this_Merge_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAggregateMergeParserRuleCall_1_18()); 
    }
    this_AggregateMerge_21=ruleAggregateMerge
    { 
        $current = $this_AggregateMerge_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getSynthesisParserRuleCall_1_19()); 
    }
    this_Synthesis_22=ruleSynthesis
    { 
        $current = $this_Synthesis_22.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getHierarchyParserRuleCall_1_20()); 
    }
    this_Hierarchy_23=ruleHierarchy
    { 
        $current = $this_Hierarchy_23.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getFeatureModelOperationParserRuleCall_1_21()); 
    }
    this_FeatureModelOperation_24=ruleFeatureModelOperation
    { 
        $current = $this_FeatureModelOperation_24.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAggregateParserRuleCall_1_22()); 
    }
    this_Aggregate_25=ruleAggregate
    { 
        $current = $this_Aggregate_25.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getSliceParserRuleCall_1_23()); 
    }
    this_Slice_26=ruleSlice
    { 
        $current = $this_Slice_26.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getMapParserRuleCall_1_24()); 
    }
    this_Map_27=ruleMap
    { 
        $current = $this_Map_27.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getUnMapParserRuleCall_1_25()); 
    }
    this_UnMap_28=ruleUnMap
    { 
        $current = $this_UnMap_28.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAtomicConstraintExprParserRuleCall_1_26()); 
    }
    this_AtomicConstraintExpr_29=ruleAtomicConstraintExpr
    { 
        $current = $this_AtomicConstraintExpr_29.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getConstraintExprParserRuleCall_1_27()); 
    }
    this_ConstraintExpr_30=ruleConstraintExpr
    { 
        $current = $this_ConstraintExpr_30.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getGetConstraintsParserRuleCall_1_28()); 
    }
    this_GetConstraints_31=ruleGetConstraints
    { 
        $current = $this_GetConstraints_31.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getComputeConstraintsParserRuleCall_1_29()); 
    }
    this_ComputeConstraints_32=ruleComputeConstraints
    { 
        $current = $this_ComputeConstraints_32.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getGetFGroupsParserRuleCall_1_30()); 
    }
    this_GetFGroups_33=ruleGetFGroups
    { 
        $current = $this_GetFGroups_33.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getComputeFGroupsParserRuleCall_1_31()); 
    }
    this_ComputeFGroups_34=ruleComputeFGroups
    { 
        $current = $this_ComputeFGroups_34.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getVariableNullParserRuleCall_1_32()); 
    }
    this_VariableNull_35=ruleVariableNull
    { 
        $current = $this_VariableNull_35.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCoresParserRuleCall_1_33()); 
    }
    this_Cores_36=ruleCores
    { 
        $current = $this_Cores_36.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getDeadsParserRuleCall_1_34()); 
    }
    this_Deads_37=ruleDeads
    { 
        $current = $this_Deads_37.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCliquesParserRuleCall_1_35()); 
    }
    this_Cliques_38=ruleCliques
    { 
        $current = $this_Cliques_38.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getLeavesParserRuleCall_1_36()); 
    }
    this_Leaves_39=ruleLeaves
    { 
        $current = $this_Leaves_39.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getFullMandatorysParserRuleCall_1_37()); 
    }
    this_FullMandatorys_40=ruleFullMandatorys
    { 
        $current = $this_FullMandatorys_40.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getPrinterUtilityParserRuleCall_1_38()); 
    }
    this_PrinterUtility_41=rulePrinterUtility
    { 
        $current = $this_PrinterUtility_41.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getConvertParserRuleCall_1_39()); 
    }
    this_Convert_42=ruleConvert
    { 
        $current = $this_Convert_42.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAssertionParserRuleCall_1_40()); 
    }
    this_Assertion_43=ruleAssertion
    { 
        $current = $this_Assertion_43.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getGDisplayParserRuleCall_1_41()); 
    }
    this_GDisplay_44=ruleGDisplay
    { 
        $current = $this_GDisplay_44.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getGListingParserRuleCall_1_42()); 
    }
    this_GListing_45=ruleGListing
    { 
        $current = $this_GListing_45.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCleanUpParserRuleCall_1_43()); 
    }
    this_CleanUp_46=ruleCleanUp
    { 
        $current = $this_CleanUp_46.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getAsFMParserRuleCall_1_44()); 
    }
    this_AsFM_47=ruleAsFM
    { 
        $current = $this_AsFM_47.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getModifyVOperatorParserRuleCall_1_45()); 
    }
    this_ModifyVOperator_48=ruleModifyVOperator
    { 
        $current = $this_ModifyVOperator_48.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getFMLSaveParserRuleCall_1_46()); 
    }
    this_FMLSave_49=ruleFMLSave
    { 
        $current = $this_FMLSave_49.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getConfigurationCmdParserRuleCall_1_47()); 
    }
    this_ConfigurationCmd_50=ruleConfigurationCmd
    { 
        $current = $this_ConfigurationCmd_50.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getScriptDefinitionParserRuleCall_1_48()); 
    }
    this_ScriptDefinition_51=ruleScriptDefinition
    { 
        $current = $this_ScriptDefinition_51.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getShellParserRuleCall_1_49()); 
    }
    this_Shell_52=ruleShell
    { 
        $current = $this_Shell_52.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCopyVariableParserRuleCall_1_50()); 
    }
    this_CopyVariable_53=ruleCopyVariable
    { 
        $current = $this_CopyVariable_53.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getRemoveVariableParserRuleCall_1_51()); 
    }
    this_RemoveVariable_54=ruleRemoveVariable
    { 
        $current = $this_RemoveVariable_54.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getCTCRCommandParserRuleCall_1_52()); 
    }
    this_CTCRCommand_55=ruleCTCRCommand
    { 
        $current = $this_CTCRCommand_55.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCommandAccess().getPairwiseCommandParserRuleCall_1_53()); 
    }
    this_PairwiseCommand_56=rulePairwiseCommand
    { 
        $current = $this_PairwiseCommand_56.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleIntegerExpr
entryRuleIntegerExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerExprRule()); }
	 iv_ruleIntegerExpr=ruleIntegerExpr 
	 { $current=$iv_ruleIntegerExpr.current; } 
	 EOF 
;

// Rule IntegerExpr
ruleIntegerExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntegerExprAccess().getIntLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntegerExprAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleBooleanExpr
entryRuleBooleanExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExprRule()); }
	 iv_ruleBooleanExpr=ruleBooleanExpr 
	 { $current=$iv_ruleBooleanExpr.current; } 
	 EOF 
;

// Rule BooleanExpr
ruleBooleanExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanExprAccess().getBooleanExprAction_0(),
            $current);
    }
)(
(
(
		lv_val_1_1=	'true' 
    {
        newLeafNode(lv_val_1_1, grammarAccess.getBooleanExprAccess().getValTrueKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExprRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_1_1, null);
	    }

    |		lv_val_1_2=	'false' 
    {
        newLeafNode(lv_val_1_2, grammarAccess.getBooleanExprAccess().getValFalseKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExprRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_1_2, null);
	    }

)

)
))
;





// Entry rule entryRuleIdentifierExpr
entryRuleIdentifierExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierExprRule()); }
	 iv_ruleIdentifierExpr=ruleIdentifierExpr 
	 { $current=$iv_ruleIdentifierExpr.current; } 
	 EOF 
;

// Rule IdentifierExpr
ruleIdentifierExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierExprAccess().getValFML_IDENTIFIERParserRuleCall_0_0()); 
	    }
		lv_val_0_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_LEFT_HOOK_1=RULE_LEFT_HOOK
    { 
    newLeafNode(this_LEFT_HOOK_1, grammarAccess.getIdentifierExprAccess().getLEFT_HOOKTerminalRuleCall_1_0()); 
    }
this_META_ATTRIBUTE_SYMBOL_2=RULE_META_ATTRIBUTE_SYMBOL
    { 
    newLeafNode(this_META_ATTRIBUTE_SYMBOL_2, grammarAccess.getIdentifierExprAccess().getMETA_ATTRIBUTE_SYMBOLTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierExprAccess().getMetaIDStringExprParserRuleCall_1_2_0()); 
	    }
		lv_metaID_3_0=ruleStringExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierExprRule());
	        }
       		set(
       			$current, 
       			"metaID",
        		lv_metaID_3_0, 
        		"StringExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_HOOK_4=RULE_RIGHT_HOOK
    { 
    newLeafNode(this_RIGHT_HOOK_4, grammarAccess.getIdentifierExprAccess().getRIGHT_HOOKTerminalRuleCall_1_3()); 
    }
)?)
;





// Entry rule entryRuleStringExpr
entryRuleStringExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringExprRule()); }
	 iv_ruleStringExpr=ruleStringExpr 
	 { $current=$iv_ruleStringExpr.current; } 
	 EOF 
;

// Rule StringExpr
ruleStringExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_STRING
		{
			newLeafNode(lv_val_0_0, grammarAccess.getStringExprAccess().getValSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleSetExpr
entryRuleSetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetExprRule()); }
	 iv_ruleSetExpr=ruleSetExpr 
	 { $current=$iv_ruleSetExpr.current; } 
	 EOF 
;

// Rule SetExpr
ruleSetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_BRACKET_0=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_0, grammarAccess.getSetExprAccess().getLEFT_BRACKETTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetExprAccess().getEComplexCommandParserRuleCall_1_0()); 
	    }
		lv_e_1_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetExprRule());
	        }
       		add(
       			$current, 
       			"e",
        		lv_e_1_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_BRACKET_2=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_2, grammarAccess.getSetExprAccess().getRIGHT_BRACKETTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleAtomicConstraintExpr
entryRuleAtomicConstraintExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicConstraintExprRule()); }
	 iv_ruleAtomicConstraintExpr=ruleAtomicConstraintExpr 
	 { $current=$iv_ruleAtomicConstraintExpr.current; } 
	 EOF 
;

// Rule AtomicConstraintExpr
ruleAtomicConstraintExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtomicConstraintExprAccess().getConstraintKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getAtomicConstraintExprAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicConstraintExprAccess().getExprCNFParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleCNF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicConstraintExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"CNF");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getAtomicConstraintExprAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleConstraintExpr
entryRuleConstraintExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintExprRule()); }
	 iv_ruleConstraintExpr=ruleConstraintExpr 
	 { $current=$iv_ruleConstraintExpr.current; } 
	 EOF 
;

// Rule ConstraintExpr
ruleConstraintExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraints' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraintExprAccess().getConstraintsKeyword_0());
    }
((this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getConstraintExprAccess().getLEFT_PARENTerminalRuleCall_1_0_0()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExprAccess().getConstraintsCNFParserRuleCall_1_0_1_0_0()); 
	    }
		lv_constraints_2_0=ruleCNF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExprRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"CNF");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstraintExprAccess().getSemicolonKeyword_1_0_1_1());
    }
)+this_RIGHT_PAREN_4=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_4, grammarAccess.getConstraintExprAccess().getRIGHT_PARENTerminalRuleCall_1_0_2()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExprAccess().getFmFMCommandParserRuleCall_1_1_0()); 
	    }
		lv_fm_5_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExprRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_5_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFeatureVariabilityOperator
entryRuleFeatureVariabilityOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureVariabilityOperatorRule()); }
	 iv_ruleFeatureVariabilityOperator=ruleFeatureVariabilityOperator 
	 { $current=$iv_ruleFeatureVariabilityOperator.current; } 
	 EOF 
;

// Rule FeatureVariabilityOperator
ruleFeatureVariabilityOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureVariabilityOperatorAccess().getValFeatureEdgeKindEnumRuleCall_0()); 
	    }
		lv_val_0_0=ruleFeatureEdgeKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureVariabilityOperatorRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"FeatureEdgeKind");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIfCondition
entryRuleIfCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfConditionRule()); }
	 iv_ruleIfCondition=ruleIfCondition 
	 { $current=$iv_ruleIfCondition.current; } 
	 EOF 
;

// Rule IfCondition
ruleIfCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfConditionAccess().getIfKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getIfConditionAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfConditionAccess().getBexprComplexCommandParserRuleCall_2_0()); 
	    }
		lv_bexpr_2_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfConditionRule());
	        }
       		set(
       			$current, 
       			"bexpr",
        		lv_bexpr_2_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getIfConditionAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfConditionAccess().getThenKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfConditionAccess().getThenScriptCommandParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleScriptCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfConditionRule());
	        }
       		add(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"ScriptCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfConditionAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfConditionAccess().getElseScriptCommandParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleScriptCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfConditionRule());
	        }
       		add(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"ScriptCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfConditionAccess().getEndKeyword_7());
    }
)
;





// Entry rule entryRuleForeachSet
entryRuleForeachSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForeachSetRule()); }
	 iv_ruleForeachSet=ruleForeachSet 
	 { $current=$iv_ruleForeachSet.current; } 
	 EOF 
;

// Rule ForeachSet
ruleForeachSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='foreach' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForeachSetAccess().getForeachKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getForeachSetAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachSetAccess().getValFML_IDENTIFIERParserRuleCall_2_0()); 
	    }
		lv_val_2_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachSetRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_2_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForeachSetAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachSetAccess().getVarFML_IDENTIFIERParserRuleCall_4_0()); 
	    }
		lv_var_4_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachSetRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_4_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_5=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_5, grammarAccess.getForeachSetAccess().getRIGHT_PARENTerminalRuleCall_5()); 
    }
	otherlv_6='do' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForeachSetAccess().getDoKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForeachSetAccess().getExprsScriptCommandParserRuleCall_7_0()); 
	    }
		lv_exprs_7_0=ruleScriptCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForeachSetRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_7_0, 
        		"ScriptCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForeachSetAccess().getEndKeyword_8());
    }
)
;





// Entry rule entryRulelType
entryRulelType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLTypeRule()); }
	 iv_rulelType=rulelType 
	 { $current=$iv_rulelType.current; } 
	 EOF 
;

// Rule lType
rulelType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_val_0_1=	'FeatureModel' 
    {
        newLeafNode(lv_val_0_1, grammarAccess.getLTypeAccess().getValFeatureModelKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_1, null);
	    }

    |		lv_val_0_2=	'Feature' 
    {
        newLeafNode(lv_val_0_2, grammarAccess.getLTypeAccess().getValFeatureKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_2, null);
	    }

    |		lv_val_0_3=	'Boolean' 
    {
        newLeafNode(lv_val_0_3, grammarAccess.getLTypeAccess().getValBooleanKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_3, null);
	    }

    |		lv_val_0_4=	'String' 
    {
        newLeafNode(lv_val_0_4, grammarAccess.getLTypeAccess().getValStringKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_4, null);
	    }

    |		lv_val_0_5=	'Configuration' 
    {
        newLeafNode(lv_val_0_5, grammarAccess.getLTypeAccess().getValConfigurationKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_5, null);
	    }

    |		lv_val_0_6=	'Set' 
    {
        newLeafNode(lv_val_0_6, grammarAccess.getLTypeAccess().getValSetKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_6, null);
	    }

    |		lv_val_0_7=	'Double' 
    {
        newLeafNode(lv_val_0_7, grammarAccess.getLTypeAccess().getValDoubleKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_7, null);
	    }

    |		lv_val_0_8=	'Integer' 
    {
        newLeafNode(lv_val_0_8, grammarAccess.getLTypeAccess().getValIntegerKeyword_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_8, null);
	    }

    |		lv_val_0_9=	'Constraint' 
    {
        newLeafNode(lv_val_0_9, grammarAccess.getLTypeAccess().getValConstraintKeyword_0_8());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLTypeRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_9, null);
	    }

)

)
)
;







// Entry rule entryRuleFMCommand
entryRuleFMCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFMCommandRule()); }
	 iv_ruleFMCommand=ruleFMCommand 
	 { $current=$iv_ruleFMCommand.current; } 
	 EOF 
;

// Rule FMCommand
ruleFMCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getCopyVariableParserRuleCall_1()); 
    }
    this_CopyVariable_1=ruleCopyVariable
    { 
        $current = $this_CopyVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getAggregateMergeParserRuleCall_2()); 
    }
    this_AggregateMerge_2=ruleAggregateMerge
    { 
        $current = $this_AggregateMerge_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getMergeParserRuleCall_3()); 
    }
    this_Merge_3=ruleMerge
    { 
        $current = $this_Merge_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getSynthesisParserRuleCall_4()); 
    }
    this_Synthesis_4=ruleSynthesis
    { 
        $current = $this_Synthesis_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getFeatureModelParserRuleCall_5()); 
    }
    this_FeatureModel_5=ruleFeatureModel
    { 
        $current = $this_FeatureModel_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getFMFeatureParserRuleCall_6()); 
    }
    this_FMFeature_6=ruleFMFeature
    { 
        $current = $this_FMFeature_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getAsFMParserRuleCall_7()); 
    }
    this_AsFM_7=ruleAsFM
    { 
        $current = $this_AsFM_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getAggregateParserRuleCall_8()); 
    }
    this_Aggregate_8=ruleAggregate
    { 
        $current = $this_Aggregate_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getExtractParserRuleCall_9()); 
    }
    this_Extract_9=ruleExtract
    { 
        $current = $this_Extract_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getSliceParserRuleCall_10()); 
    }
    this_Slice_10=ruleSlice
    { 
        $current = $this_Slice_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFMCommandAccess().getHierarchyParserRuleCall_11()); 
    }
    this_Hierarchy_11=ruleHierarchy
    { 
        $current = $this_Hierarchy_11.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFTCommand
entryRuleFTCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTCommandRule()); }
	 iv_ruleFTCommand=ruleFTCommand 
	 { $current=$iv_ruleFTCommand.current; } 
	 EOF 
;

// Rule FTCommand
ruleFTCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFTCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFTCommandAccess().getCopyVariableParserRuleCall_1()); 
    }
    this_CopyVariable_1=ruleCopyVariable
    { 
        $current = $this_CopyVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFTCommandAccess().getFeatureOperationParserRuleCall_2()); 
    }
    this_FeatureOperation_2=ruleFeatureOperation
    { 
        $current = $this_FeatureOperation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleStrCommand
entryRuleStrCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrCommandRule()); }
	 iv_ruleStrCommand=ruleStrCommand 
	 { $current=$iv_ruleStrCommand.current; } 
	 EOF 
;

// Rule StrCommand
ruleStrCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getCopyVariableParserRuleCall_1()); 
    }
    this_CopyVariable_1=ruleCopyVariable
    { 
        $current = $this_CopyVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getStringExprParserRuleCall_2()); 
    }
    this_StringExpr_2=ruleStringExpr
    { 
        $current = $this_StringExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getStringConcatParserRuleCall_3()); 
    }
    this_StringConcat_3=ruleStringConcat
    { 
        $current = $this_StringConcat_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getStringInitParserRuleCall_4()); 
    }
    this_StringInit_4=ruleStringInit
    { 
        $current = $this_StringInit_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getStringSubstringParserRuleCall_5()); 
    }
    this_StringSubstring_5=ruleStringSubstring
    { 
        $current = $this_StringSubstring_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getFeatureOperationParserRuleCall_6()); 
    }
    this_FeatureOperation_6=ruleFeatureOperation
    { 
        $current = $this_FeatureOperation_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStrCommandAccess().getConvertParserRuleCall_7()); 
    }
    this_Convert_7=ruleConvert
    { 
        $current = $this_Convert_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConfigurationCommand
entryRuleConfigurationCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationCommandRule()); }
	 iv_ruleConfigurationCommand=ruleConfigurationCommand 
	 { $current=$iv_ruleConfigurationCommand.current; } 
	 EOF 
;

// Rule ConfigurationCommand
ruleConfigurationCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCommandAccess().getCreateConfigurationParserRuleCall_1()); 
    }
    this_CreateConfiguration_1=ruleCreateConfiguration
    { 
        $current = $this_CreateConfiguration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSetCommand
entryRuleSetCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetCommandRule()); }
	 iv_ruleSetCommand=ruleSetCommand 
	 { $current=$iv_ruleSetCommand.current; } 
	 EOF 
;

// Rule SetCommand
ruleSetCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getSetExprParserRuleCall_1()); 
    }
    this_SetExpr_1=ruleSetExpr
    { 
        $current = $this_SetExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getFeatureOperationParserRuleCall_2()); 
    }
    this_FeatureOperation_2=ruleFeatureOperation
    { 
        $current = $this_FeatureOperation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getCliquesParserRuleCall_3()); 
    }
    this_Cliques_3=ruleCliques
    { 
        $current = $this_Cliques_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getCoresParserRuleCall_4()); 
    }
    this_Cores_4=ruleCores
    { 
        $current = $this_Cores_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getDeadsParserRuleCall_5()); 
    }
    this_Deads_5=ruleDeads
    { 
        $current = $this_Deads_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getFullMandatorysParserRuleCall_6()); 
    }
    this_FullMandatorys_6=ruleFullMandatorys
    { 
        $current = $this_FullMandatorys_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getSetToNamesParserRuleCall_7()); 
    }
    this_SetToNames_7=ruleSetToNames
    { 
        $current = $this_SetToNames_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getSetUnionOrIntersectionParserRuleCall_8()); 
    }
    this_SetUnionOrIntersection_8=ruleSetUnionOrIntersection
    { 
        $current = $this_SetUnionOrIntersection_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getLeavesParserRuleCall_9()); 
    }
    this_Leaves_9=ruleLeaves
    { 
        $current = $this_Leaves_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getSetEmptyParserRuleCall_10()); 
    }
    this_SetEmpty_10=ruleSetEmpty
    { 
        $current = $this_SetEmpty_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getSelectedConfigurationParserRuleCall_11()); 
    }
    this_SelectedConfiguration_11=ruleSelectedConfiguration
    { 
        $current = $this_SelectedConfiguration_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getDeselectedConfigurationParserRuleCall_12()); 
    }
    this_DeselectedConfiguration_12=ruleDeselectedConfiguration
    { 
        $current = $this_DeselectedConfiguration_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getConstraintExprParserRuleCall_13()); 
    }
    this_ConstraintExpr_13=ruleConstraintExpr
    { 
        $current = $this_ConstraintExpr_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getGetConstraintsParserRuleCall_14()); 
    }
    this_GetConstraints_14=ruleGetConstraints
    { 
        $current = $this_GetConstraints_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getComputeConstraintsParserRuleCall_15()); 
    }
    this_ComputeConstraints_15=ruleComputeConstraints
    { 
        $current = $this_ComputeConstraints_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getGetFGroupsParserRuleCall_16()); 
    }
    this_GetFGroups_16=ruleGetFGroups
    { 
        $current = $this_GetFGroups_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getComputeFGroupsParserRuleCall_17()); 
    }
    this_ComputeFGroups_17=ruleComputeFGroups
    { 
        $current = $this_ComputeFGroups_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetCommandAccess().getPairwiseCommandParserRuleCall_18()); 
    }
    this_PairwiseCommand_18=rulePairwiseCommand
    { 
        $current = $this_PairwiseCommand_18.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLeaves
entryRuleLeaves returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeavesRule()); }
	 iv_ruleLeaves=ruleLeaves 
	 { $current=$iv_ruleLeaves.current; } 
	 EOF 
;

// Rule Leaves
ruleLeaves returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='leaves' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLeavesAccess().getLeavesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLeavesAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeavesRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstraintCommand
entryRuleConstraintCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintCommandRule()); }
	 iv_ruleConstraintCommand=ruleConstraintCommand 
	 { $current=$iv_ruleConstraintCommand.current; } 
	 EOF 
;

// Rule ConstraintCommand
ruleConstraintCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstraintCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstraintCommandAccess().getAtomicConstraintExprParserRuleCall_1()); 
    }
    this_AtomicConstraintExpr_1=ruleAtomicConstraintExpr
    { 
        $current = $this_AtomicConstraintExpr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGetConstraints
entryRuleGetConstraints returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetConstraintsRule()); }
	 iv_ruleGetConstraints=ruleGetConstraints 
	 { $current=$iv_ruleGetConstraints.current; } 
	 EOF 
;

// Rule GetConstraints
ruleGetConstraints returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGetConstraintsAccess().getKindOfGetKindOfGetEnumRuleCall_0_0()); 
	    }
		lv_kindOfGet_0_0=ruleKindOfGet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetConstraintsRule());
	        }
       		set(
       			$current, 
       			"kindOfGet",
        		lv_kindOfGet_0_0, 
        		"KindOfGet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetConstraintsAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetConstraintsRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComputeConstraints
entryRuleComputeConstraints returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComputeConstraintsRule()); }
	 iv_ruleComputeConstraints=ruleComputeConstraints 
	 { $current=$iv_ruleComputeConstraints.current; } 
	 EOF 
;

// Rule ComputeConstraints
ruleComputeConstraints returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComputeConstraintsAccess().getKindOfComputeKindOfComputeEnumRuleCall_0_0()); 
	    }
		lv_kindOfCompute_0_0=ruleKindOfCompute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComputeConstraintsRule());
	        }
       		set(
       			$current, 
       			"kindOfCompute",
        		lv_kindOfCompute_0_0, 
        		"KindOfCompute");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComputeConstraintsAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComputeConstraintsRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGetFGroups
entryRuleGetFGroups returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetFGroupsRule()); }
	 iv_ruleGetFGroups=ruleGetFGroups 
	 { $current=$iv_ruleGetFGroups.current; } 
	 EOF 
;

// Rule GetFGroups
ruleGetFGroups returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGetFGroupsAccess().getKindOfGroupsKindOfGetGroupsEnumRuleCall_0_0()); 
	    }
		lv_kindOfGroups_0_0=ruleKindOfGetGroups		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetFGroupsRule());
	        }
       		set(
       			$current, 
       			"kindOfGroups",
        		lv_kindOfGroups_0_0, 
        		"KindOfGetGroups");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetFGroupsAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetFGroupsRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComputeFGroups
entryRuleComputeFGroups returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComputeFGroupsRule()); }
	 iv_ruleComputeFGroups=ruleComputeFGroups 
	 { $current=$iv_ruleComputeFGroups.current; } 
	 EOF 
;

// Rule ComputeFGroups
ruleComputeFGroups returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComputeFGroupsAccess().getKindOfGroupsKindOfComputeGroupsEnumRuleCall_0_0()); 
	    }
		lv_kindOfGroups_0_0=ruleKindOfComputeGroups		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComputeFGroupsRule());
	        }
       		set(
       			$current, 
       			"kindOfGroups",
        		lv_kindOfGroups_0_0, 
        		"KindOfComputeGroups");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComputeFGroupsAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComputeFGroupsRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePairwiseCommand
entryRulePairwiseCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPairwiseCommandRule()); }
	 iv_rulePairwiseCommand=rulePairwiseCommand 
	 { $current=$iv_rulePairwiseCommand.current; } 
	 EOF 
;

// Rule PairwiseCommand
rulePairwiseCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pw' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPairwiseCommandAccess().getPwKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPairwiseCommandAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairwiseCommandRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='minimization=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPairwiseCommandAccess().getMinimizationKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPairwiseCommandAccess().getMinimizationIntegerCommandParserRuleCall_2_1_0()); 
	    }
		lv_minimization_3_0=ruleIntegerCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairwiseCommandRule());
	        }
       		set(
       			$current, 
       			"minimization",
        		lv_minimization_3_0, 
        		"IntegerCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='partial=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPairwiseCommandAccess().getPartialKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPairwiseCommandAccess().getPartialIntegerCommandParserRuleCall_3_1_0()); 
	    }
		lv_partial_5_0=ruleIntegerCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairwiseCommandRule());
	        }
       		set(
       			$current, 
       			"partial",
        		lv_partial_5_0, 
        		"IntegerCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleIntegerCommand
entryRuleIntegerCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerCommandRule()); }
	 iv_ruleIntegerCommand=ruleIntegerCommand 
	 { $current=$iv_ruleIntegerCommand.current; } 
	 EOF 
;

// Rule IntegerCommand
ruleIntegerCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerCommandAccess().getIntegerExprParserRuleCall_1()); 
    }
    this_IntegerExpr_1=ruleIntegerExpr
    { 
        $current = $this_IntegerExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerCommandAccess().getSetCardParserRuleCall_2()); 
    }
    this_SetCard_2=ruleSetCard
    { 
        $current = $this_SetCard_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerCommandAccess().getStringLengthParserRuleCall_3()); 
    }
    this_StringLength_3=ruleStringLength
    { 
        $current = $this_StringLength_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerCommandAccess().getStringIndexOfParserRuleCall_4()); 
    }
    this_StringIndexOf_4=ruleStringIndexOf
    { 
        $current = $this_StringIndexOf_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerCommandAccess().getDoubleCommandParserRuleCall_5()); 
    }
    this_DoubleCommand_5=ruleDoubleCommand
    { 
        $current = $this_DoubleCommand_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDoubleCommand
entryRuleDoubleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleCommandRule()); }
	 iv_ruleDoubleCommand=ruleDoubleCommand 
	 { $current=$iv_ruleDoubleCommand.current; } 
	 EOF 
;

// Rule DoubleCommand
ruleDoubleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDoubleCommandAccess().getCTCRCommandParserRuleCall()); 
    }
    this_CTCRCommand_0=ruleCTCRCommand
    { 
        $current = $this_CTCRCommand_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleVariabilityOpCommand
entryRuleVariabilityOpCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariabilityOpCommandRule()); }
	 iv_ruleVariabilityOpCommand=ruleVariabilityOpCommand 
	 { $current=$iv_ruleVariabilityOpCommand.current; } 
	 EOF 
;

// Rule VariabilityOpCommand
ruleVariabilityOpCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariabilityOpCommandAccess().getIdentifierExprParserRuleCall_0()); 
    }
    this_IdentifierExpr_0=ruleIdentifierExpr
    { 
        $current = $this_IdentifierExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariabilityOpCommandAccess().getCopyVariableParserRuleCall_1()); 
    }
    this_CopyVariable_1=ruleCopyVariable
    { 
        $current = $this_CopyVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariabilityOpCommandAccess().getFeatureVariabilityOperatorParserRuleCall_2()); 
    }
    this_FeatureVariabilityOperator_2=ruleFeatureVariabilityOperator
    { 
        $current = $this_FeatureVariabilityOperator_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAnalysisOperation
entryRuleAnalysisOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnalysisOperationRule()); }
	 iv_ruleAnalysisOperation=ruleAnalysisOperation 
	 { $current=$iv_ruleAnalysisOperation.current; } 
	 EOF 
;

// Rule AnalysisOperation
ruleAnalysisOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'isValid' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getAnalysisOperationAccess().getOpIsValidKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnalysisOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'counting' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getAnalysisOperationAccess().getOpCountingKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnalysisOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

    |		lv_op_0_3=	'configs' 
    {
        newLeafNode(lv_op_0_3, grammarAccess.getAnalysisOperationAccess().getOpConfigsKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnalysisOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_3, null);
	    }

    |		lv_op_0_4=	'nbFeatures' 
    {
        newLeafNode(lv_op_0_4, grammarAccess.getAnalysisOperationAccess().getOpNbFeaturesKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnalysisOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_4, null);
	    }

    |		lv_op_0_5=	'root' 
    {
        newLeafNode(lv_op_0_5, grammarAccess.getAnalysisOperationAccess().getOpRootKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnalysisOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_5, null);
	    }

    |		lv_op_0_6=	'features' 
    {
        newLeafNode(lv_op_0_6, grammarAccess.getAnalysisOperationAccess().getOpFeaturesKeyword_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnalysisOperationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_6, null);
	    }

)

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnalysisOperationAccess().getFmFMCommandParserRuleCall_1_0_0()); 
	    }
		lv_fm_1_1=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnalysisOperationRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_1, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAnalysisOperationAccess().getFmConfigurationCommandParserRuleCall_1_0_1()); 
	    }
		lv_fm_1_2=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnalysisOperationRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_2, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleSetOperations
entryRuleSetOperations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetOperationsRule()); }
	 iv_ruleSetOperations=ruleSetOperations 
	 { $current=$iv_ruleSetOperations.current; } 
	 EOF 
;

// Rule SetOperations
ruleSetOperations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getSetCardParserRuleCall_0()); 
    }
    this_SetCard_0=ruleSetCard
    { 
        $current = $this_SetCard_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getSetToNamesParserRuleCall_1()); 
    }
    this_SetToNames_1=ruleSetToNames
    { 
        $current = $this_SetToNames_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getSetBelongsParserRuleCall_2()); 
    }
    this_SetBelongs_2=ruleSetBelongs
    { 
        $current = $this_SetBelongs_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getSetUnionOrIntersectionParserRuleCall_3()); 
    }
    this_SetUnionOrIntersection_3=ruleSetUnionOrIntersection
    { 
        $current = $this_SetUnionOrIntersection_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getSetEmptyParserRuleCall_4()); 
    }
    this_SetEmpty_4=ruleSetEmpty
    { 
        $current = $this_SetEmpty_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getSetAddOrRemoveParserRuleCall_5()); 
    }
    this_SetAddOrRemove_5=ruleSetAddOrRemove
    { 
        $current = $this_SetAddOrRemove_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSetOperationsAccess().getIsEmptySetParserRuleCall_6()); 
    }
    this_IsEmptySet_6=ruleIsEmptySet
    { 
        $current = $this_IsEmptySet_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSetCard
entryRuleSetCard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetCardRule()); }
	 iv_ruleSetCard=ruleSetCard 
	 { $current=$iv_ruleSetCard.current; } 
	 EOF 
;

// Rule SetCard
ruleSetCard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='size' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetCardAccess().getSizeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetCardAccess().getSetSetCommandParserRuleCall_1_0()); 
	    }
		lv_set_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetCardRule());
	        }
       		set(
       			$current, 
       			"set",
        		lv_set_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetBelongs
entryRuleSetBelongs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetBelongsRule()); }
	 iv_ruleSetBelongs=ruleSetBelongs 
	 { $current=$iv_ruleSetBelongs.current; } 
	 EOF 
;

// Rule SetBelongs
ruleSetBelongs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='setBelongs' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetBelongsAccess().getSetBelongsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetBelongsAccess().getSetlFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_setl_1_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetBelongsRule());
	        }
       		set(
       			$current, 
       			"setl",
        		lv_setl_1_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetBelongsAccess().getSetrFML_IDENTIFIERParserRuleCall_2_0()); 
	    }
		lv_setr_2_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetBelongsRule());
	        }
       		set(
       			$current, 
       			"setr",
        		lv_setr_2_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetUnionOrIntersection
entryRuleSetUnionOrIntersection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetUnionOrIntersectionRule()); }
	 iv_ruleSetUnionOrIntersection=ruleSetUnionOrIntersection 
	 { $current=$iv_ruleSetUnionOrIntersection.current; } 
	 EOF 
;

// Rule SetUnionOrIntersection
ruleSetUnionOrIntersection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'setUnion' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getSetUnionOrIntersectionAccess().getOpSetUnionKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetUnionOrIntersectionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'setIntersection' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getSetUnionOrIntersectionAccess().getOpSetIntersectionKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetUnionOrIntersectionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

    |		lv_op_0_3=	'setDiff' 
    {
        newLeafNode(lv_op_0_3, grammarAccess.getSetUnionOrIntersectionAccess().getOpSetDiffKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetUnionOrIntersectionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetUnionOrIntersectionAccess().getSetlSetCommandParserRuleCall_1_0()); 
	    }
		lv_setl_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetUnionOrIntersectionRule());
	        }
       		set(
       			$current, 
       			"setl",
        		lv_setl_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetUnionOrIntersectionAccess().getSetrSetCommandParserRuleCall_2_0()); 
	    }
		lv_setr_2_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetUnionOrIntersectionRule());
	        }
       		set(
       			$current, 
       			"setr",
        		lv_setr_2_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetEmpty
entryRuleSetEmpty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetEmptyRule()); }
	 iv_ruleSetEmpty=ruleSetEmpty 
	 { $current=$iv_ruleSetEmpty.current; } 
	 EOF 
;

// Rule SetEmpty
ruleSetEmpty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'setEmpty' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getSetEmptyAccess().getValSetEmptyKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetEmptyRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "setEmpty");
	    }

)
)
;





// Entry rule entryRuleSetAddOrRemove
entryRuleSetAddOrRemove returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetAddOrRemoveRule()); }
	 iv_ruleSetAddOrRemove=ruleSetAddOrRemove 
	 { $current=$iv_ruleSetAddOrRemove.current; } 
	 EOF 
;

// Rule SetAddOrRemove
ruleSetAddOrRemove returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'setAdd' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getSetAddOrRemoveAccess().getOpSetAddKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetAddOrRemoveRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'setRemove' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getSetAddOrRemoveAccess().getOpSetRemoveKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetAddOrRemoveRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAddOrRemoveAccess().getSetlSetCommandParserRuleCall_1_0()); 
	    }
		lv_setl_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetAddOrRemoveRule());
	        }
       		set(
       			$current, 
       			"setl",
        		lv_setl_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAddOrRemoveAccess().getVarCommandParserRuleCall_2_0()); 
	    }
		lv_var_2_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetAddOrRemoveRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIsEmptySet
entryRuleIsEmptySet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsEmptySetRule()); }
	 iv_ruleIsEmptySet=ruleIsEmptySet 
	 { $current=$iv_ruleIsEmptySet.current; } 
	 EOF 
;

// Rule IsEmptySet
ruleIsEmptySet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='setIsEmpty' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIsEmptySetAccess().getSetIsEmptyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIsEmptySetAccess().getSetSetCommandParserRuleCall_1_0()); 
	    }
		lv_set_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsEmptySetRule());
	        }
       		set(
       			$current, 
       			"set",
        		lv_set_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetToNames
entryRuleSetToNames returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetToNamesRule()); }
	 iv_ruleSetToNames=ruleSetToNames 
	 { $current=$iv_ruleSetToNames.current; } 
	 EOF 
;

// Rule SetToNames
ruleSetToNames returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='names' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetToNamesAccess().getNamesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetToNamesAccess().getSetSetCommandParserRuleCall_1_0()); 
	    }
		lv_set_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetToNamesRule());
	        }
       		set(
       			$current, 
       			"set",
        		lv_set_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeatureOperation
entryRuleFeatureOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureOperationRule()); }
	 iv_ruleFeatureOperation=ruleFeatureOperation 
	 { $current=$iv_ruleFeatureOperation.current; } 
	 EOF 
;

// Rule FeatureOperation
ruleFeatureOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpAncestorFeatureParserRuleCall_0_0_0()); 
	    }
		lv_op_0_1=ruleAncestorFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_1, 
        		"AncestorFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpDescendantFeatureParserRuleCall_0_0_1()); 
	    }
		lv_op_0_2=ruleDescendantFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_2, 
        		"DescendantFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpChildrenFeatureParserRuleCall_0_0_2()); 
	    }
		lv_op_0_3=ruleChildrenFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_3, 
        		"ChildrenFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpSiblingFeatureParserRuleCall_0_0_3()); 
	    }
		lv_op_0_4=ruleSiblingFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_4, 
        		"SiblingFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpParentFeatureParserRuleCall_0_0_4()); 
	    }
		lv_op_0_5=ruleParentFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_5, 
        		"ParentFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpNameFeatureParserRuleCall_0_0_5()); 
	    }
		lv_op_0_6=ruleNameFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_6, 
        		"NameFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpFMFeatureParserRuleCall_0_0_6()); 
	    }
		lv_op_0_7=ruleFMFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_7, 
        		"FMFeature");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getOpFeatureOperatorParserRuleCall_0_0_7()); 
	    }
		lv_op_0_8=ruleFeatureOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_8, 
        		"FeatureOperator");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureOperationAccess().getFeatureFTCommandParserRuleCall_1_0()); 
	    }
		lv_feature_1_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureOperationRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAncestorFeature
entryRuleAncestorFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAncestorFeatureRule()); }
	 iv_ruleAncestorFeature=ruleAncestorFeature 
	 { $current=$iv_ruleAncestorFeature.current; } 
	 EOF 
;

// Rule AncestorFeature
ruleAncestorFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'ancestors' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getAncestorFeatureAccess().getValAncestorsKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAncestorFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "ancestors");
	    }

)
)
;





// Entry rule entryRuleDescendantFeature
entryRuleDescendantFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescendantFeatureRule()); }
	 iv_ruleDescendantFeature=ruleDescendantFeature 
	 { $current=$iv_ruleDescendantFeature.current; } 
	 EOF 
;

// Rule DescendantFeature
ruleDescendantFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'descendants' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getDescendantFeatureAccess().getValDescendantsKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDescendantFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "descendants");
	    }

)
)
;





// Entry rule entryRuleChildrenFeature
entryRuleChildrenFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChildrenFeatureRule()); }
	 iv_ruleChildrenFeature=ruleChildrenFeature 
	 { $current=$iv_ruleChildrenFeature.current; } 
	 EOF 
;

// Rule ChildrenFeature
ruleChildrenFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'children' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getChildrenFeatureAccess().getValChildrenKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChildrenFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "children");
	    }

)
)
;





// Entry rule entryRuleSiblingFeature
entryRuleSiblingFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSiblingFeatureRule()); }
	 iv_ruleSiblingFeature=ruleSiblingFeature 
	 { $current=$iv_ruleSiblingFeature.current; } 
	 EOF 
;

// Rule SiblingFeature
ruleSiblingFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'sibling' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getSiblingFeatureAccess().getValSiblingKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSiblingFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "sibling");
	    }

)
)
;





// Entry rule entryRuleParentFeature
entryRuleParentFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParentFeatureRule()); }
	 iv_ruleParentFeature=ruleParentFeature 
	 { $current=$iv_ruleParentFeature.current; } 
	 EOF 
;

// Rule ParentFeature
ruleParentFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'parent' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getParentFeatureAccess().getValParentKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParentFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "parent");
	    }

)
)
;





// Entry rule entryRuleNameFeature
entryRuleNameFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameFeatureRule()); }
	 iv_ruleNameFeature=ruleNameFeature 
	 { $current=$iv_ruleNameFeature.current; } 
	 EOF 
;

// Rule NameFeature
ruleNameFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'name' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getNameFeatureAccess().getValNameKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "name");
	    }

)
)
;





// Entry rule entryRuleFMFeature
entryRuleFMFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFMFeatureRule()); }
	 iv_ruleFMFeature=ruleFMFeature 
	 { $current=$iv_ruleFMFeature.current; } 
	 EOF 
;

// Rule FMFeature
ruleFMFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'whichfm' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getFMFeatureAccess().getValWhichfmKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMFeatureRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "whichfm");
	    }

)
)
;





// Entry rule entryRuleFeatureOperator
entryRuleFeatureOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureOperatorRule()); }
	 iv_ruleFeatureOperator=ruleFeatureOperator 
	 { $current=$iv_ruleFeatureOperator.current; } 
	 EOF 
;

// Rule FeatureOperator
ruleFeatureOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'operator' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getFeatureOperatorAccess().getValOperatorKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureOperatorRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "operator");
	    }

)
)
;





// Entry rule entryRuleStringOperation
entryRuleStringOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringOperationRule()); }
	 iv_ruleStringOperation=ruleStringOperation 
	 { $current=$iv_ruleStringOperation.current; } 
	 EOF 
;

// Rule StringOperation
ruleStringOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringOperationAccess().getStringInitParserRuleCall_0()); 
    }
    this_StringInit_0=ruleStringInit
    { 
        $current = $this_StringInit_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringOperationAccess().getStringConcatParserRuleCall_1()); 
    }
    this_StringConcat_1=ruleStringConcat
    { 
        $current = $this_StringConcat_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringOperationAccess().getStringSubstringParserRuleCall_2()); 
    }
    this_StringSubstring_2=ruleStringSubstring
    { 
        $current = $this_StringSubstring_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringOperationAccess().getStringIndexOfParserRuleCall_3()); 
    }
    this_StringIndexOf_3=ruleStringIndexOf
    { 
        $current = $this_StringIndexOf_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStringOperationAccess().getStringLengthParserRuleCall_4()); 
    }
    this_StringLength_4=ruleStringLength
    { 
        $current = $this_StringLength_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringInit
entryRuleStringInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringInitRule()); }
	 iv_ruleStringInit=ruleStringInit 
	 { $current=$iv_ruleStringInit.current; } 
	 EOF 
;

// Rule StringInit
ruleStringInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'strInit' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getStringInitAccess().getValStrInitKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringInitRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "strInit");
	    }

)
)
;





// Entry rule entryRuleStringConcat
entryRuleStringConcat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConcatRule()); }
	 iv_ruleStringConcat=ruleStringConcat 
	 { $current=$iv_ruleStringConcat.current; } 
	 EOF 
;

// Rule StringConcat
ruleStringConcat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='strConcat' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringConcatAccess().getStrConcatKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringConcatAccess().getLstrStrCommandParserRuleCall_1_0()); 
	    }
		lv_lstr_1_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringConcatRule());
	        }
       		set(
       			$current, 
       			"lstr",
        		lv_lstr_1_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringConcatAccess().getRstrStrCommandParserRuleCall_2_0()); 
	    }
		lv_rstr_2_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringConcatRule());
	        }
       		set(
       			$current, 
       			"rstr",
        		lv_rstr_2_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringSubstring
entryRuleStringSubstring returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringSubstringRule()); }
	 iv_ruleStringSubstring=ruleStringSubstring 
	 { $current=$iv_ruleStringSubstring.current; } 
	 EOF 
;

// Rule StringSubstring
ruleStringSubstring returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='strSubstring' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringSubstringAccess().getStrSubstringKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringSubstringAccess().getStrStrCommandParserRuleCall_1_0()); 
	    }
		lv_str_1_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringSubstringRule());
	        }
       		set(
       			$current, 
       			"str",
        		lv_str_1_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringSubstringAccess().getBeginIntegerCommandParserRuleCall_2_0()); 
	    }
		lv_begin_2_0=ruleIntegerCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringSubstringRule());
	        }
       		set(
       			$current, 
       			"begin",
        		lv_begin_2_0, 
        		"IntegerCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringSubstringAccess().getEndIntegerCommandParserRuleCall_3_0()); 
	    }
		lv_end_3_0=ruleIntegerCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringSubstringRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"IntegerCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringIndexOf
entryRuleStringIndexOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringIndexOfRule()); }
	 iv_ruleStringIndexOf=ruleStringIndexOf 
	 { $current=$iv_ruleStringIndexOf.current; } 
	 EOF 
;

// Rule StringIndexOf
ruleStringIndexOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='strIndexOf' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringIndexOfAccess().getStrIndexOfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringIndexOfAccess().getStrStrCommandParserRuleCall_1_0()); 
	    }
		lv_str_1_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringIndexOfRule());
	        }
       		set(
       			$current, 
       			"str",
        		lv_str_1_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStringIndexOfAccess().getScharStrCommandParserRuleCall_2_0()); 
	    }
		lv_schar_2_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringIndexOfRule());
	        }
       		set(
       			$current, 
       			"schar",
        		lv_schar_2_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringLength
entryRuleStringLength returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLengthRule()); }
	 iv_ruleStringLength=ruleStringLength 
	 { $current=$iv_ruleStringLength.current; } 
	 EOF 
;

// Rule StringLength
ruleStringLength returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='strLength' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStringLengthAccess().getStrLengthKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringLengthAccess().getStrStrCommandParserRuleCall_1_0()); 
	    }
		lv_str_1_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringLengthRule());
	        }
       		set(
       			$current, 
       			"str",
        		lv_str_1_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	 iv_ruleCompare=ruleCompare 
	 { $current=$iv_ruleCompare.current; } 
	 EOF 
;

// Rule Compare
ruleCompare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='compare' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompareAccess().getCompareKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getFm_leftFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_left_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"fm_left",
        		lv_fm_left_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareAccess().getFm_rightFMCommandParserRuleCall_2_0()); 
	    }
		lv_fm_right_2_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareRule());
	        }
       		set(
       			$current, 
       			"fm_right",
        		lv_fm_right_2_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='parameter' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParameterKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getParamFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_param_1_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_1_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_typed_2_0=	':' 
    {
        newLeafNode(lv_typed_2_0, grammarAccess.getParameterAccess().getTypedColonKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "typed", lv_typed_2_0, ":");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeLTypeParserRuleCall_2_1_0()); 
	    }
		lv_type_3_0=rulelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"lType");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLoadGeneric
entryRuleLoadGeneric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoadGenericRule()); }
	 iv_ruleLoadGeneric=ruleLoadGeneric 
	 { $current=$iv_ruleLoadGeneric.current; } 
	 EOF 
;

// Rule LoadGeneric
ruleLoadGeneric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='run' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoadGenericAccess().getRunKeyword_0());
    }
(
(
(
		lv_stream_1_1=RULE_STRING
		{
			newLeafNode(lv_stream_1_1, grammarAccess.getLoadGenericAccess().getStreamSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoadGenericRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stream",
        		lv_stream_1_1, 
        		"STRING");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLoadGenericAccess().getStreamFML_IDENTIFIERParserRuleCall_1_0_1()); 
	    }
		lv_stream_1_2=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadGenericRule());
	        }
       		set(
       			$current, 
       			"stream",
        		lv_stream_1_2, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(this_LEFT_BRACKET_2=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_2, grammarAccess.getLoadGenericAccess().getLEFT_BRACKETTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadGenericAccess().getParamsFML_IDENTIFIERParserRuleCall_2_1_0()); 
	    }
		lv_params_3_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadGenericRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_RIGHT_BRACKET_4=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_4, grammarAccess.getLoadGenericAccess().getRIGHT_BRACKETTerminalRuleCall_2_2()); 
    }
)?(	otherlv_5='into' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLoadGenericAccess().getIntoKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoadGenericAccess().getNsFML_IDENTIFIERParserRuleCall_3_1_0()); 
	    }
		lv_ns_6_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoadGenericRule());
	        }
       		set(
       			$current, 
       			"ns",
        		lv_ns_6_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCTCRCommand
entryRuleCTCRCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCTCRCommandRule()); }
	 iv_ruleCTCRCommand=ruleCTCRCommand 
	 { $current=$iv_ruleCTCRCommand.current; } 
	 EOF 
;

// Rule CTCRCommand
ruleCTCRCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ctcr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCTCRCommandAccess().getCtcrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCTCRCommandAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCTCRCommandRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMerge
entryRuleMerge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMergeRule()); }
	 iv_ruleMerge=ruleMerge 
	 { $current=$iv_ruleMerge.current; } 
	 EOF 
;

// Rule Merge
ruleMerge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='merge' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMergeAccess().getMergeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergeAccess().getBackendBDDBackendEnumRuleCall_1_0()); 
	    }
		lv_backend_1_0=ruleBDDBackend		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergeRule());
	        }
       		set(
       			$current, 
       			"backend",
        		lv_backend_1_0, 
        		"BDDBackend");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMergeAccess().getModeMergeModeEnumRuleCall_2_0()); 
	    }
		lv_mode_2_0=ruleMergeMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergeRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_2_0, 
        		"MergeMode");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_LEFT_BRACKET_3=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_3, grammarAccess.getMergeAccess().getLEFT_BRACKETTerminalRuleCall_3_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMergeAccess().getLfmsFMCommandParserRuleCall_3_0_1_0()); 
	    }
		lv_lfms_4_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergeRule());
	        }
       		add(
       			$current, 
       			"lfms",
        		lv_lfms_4_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_BRACKET_5=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_5, grammarAccess.getMergeAccess().getRIGHT_BRACKETTerminalRuleCall_3_0_2()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMergeAccess().getFmsLFMArgsParserRuleCall_3_1_0()); 
	    }
		lv_fms_6_0=ruleLFMArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMergeRule());
	        }
       		set(
       			$current, 
       			"fms",
        		lv_fms_6_0, 
        		"LFMArgs");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleLFMArgs
entryRuleLFMArgs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLFMArgsRule()); }
	 iv_ruleLFMArgs=ruleLFMArgs 
	 { $current=$iv_ruleLFMArgs.current; } 
	 EOF 
;

// Rule LFMArgs
ruleLFMArgs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLFMArgsAccess().getLfmsFMCommandParserRuleCall_0_0()); 
	    }
		lv_lfms_0_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLFMArgsRule());
	        }
       		add(
       			$current, 
       			"lfms",
        		lv_lfms_0_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getLFMArgsAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLFMArgsAccess().getLfmsFMCommandParserRuleCall_1_1_0()); 
	    }
		lv_lfms_2_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLFMArgsRule());
	        }
       		add(
       			$current, 
       			"lfms",
        		lv_lfms_2_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAggregateMerge
entryRuleAggregateMerge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregateMergeRule()); }
	 iv_ruleAggregateMerge=ruleAggregateMerge 
	 { $current=$iv_ruleAggregateMerge.current; } 
	 EOF 
;

// Rule AggregateMerge
ruleAggregateMerge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='aggregateMerge' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAggregateMergeAccess().getAggregateMergeKeyword_0());
    }
((
(
		lv_hierarchySpecified_1_0=	'--hierarchy=' 
    {
        newLeafNode(lv_hierarchySpecified_1_0, grammarAccess.getAggregateMergeAccess().getHierarchySpecifiedHierarchyKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregateMergeRule());
	        }
       		setWithLastConsumed($current, "hierarchySpecified", true, "--hierarchy=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateMergeAccess().getHierarchyStrategyHierarchyStrategyEnumRuleCall_1_1_0()); 
	    }
		lv_hierarchyStrategy_2_0=ruleHierarchyStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateMergeRule());
	        }
       		set(
       			$current, 
       			"hierarchyStrategy",
        		lv_hierarchyStrategy_2_0, 
        		"HierarchyStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateMergeAccess().getModeMergeModeEnumRuleCall_2_0()); 
	    }
		lv_mode_3_0=ruleMergeMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateMergeRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_3_0, 
        		"MergeMode");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_LEFT_BRACKET_4=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_4, grammarAccess.getAggregateMergeAccess().getLEFT_BRACKETTerminalRuleCall_3_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateMergeAccess().getLfmsFMCommandParserRuleCall_3_0_1_0()); 
	    }
		lv_lfms_5_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateMergeRule());
	        }
       		add(
       			$current, 
       			"lfms",
        		lv_lfms_5_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_BRACKET_6=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_6, grammarAccess.getAggregateMergeAccess().getRIGHT_BRACKETTerminalRuleCall_3_0_2()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateMergeAccess().getFmsLFMArgsParserRuleCall_3_1_0()); 
	    }
		lv_fms_7_0=ruleLFMArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateMergeRule());
	        }
       		set(
       			$current, 
       			"fms",
        		lv_fms_7_0, 
        		"LFMArgs");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSynthesis
entryRuleSynthesis returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynthesisRule()); }
	 iv_ruleSynthesis=ruleSynthesis 
	 { $current=$iv_ruleSynthesis.current; } 
	 EOF 
;

// Rule Synthesis
ruleSynthesis returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ksynthesis' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSynthesisAccess().getKsynthesisKeyword_0());
    }
(
(
		lv_interactive_1_0=	'--interactive' 
    {
        newLeafNode(lv_interactive_1_0, grammarAccess.getSynthesisAccess().getInteractiveInteractiveKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynthesisRule());
	        }
       		setWithLastConsumed($current, "interactive", true, "--interactive");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSynthesisAccess().getFmFMCommandParserRuleCall_2_0()); 
	    }
		lv_fm_2_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynthesisRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_2_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSynthesisAccess().getWithKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynthesisAccess().getKstKnowledgeSpecificationParserRuleCall_3_1_0()); 
	    }
		lv_kst_4_0=ruleKnowledgeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynthesisRule());
	        }
       		set(
       			$current, 
       			"kst",
        		lv_kst_4_0, 
        		"KnowledgeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleKnowledgeSpecification
entryRuleKnowledgeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKnowledgeSpecificationRule()); }
	 iv_ruleKnowledgeSpecification=ruleKnowledgeSpecification 
	 { $current=$iv_ruleKnowledgeSpecification.current; } 
	 EOF 
;

// Rule KnowledgeSpecification
ruleKnowledgeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getKnowledgeSpecificationAccess().getKnowledgeSpecificationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKnowledgeSpecificationAccess().getHierarchyHierarchySpecificationParserRuleCall_1_0()); 
	    }
		lv_hierarchy_1_0=ruleHierarchySpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKnowledgeSpecificationRule());
	        }
       		set(
       			$current, 
       			"hierarchy",
        		lv_hierarchy_1_0, 
        		"HierarchySpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?(this_COMMA_2=RULE_COMMA
    { 
    newLeafNode(this_COMMA_2, grammarAccess.getKnowledgeSpecificationAccess().getCOMMATerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKnowledgeSpecificationAccess().getGroupsGroupsSpecificationParserRuleCall_2_1_0()); 
	    }
		lv_groups_3_0=ruleGroupsSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKnowledgeSpecificationRule());
	        }
       		set(
       			$current, 
       			"groups",
        		lv_groups_3_0, 
        		"GroupsSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))?(this_COMMA_4=RULE_COMMA
    { 
    newLeafNode(this_COMMA_4, grammarAccess.getKnowledgeSpecificationAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKnowledgeSpecificationAccess().getConstraintsConstraintsSpecificationParserRuleCall_3_1_0()); 
	    }
		lv_constraints_5_0=ruleConstraintsSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKnowledgeSpecificationRule());
	        }
       		set(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"ConstraintsSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleHierarchySpecification
entryRuleHierarchySpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHierarchySpecificationRule()); }
	 iv_ruleHierarchySpecification=ruleHierarchySpecification 
	 { $current=$iv_ruleHierarchySpecification.current; } 
	 EOF 
;

// Rule HierarchySpecification
ruleHierarchySpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='hierarchy=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHierarchySpecificationAccess().getHierarchyKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHierarchySpecificationAccess().getHierarchyHierarchyParserRuleCall_1_0_0()); 
	    }
		lv_hierarchy_1_0=ruleHierarchy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHierarchySpecificationRule());
	        }
       		set(
       			$current, 
       			"hierarchy",
        		lv_hierarchy_1_0, 
        		"Hierarchy");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getHierarchySpecificationAccess().getFeaturesHProductionParserRuleCall_1_1_0_0()); 
	    }
		lv_features_2_0=ruleHProduction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHierarchySpecificationRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_2_0, 
        		"HProduction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHierarchySpecificationAccess().getSemicolonKeyword_1_1_1());
    }
)+))
;





// Entry rule entryRuleHProduction
entryRuleHProduction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHProductionRule()); }
	 iv_ruleHProduction=ruleHProduction 
	 { $current=$iv_ruleHProduction.current; } 
	 EOF 
;

// Rule HProduction
ruleHProduction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHProductionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHProductionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHProductionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHProductionAccess().getFeaturesFT_IDParserRuleCall_2_0()); 
	    }
		lv_features_2_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHProductionRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_2_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleGroupsSpecification
entryRuleGroupsSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupsSpecificationRule()); }
	 iv_ruleGroupsSpecification=ruleGroupsSpecification 
	 { $current=$iv_ruleGroupsSpecification.current; } 
	 EOF 
;

// Rule GroupsSpecification
ruleGroupsSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='groups=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupsSpecificationAccess().getGroupsKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getGroupsSpecificationAccess().getGroupsGroupSpecParserRuleCall_1_0_0()); 
	    }
		lv_groups_1_0=ruleGroupSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupsSpecificationRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_1_0, 
        		"GroupSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupsSpecificationAccess().getSemicolonKeyword_1_1());
    }
)+)
;





// Entry rule entryRuleGroupSpec
entryRuleGroupSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupSpecRule()); }
	 iv_ruleGroupSpec=ruleGroupSpec 
	 { $current=$iv_ruleGroupSpec.current; } 
	 EOF 
;

// Rule GroupSpec
ruleGroupSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupSpecAccess().getXorGroupSpecParserRuleCall_0()); 
    }
    this_XorGroupSpec_0=ruleXorGroupSpec
    { 
        $current = $this_XorGroupSpec_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupSpecAccess().getMtxGroupSpecParserRuleCall_1()); 
    }
    this_MtxGroupSpec_1=ruleMtxGroupSpec
    { 
        $current = $this_MtxGroupSpec_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupSpecAccess().getOrGroupSpecParserRuleCall_2()); 
    }
    this_OrGroupSpec_2=ruleOrGroupSpec
    { 
        $current = $this_OrGroupSpec_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXorGroupSpec
entryRuleXorGroupSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorGroupSpecRule()); }
	 iv_ruleXorGroupSpec=ruleXorGroupSpec 
	 { $current=$iv_ruleXorGroupSpec.current; } 
	 EOF 
;

// Rule XorGroupSpec
ruleXorGroupSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='xorGroup' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXorGroupSpecAccess().getXorGroupKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getXorGroupSpecAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getXorGroupSpecAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXorGroupSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXorGroupSpecAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorGroupSpecAccess().getFeaturesFT_IDParserRuleCall_4_0()); 
	    }
		lv_features_4_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorGroupSpecRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_PAREN_5=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_5, grammarAccess.getXorGroupSpecAccess().getRIGHT_PARENTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleMtxGroupSpec
entryRuleMtxGroupSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMtxGroupSpecRule()); }
	 iv_ruleMtxGroupSpec=ruleMtxGroupSpec 
	 { $current=$iv_ruleMtxGroupSpec.current; } 
	 EOF 
;

// Rule MtxGroupSpec
ruleMtxGroupSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mtxGroup' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMtxGroupSpecAccess().getMtxGroupKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getMtxGroupSpecAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMtxGroupSpecAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMtxGroupSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMtxGroupSpecAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMtxGroupSpecAccess().getFeaturesFT_IDParserRuleCall_4_0()); 
	    }
		lv_features_4_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMtxGroupSpecRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_PAREN_5=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_5, grammarAccess.getMtxGroupSpecAccess().getRIGHT_PARENTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleOrGroupSpec
entryRuleOrGroupSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrGroupSpecRule()); }
	 iv_ruleOrGroupSpec=ruleOrGroupSpec 
	 { $current=$iv_ruleOrGroupSpec.current; } 
	 EOF 
;

// Rule OrGroupSpec
ruleOrGroupSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='orGroup' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrGroupSpecAccess().getOrGroupKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getOrGroupSpecAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getOrGroupSpecAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrGroupSpecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOrGroupSpecAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrGroupSpecAccess().getFeaturesFT_IDParserRuleCall_4_0()); 
	    }
		lv_features_4_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrGroupSpecRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_4_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_PAREN_5=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_5, grammarAccess.getOrGroupSpecAccess().getRIGHT_PARENTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleConstraintsSpecification
entryRuleConstraintsSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintsSpecificationRule()); }
	 iv_ruleConstraintsSpecification=ruleConstraintsSpecification 
	 { $current=$iv_ruleConstraintsSpecification.current; } 
	 EOF 
;

// Rule ConstraintsSpecification
ruleConstraintsSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constraints=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstraintsSpecificationAccess().getConstraintsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintsSpecificationAccess().getCstsConstraintExprParserRuleCall_1_0()); 
	    }
		lv_csts_1_0=ruleConstraintExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintsSpecificationRule());
	        }
       		set(
       			$current, 
       			"csts",
        		lv_csts_1_0, 
        		"ConstraintExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSlice
entryRuleSlice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSliceRule()); }
	 iv_ruleSlice=ruleSlice 
	 { $current=$iv_ruleSlice.current; } 
	 EOF 
;

// Rule Slice
ruleSlice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='slice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSliceAccess().getSliceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSliceAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSliceRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSliceAccess().getModeSliceModeEnumRuleCall_2_0()); 
	    }
		lv_mode_2_0=ruleSliceMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSliceRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_2_0, 
        		"SliceMode");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSliceAccess().getFtsSetCommandParserRuleCall_3_0()); 
	    }
		lv_fts_3_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSliceRule());
	        }
       		set(
       			$current, 
       			"fts",
        		lv_fts_3_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAggregate
entryRuleAggregate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAggregateRule()); }
	 iv_ruleAggregate=ruleAggregate 
	 { $current=$iv_ruleAggregate.current; } 
	 EOF 
;

// Rule Aggregate
ruleAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='aggregate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAggregateAccess().getAggregateKeyword_0());
    }
(
(
		lv_renamings_1_0=	'--renamings' 
    {
        newLeafNode(lv_renamings_1_0, grammarAccess.getAggregateAccess().getRenamingsRenamingsKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAggregateRule());
	        }
       		setWithLastConsumed($current, "renamings", true, "--renamings");
	    }

)
)?((this_LEFT_BRACKET_2=RULE_LEFT_BRACKET
    { 
    newLeafNode(this_LEFT_BRACKET_2, grammarAccess.getAggregateAccess().getLEFT_BRACKETTerminalRuleCall_2_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getFmsFMCommandParserRuleCall_2_0_1_0()); 
	    }
		lv_fms_3_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		add(
       			$current, 
       			"fms",
        		lv_fms_3_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_RIGHT_BRACKET_4=RULE_RIGHT_BRACKET
    { 
    newLeafNode(this_RIGHT_BRACKET_4, grammarAccess.getAggregateAccess().getRIGHT_BRACKETTerminalRuleCall_2_0_2()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getSfmsIdentifierExprParserRuleCall_2_1_0()); 
	    }
		lv_sfms_5_0=ruleIdentifierExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		set(
       			$current, 
       			"sfms",
        		lv_sfms_5_0, 
        		"IdentifierExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_6='withMapping' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAggregateAccess().getWithMappingKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getMappingSetCommandParserRuleCall_3_1_0()); 
	    }
		lv_mapping_7_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		set(
       			$current, 
       			"mapping",
        		lv_mapping_7_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFeatureModelOperation
entryRuleFeatureModelOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureModelOperationRule()); }
	 iv_ruleFeatureModelOperation=ruleFeatureModelOperation 
	 { $current=$iv_ruleFeatureModelOperation.current; } 
	 EOF 
;

// Rule FeatureModelOperation
ruleFeatureModelOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFeatureModelOperationAccess().getInsertParserRuleCall_0()); 
    }
    this_Insert_0=ruleInsert
    { 
        $current = $this_Insert_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFeatureModelOperationAccess().getEditOperationParserRuleCall_1()); 
    }
    this_EditOperation_1=ruleEditOperation
    { 
        $current = $this_EditOperation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFeatureModelOperationAccess().getExtractParserRuleCall_2()); 
    }
    this_Extract_2=ruleExtract
    { 
        $current = $this_Extract_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEditOperation
entryRuleEditOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEditOperationRule()); }
	 iv_ruleEditOperation=ruleEditOperation 
	 { $current=$iv_ruleEditOperation.current; } 
	 EOF 
;

// Rule EditOperation
ruleEditOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEditOperationAccess().getRemoveFeatureParserRuleCall_0()); 
    }
    this_RemoveFeature_0=ruleRemoveFeature
    { 
        $current = $this_RemoveFeature_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEditOperationAccess().getRenameFeatureParserRuleCall_1()); 
    }
    this_RenameFeature_1=ruleRenameFeature
    { 
        $current = $this_RenameFeature_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	 iv_ruleInsert=ruleInsert 
	 { $current=$iv_ruleInsert.current; } 
	 EOF 
;

// Rule Insert
ruleInsert returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='insert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getInsertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertAccess().getAspectfmFMCommandParserRuleCall_1_0()); 
	    }
		lv_aspectfm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertRule());
	        }
       		set(
       			$current, 
       			"aspectfm",
        		lv_aspectfm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='into' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInsertAccess().getIntoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertAccess().getBaseftFTCommandParserRuleCall_3_0()); 
	    }
		lv_baseft_3_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertRule());
	        }
       		set(
       			$current, 
       			"baseft",
        		lv_baseft_3_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInsertAccess().getWithKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsertAccess().getOpVariabilityOpCommandParserRuleCall_5_0()); 
	    }
		lv_op_5_0=ruleVariabilityOpCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsertRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"VariabilityOpCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRemoveFeature
entryRuleRemoveFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRemoveFeatureRule()); }
	 iv_ruleRemoveFeature=ruleRemoveFeature 
	 { $current=$iv_ruleRemoveFeature.current; } 
	 EOF 
;

// Rule RemoveFeature
ruleRemoveFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='removeFeature' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRemoveFeatureAccess().getRemoveFeatureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRemoveFeatureAccess().getFeatureFTCommandParserRuleCall_1_0()); 
	    }
		lv_feature_1_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRemoveFeatureRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRenameFeature
entryRuleRenameFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRenameFeatureRule()); }
	 iv_ruleRenameFeature=ruleRenameFeature 
	 { $current=$iv_ruleRenameFeature.current; } 
	 EOF 
;

// Rule RenameFeature
ruleRenameFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='renameFeature' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRenameFeatureAccess().getRenameFeatureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenameFeatureAccess().getFeatureFTCommandParserRuleCall_1_0()); 
	    }
		lv_feature_1_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenameFeatureRule());
	        }
       		set(
       			$current, 
       			"feature",
        		lv_feature_1_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRenameFeatureAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenameFeatureAccess().getFeatureNewStrCommandParserRuleCall_3_0()); 
	    }
		lv_featureNew_3_0=ruleStrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenameFeatureRule());
	        }
       		set(
       			$current, 
       			"featureNew",
        		lv_featureNew_3_0, 
        		"StrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExtract
entryRuleExtract returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtractRule()); }
	 iv_ruleExtract=ruleExtract 
	 { $current=$iv_ruleExtract.current; } 
	 EOF 
;

// Rule Extract
ruleExtract returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extract' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtractAccess().getExtractKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtractAccess().getRootfeatureFTCommandParserRuleCall_1_0()); 
	    }
		lv_rootfeature_1_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtractRule());
	        }
       		set(
       			$current, 
       			"rootfeature",
        		lv_rootfeature_1_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	 iv_ruleAssertion=ruleAssertion 
	 { $current=$iv_ruleAssertion.current; } 
	 EOF 
;

// Rule Assertion
ruleAssertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssertionAccess().getAssertKeyword_0());
    }
this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getAssertionAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionAccess().getAssertionComplexCommandParserRuleCall_2_0()); 
	    }
		lv_assertion_2_0=ruleComplexCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionRule());
	        }
       		set(
       			$current, 
       			"assertion",
        		lv_assertion_2_0, 
        		"ComplexCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getAssertionAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleVariableNull
entryRuleVariableNull returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableNullRule()); }
	 iv_ruleVariableNull=ruleVariableNull 
	 { $current=$iv_ruleVariableNull.current; } 
	 EOF 
;

// Rule VariableNull
ruleVariableNull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isNull' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableNullAccess().getIsNullKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableNullAccess().getVarFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableNullRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	 iv_ruleExport=ruleExport 
	 { $current=$iv_ruleExport.current; } 
	 EOF 
;

// Rule Export
ruleExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='export' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExportAccess().getExportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getArgLVidentifierParserRuleCall_1_0()); 
	    }
		lv_arg_1_0=ruleLVidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_1_0, 
        		"LVidentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHidden
entryRuleHidden returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHiddenRule()); }
	 iv_ruleHidden=ruleHidden 
	 { $current=$iv_ruleHidden.current; } 
	 EOF 
;

// Rule Hidden
ruleHidden returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='hide' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHiddenAccess().getHideKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHiddenAccess().getArgLVidentifierParserRuleCall_1_0()); 
	    }
		lv_arg_1_0=ruleLVidentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHiddenRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_1_0, 
        		"LVidentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLVidentifier
entryRuleLVidentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLVidentifierRule()); }
	 iv_ruleLVidentifier=ruleLVidentifier 
	 { $current=$iv_ruleLVidentifier.current; } 
	 EOF 
;

// Rule LVidentifier
ruleLVidentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLVidentifierAccess().getArgsFML_IDENTIFIERParserRuleCall_0_0()); 
	    }
		lv_args_0_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLVidentifierRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_0_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getLVidentifierAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLVidentifierAccess().getArgsFML_IDENTIFIERParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLVidentifierRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;







// Entry rule entryRuleConfigurationCmd
entryRuleConfigurationCmd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationCmdRule()); }
	 iv_ruleConfigurationCmd=ruleConfigurationCmd 
	 { $current=$iv_ruleConfigurationCmd.current; } 
	 EOF 
;

// Rule ConfigurationCmd
ruleConfigurationCmd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getCreateConfigurationParserRuleCall_0()); 
    }
    this_CreateConfiguration_0=ruleCreateConfiguration
    { 
        $current = $this_CreateConfiguration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getCompleteConfigurationParserRuleCall_1()); 
    }
    this_CompleteConfiguration_1=ruleCompleteConfiguration
    { 
        $current = $this_CompleteConfiguration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getSelectionFeatureParserRuleCall_2()); 
    }
    this_SelectionFeature_2=ruleSelectionFeature
    { 
        $current = $this_SelectionFeature_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getAutoConfigurationParserRuleCall_3()); 
    }
    this_AutoConfiguration_3=ruleAutoConfiguration
    { 
        $current = $this_AutoConfiguration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getSelectedConfigurationParserRuleCall_4()); 
    }
    this_SelectedConfiguration_4=ruleSelectedConfiguration
    { 
        $current = $this_SelectedConfiguration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getDeselectedConfigurationParserRuleCall_5()); 
    }
    this_DeselectedConfiguration_5=ruleDeselectedConfiguration
    { 
        $current = $this_DeselectedConfiguration_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationCmdAccess().getUnselectedConfigurationParserRuleCall_6()); 
    }
    this_UnselectedConfiguration_6=ruleUnselectedConfiguration
    { 
        $current = $this_UnselectedConfiguration_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCreateConfiguration
entryRuleCreateConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreateConfigurationRule()); }
	 iv_ruleCreateConfiguration=ruleCreateConfiguration 
	 { $current=$iv_ruleCreateConfiguration.current; } 
	 EOF 
;

// Rule CreateConfiguration
ruleCreateConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='configuration' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCreateConfigurationAccess().getConfigurationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreateConfigurationAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreateConfigurationRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompleteConfiguration
entryRuleCompleteConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompleteConfigurationRule()); }
	 iv_ruleCompleteConfiguration=ruleCompleteConfiguration 
	 { $current=$iv_ruleCompleteConfiguration.current; } 
	 EOF 
;

// Rule CompleteConfiguration
ruleCompleteConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isComplete' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompleteConfigurationAccess().getIsCompleteKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompleteConfigurationAccess().getConfigConfigurationCommandParserRuleCall_1_0()); 
	    }
		lv_config_1_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompleteConfigurationRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_1_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectionFeature
entryRuleSelectionFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionFeatureRule()); }
	 iv_ruleSelectionFeature=ruleSelectionFeature 
	 { $current=$iv_ruleSelectionFeature.current; } 
	 EOF 
;

// Rule SelectionFeature
ruleSelectionFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'select' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getSelectionFeatureAccess().getOpSelectKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionFeatureRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'deselect' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getSelectionFeatureAccess().getOpDeselectKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionFeatureRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

    |		lv_op_0_3=	'unselect' 
    {
        newLeafNode(lv_op_0_3, grammarAccess.getSelectionFeatureAccess().getOpUnselectKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectionFeatureRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionFeatureAccess().getFtsFeatureExpressionParserRuleCall_1_0()); 
	    }
		lv_fts_1_0=ruleFeatureExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionFeatureRule());
	        }
       		add(
       			$current, 
       			"fts",
        		lv_fts_1_0, 
        		"FeatureExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectionFeatureAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionFeatureAccess().getConfigConfigurationCommandParserRuleCall_3_0()); 
	    }
		lv_config_3_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionFeatureRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_3_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeatureExpression
entryRuleFeatureExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureExpressionRule()); }
	 iv_ruleFeatureExpression=ruleFeatureExpression 
	 { $current=$iv_ruleFeatureExpression.current; } 
	 EOF 
;

// Rule FeatureExpression
ruleFeatureExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureExpressionAccess().getFtIdentifierExprParserRuleCall_0_0()); 
	    }
		lv_ft_0_0=ruleIdentifierExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureExpressionRule());
	        }
       		set(
       			$current, 
       			"ft",
        		lv_ft_0_0, 
        		"IdentifierExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureExpressionAccess().getFtStringExprParserRuleCall_1_0()); 
	    }
		lv_ft_1_0=ruleStringExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureExpressionRule());
	        }
       		set(
       			$current, 
       			"ft",
        		lv_ft_1_0, 
        		"StringExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAutoConfiguration
entryRuleAutoConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAutoConfigurationRule()); }
	 iv_ruleAutoConfiguration=ruleAutoConfiguration 
	 { $current=$iv_ruleAutoConfiguration.current; } 
	 EOF 
;

// Rule AutoConfiguration
ruleAutoConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='autoSelect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAutoConfigurationAccess().getAutoSelectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAutoConfigurationAccess().getConfigConfigurationCommandParserRuleCall_1_0()); 
	    }
		lv_config_1_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAutoConfigurationRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_1_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAutoConfigurationAccess().getModeAutoConfModeEnumRuleCall_2_0()); 
	    }
		lv_mode_2_0=ruleAutoConfMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAutoConfigurationRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_2_0, 
        		"AutoConfMode");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleSelectedConfiguration
entryRuleSelectedConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectedConfigurationRule()); }
	 iv_ruleSelectedConfiguration=ruleSelectedConfiguration 
	 { $current=$iv_ruleSelectedConfiguration.current; } 
	 EOF 
;

// Rule SelectedConfiguration
ruleSelectedConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='selectedF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectedConfigurationAccess().getSelectedFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedConfigurationAccess().getConfigConfigurationCommandParserRuleCall_1_0()); 
	    }
		lv_config_1_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedConfigurationRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_1_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeselectedConfiguration
entryRuleDeselectedConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeselectedConfigurationRule()); }
	 iv_ruleDeselectedConfiguration=ruleDeselectedConfiguration 
	 { $current=$iv_ruleDeselectedConfiguration.current; } 
	 EOF 
;

// Rule DeselectedConfiguration
ruleDeselectedConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='deselectedF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeselectedConfigurationAccess().getDeselectedFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeselectedConfigurationAccess().getConfigConfigurationCommandParserRuleCall_1_0()); 
	    }
		lv_config_1_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeselectedConfigurationRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_1_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnselectedConfiguration
entryRuleUnselectedConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnselectedConfigurationRule()); }
	 iv_ruleUnselectedConfiguration=ruleUnselectedConfiguration 
	 { $current=$iv_ruleUnselectedConfiguration.current; } 
	 EOF 
;

// Rule UnselectedConfiguration
ruleUnselectedConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unselectedF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnselectedConfigurationAccess().getUnselectedFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnselectedConfigurationAccess().getConfigConfigurationCommandParserRuleCall_1_0()); 
	    }
		lv_config_1_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnselectedConfigurationRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_1_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAsFM
entryRuleAsFM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAsFMRule()); }
	 iv_ruleAsFM=ruleAsFM 
	 { $current=$iv_ruleAsFM.current; } 
	 EOF 
;

// Rule AsFM
ruleAsFM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='asFM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAsFMAccess().getAsFMKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAsFMAccess().getConfConfigurationCommandParserRuleCall_1_0()); 
	    }
		lv_conf_1_0=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAsFMRule());
	        }
       		set(
       			$current, 
       			"conf",
        		lv_conf_1_0, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMap
entryRuleMap returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapRule()); }
	 iv_ruleMap=ruleMap 
	 { $current=$iv_ruleMap.current; } 
	 EOF 
;

// Rule Map
ruleMap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='map' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapAccess().getMapKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMapAccess().getWithKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapAccess().getCstSetCommandParserRuleCall_3_0()); 
	    }
		lv_cst_3_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapRule());
	        }
       		set(
       			$current, 
       			"cst",
        		lv_cst_3_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnMap
entryRuleUnMap returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnMapRule()); }
	 iv_ruleUnMap=ruleUnMap 
	 { $current=$iv_ruleUnMap.current; } 
	 EOF 
;

// Rule UnMap
ruleUnMap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unmap' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnMapAccess().getUnmapKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnMapAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnMapRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCleanUp
entryRuleCleanUp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCleanUpRule()); }
	 iv_ruleCleanUp=ruleCleanUp 
	 { $current=$iv_ruleCleanUp.current; } 
	 EOF 
;

// Rule CleanUp
ruleCleanUp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cleanup' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCleanUpAccess().getCleanupKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCleanUpAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCleanUpRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCores
entryRuleCores returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoresRule()); }
	 iv_ruleCores=ruleCores 
	 { $current=$iv_ruleCores.current; } 
	 EOF 
;

// Rule Cores
ruleCores returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cores' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCoresAccess().getCoresKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoresAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoresRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeads
entryRuleDeads returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeadsRule()); }
	 iv_ruleDeads=ruleDeads 
	 { $current=$iv_ruleDeads.current; } 
	 EOF 
;

// Rule Deads
ruleDeads returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='deads' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDeadsAccess().getDeadsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeadsAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeadsRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullMandatorys
entryRuleFullMandatorys returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFullMandatorysRule()); }
	 iv_ruleFullMandatorys=ruleFullMandatorys 
	 { $current=$iv_ruleFullMandatorys.current; } 
	 EOF 
;

// Rule FullMandatorys
ruleFullMandatorys returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='fullMandatorys' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFullMandatorysAccess().getFullMandatorysKeyword_0_0());
    }

    |	otherlv_1='falseOptionals' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFullMandatorysAccess().getFalseOptionalsKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFullMandatorysAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_2_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullMandatorysRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_2_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCliques
entryRuleCliques returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCliquesRule()); }
	 iv_ruleCliques=ruleCliques 
	 { $current=$iv_ruleCliques.current; } 
	 EOF 
;

// Rule Cliques
ruleCliques returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='cliques' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCliquesAccess().getCliquesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCliquesAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCliquesRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleScriptDefinition
entryRuleScriptDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptDefinitionRule()); }
	 iv_ruleScriptDefinition=ruleScriptDefinition 
	 { $current=$iv_ruleScriptDefinition.current; } 
	 EOF 
;

// Rule ScriptDefinition
ruleScriptDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_HOOK_0=RULE_LEFT_HOOK
    { 
    newLeafNode(this_LEFT_HOOK_0, grammarAccess.getScriptDefinitionAccess().getLEFT_HOOKTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptDefinitionAccess().getParamsParameterParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptDefinitionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptDefinitionAccess().getCmdsScriptCommandParserRuleCall_2_0()); 
	    }
		lv_cmds_2_0=ruleScriptCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptDefinitionRule());
	        }
       		add(
       			$current, 
       			"cmds",
        		lv_cmds_2_0, 
        		"ScriptCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptDefinitionAccess().getExportsExportParserRuleCall_3_0_0()); 
	    }
		lv_exports_3_1=ruleExport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptDefinitionRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_3_1, 
        		"Export");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getScriptDefinitionAccess().getExportsHiddenParserRuleCall_3_0_1()); 
	    }
		lv_exports_3_2=ruleHidden		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptDefinitionRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_3_2, 
        		"Hidden");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*this_RIGHT_HOOK_4=RULE_RIGHT_HOOK
    { 
    newLeafNode(this_RIGHT_HOOK_4, grammarAccess.getScriptDefinitionAccess().getRIGHT_HOOKTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleShell
entryRuleShell returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShellRule()); }
	 iv_ruleShell=ruleShell 
	 { $current=$iv_ruleShell.current; } 
	 EOF 
;

// Rule Shell
ruleShell returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getShellAccess().getCmdExitParserRuleCall_0_0()); 
	    }
		lv_cmd_0_1=ruleExit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShellRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_0_1, 
        		"Exit");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getShellAccess().getCmdExistParserRuleCall_0_1()); 
	    }
		lv_cmd_0_2=ruleExist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShellRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_0_2, 
        		"Exist");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getShellAccess().getCmdListingParserRuleCall_0_2()); 
	    }
		lv_cmd_0_3=ruleListing		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShellRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_0_3, 
        		"Listing");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getShellAccess().getCmdIsConflictingParserRuleCall_0_3()); 
	    }
		lv_cmd_0_4=ruleIsConflicting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShellRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_0_4, 
        		"IsConflicting");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getShellAccess().getCmdStateParserRuleCall_0_4()); 
	    }
		lv_cmd_0_5=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShellRule());
	        }
       		set(
       			$current, 
       			"cmd",
        		lv_cmd_0_5, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitRule()); }
	 iv_ruleExit=ruleExit 
	 { $current=$iv_ruleExit.current; } 
	 EOF 
;

// Rule Exit
ruleExit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_val_0_1=	'quit' 
    {
        newLeafNode(lv_val_0_1, grammarAccess.getExitAccess().getValQuitKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_1, null);
	    }

    |		lv_val_0_2=	'exit' 
    {
        newLeafNode(lv_val_0_2, grammarAccess.getExitAccess().getValExitKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleExist
entryRuleExist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistRule()); }
	 iv_ruleExist=ruleExist 
	 { $current=$iv_ruleExist.current; } 
	 EOF 
;

// Rule Exist
ruleExist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_val_0_0=	'isExisting' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getExistAccess().getValIsExistingKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExistRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "isExisting");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExistAccess().getVarFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIsConflicting
entryRuleIsConflicting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIsConflictingRule()); }
	 iv_ruleIsConflicting=ruleIsConflicting 
	 { $current=$iv_ruleIsConflicting.current; } 
	 EOF 
;

// Rule IsConflicting
ruleIsConflicting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_val_0_0=	'isConflicting' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getIsConflictingAccess().getValIsConflictingKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIsConflictingRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "isConflicting");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIsConflictingAccess().getVarFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIsConflictingRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleListing
entryRuleListing returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListingRule()); }
	 iv_ruleListing=ruleListing 
	 { $current=$iv_ruleListing.current; } 
	 EOF 
;

// Rule Listing
ruleListing returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_val_0_1=	'ls' 
    {
        newLeafNode(lv_val_0_1, grammarAccess.getListingAccess().getValLsKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListingRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_1, null);
	    }

    |		lv_val_0_2=	'vars' 
    {
        newLeafNode(lv_val_0_2, grammarAccess.getListingAccess().getValVarsKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListingRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getListingAccess().getOptOPT_LISTINGEnumRuleCall_1_0()); 
	    }
		lv_opt_1_0=ruleOPT_LISTING		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListingRule());
	        }
       		set(
       			$current, 
       			"opt",
        		lv_opt_1_0, 
        		"OPT_LISTING");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_val_0_1=	'memory' 
    {
        newLeafNode(lv_val_0_1, grammarAccess.getStateAccess().getValMemoryKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_1, null);
	    }

    |		lv_val_0_2=	'cpu' 
    {
        newLeafNode(lv_val_0_2, grammarAccess.getStateAccess().getValCpuKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleCopyVariable
entryRuleCopyVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCopyVariableRule()); }
	 iv_ruleCopyVariable=ruleCopyVariable 
	 { $current=$iv_ruleCopyVariable.current; } 
	 EOF 
;

// Rule CopyVariable
ruleCopyVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='copy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCopyVariableAccess().getCopyKeyword_0_0());
    }

    |	otherlv_1='cp' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCopyVariableAccess().getCpKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCopyVariableAccess().getVidFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_vid_2_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCopyVariableRule());
	        }
       		set(
       			$current, 
       			"vid",
        		lv_vid_2_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRemoveVariable
entryRuleRemoveVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRemoveVariableRule()); }
	 iv_ruleRemoveVariable=ruleRemoveVariable 
	 { $current=$iv_ruleRemoveVariable.current; } 
	 EOF 
;

// Rule RemoveVariable
ruleRemoveVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='removeVariable' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRemoveVariableAccess().getRemoveVariableKeyword_0_0());
    }

    |	otherlv_1='rm' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRemoveVariableAccess().getRmKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRemoveVariableAccess().getVidFML_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_vid_2_0=ruleFML_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRemoveVariableRule());
	        }
       		set(
       			$current, 
       			"vid",
        		lv_vid_2_0, 
        		"FML_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConvert
entryRuleConvert returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConvertRule()); }
	 iv_ruleConvert=ruleConvert 
	 { $current=$iv_ruleConvert.current; } 
	 EOF 
;

// Rule Convert
ruleConvert returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='convert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConvertAccess().getConvertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConvertAccess().getVFMCommandParserRuleCall_1_0()); 
	    }
		lv_v_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConvertRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='into' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConvertAccess().getIntoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConvertAccess().getFormatFMFormatEnumRuleCall_3_0()); 
	    }
		lv_format_3_0=ruleFMFormat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConvertRule());
	        }
       		set(
       			$current, 
       			"format",
        		lv_format_3_0, 
        		"FMFormat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFMLSave
entryRuleFMLSave returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFMLSaveRule()); }
	 iv_ruleFMLSave=ruleFMLSave 
	 { $current=$iv_ruleFMLSave.current; } 
	 EOF 
;

// Rule FMLSave
ruleFMLSave returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='save' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFMLSaveAccess().getSaveKeyword_0_0());
    }

    |	otherlv_1='serialize' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFMLSaveAccess().getSerializeKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFMLSaveAccess().getVFMCommandParserRuleCall_1_0()); 
	    }
		lv_v_2_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMLSaveRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_2_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='into' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFMLSaveAccess().getIntoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFMLSaveAccess().getFormatFMFormatEnumRuleCall_3_0()); 
	    }
		lv_format_4_0=ruleFMFormat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMLSaveRule());
	        }
       		set(
       			$current, 
       			"format",
        		lv_format_4_0, 
        		"FMFormat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHierarchy
entryRuleHierarchy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHierarchyRule()); }
	 iv_ruleHierarchy=ruleHierarchy 
	 { $current=$iv_ruleHierarchy.current; } 
	 EOF 
;

// Rule Hierarchy
ruleHierarchy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='hierarchy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getHierarchyAccess().getHierarchyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHierarchyAccess().getFmFMCommandParserRuleCall_1_0()); 
	    }
		lv_fm_1_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHierarchyRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_1_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrinterUtility
entryRulePrinterUtility returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrinterUtilityRule()); }
	 iv_rulePrinterUtility=rulePrinterUtility 
	 { $current=$iv_rulePrinterUtility.current; } 
	 EOF 
;

// Rule PrinterUtility
rulePrinterUtility returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_op_0_1=	'print' 
    {
        newLeafNode(lv_op_0_1, grammarAccess.getPrinterUtilityAccess().getOpPrintKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrinterUtilityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_1, null);
	    }

    |		lv_op_0_2=	'println' 
    {
        newLeafNode(lv_op_0_2, grammarAccess.getPrinterUtilityAccess().getOpPrintlnKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrinterUtilityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrinterUtilityAccess().getArgLArgsParserRuleCall_1_0()); 
	    }
		lv_arg_1_0=ruleLArgs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrinterUtilityRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_1_0, 
        		"LArgs");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLArgs
entryRuleLArgs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLArgsRule()); }
	 iv_ruleLArgs=ruleLArgs 
	 { $current=$iv_ruleLArgs.current; } 
	 EOF 
;

// Rule LArgs
ruleLArgs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLArgsAccess().getArgsCommandParserRuleCall_0_0()); 
	    }
		lv_args_0_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLArgsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_0_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getLArgsAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLArgsAccess().getArgsCommandParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLArgsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Command");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGDisplay
entryRuleGDisplay returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGDisplayRule()); }
	 iv_ruleGDisplay=ruleGDisplay 
	 { $current=$iv_ruleGDisplay.current; } 
	 EOF 
;

// Rule GDisplay
ruleGDisplay returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_cmdDisplay_0_0=	'gdisplay' 
    {
        newLeafNode(lv_cmdDisplay_0_0, grammarAccess.getGDisplayAccess().getCmdDisplayGdisplayKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGDisplayRule());
	        }
       		setWithLastConsumed($current, "cmdDisplay", lv_cmdDisplay_0_0, "gdisplay");
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getGDisplayAccess().getVarFMCommandParserRuleCall_1_0_0()); 
	    }
		lv_var_1_1=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGDisplayRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_1, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGDisplayAccess().getVarConfigurationCommandParserRuleCall_1_0_1()); 
	    }
		lv_var_1_2=ruleConfigurationCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGDisplayRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_2, 
        		"ConfigurationCommand");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleGListing
entryRuleGListing returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGListingRule()); }
	 iv_ruleGListing=ruleGListing 
	 { $current=$iv_ruleGListing.current; } 
	 EOF 
;

// Rule GListing
ruleGListing returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_cmd_0_0=	'glisting' 
    {
        newLeafNode(lv_cmd_0_0, grammarAccess.getGListingAccess().getCmdGlistingKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGListingRule());
	        }
       		setWithLastConsumed($current, "cmd", lv_cmd_0_0, "glisting");
	    }

)
)
    |(	otherlv_1='gls' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGListingAccess().getGlsKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getGListingAccess().getGListingAction_1_1(),
            $current);
    }
)))
;





// Entry rule entryRuleModifyVOperator
entryRuleModifyVOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifyVOperatorRule()); }
	 iv_ruleModifyVOperator=ruleModifyVOperator 
	 { $current=$iv_ruleModifyVOperator.current; } 
	 EOF 
;

// Rule ModifyVOperator
ruleModifyVOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModifyVOperatorAccess().getMandatoryEditParserRuleCall_0()); 
    }
    this_MandatoryEdit_0=ruleMandatoryEdit
    { 
        $current = $this_MandatoryEdit_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModifyVOperatorAccess().getOptionalEditParserRuleCall_1()); 
    }
    this_OptionalEdit_1=ruleOptionalEdit
    { 
        $current = $this_OptionalEdit_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModifyVOperatorAccess().getAlternativeEditParserRuleCall_2()); 
    }
    this_AlternativeEdit_2=ruleAlternativeEdit
    { 
        $current = $this_AlternativeEdit_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModifyVOperatorAccess().getOrEditParserRuleCall_3()); 
    }
    this_OrEdit_3=ruleOrEdit
    { 
        $current = $this_OrEdit_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMandatoryEdit
entryRuleMandatoryEdit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMandatoryEditRule()); }
	 iv_ruleMandatoryEdit=ruleMandatoryEdit 
	 { $current=$iv_ruleMandatoryEdit.current; } 
	 EOF 
;

// Rule MandatoryEdit
ruleMandatoryEdit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='setMandatory' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMandatoryEditAccess().getSetMandatoryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMandatoryEditAccess().getFtFTCommandParserRuleCall_1_0()); 
	    }
		lv_ft_1_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMandatoryEditRule());
	        }
       		set(
       			$current, 
       			"ft",
        		lv_ft_1_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOptionalEdit
entryRuleOptionalEdit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalEditRule()); }
	 iv_ruleOptionalEdit=ruleOptionalEdit 
	 { $current=$iv_ruleOptionalEdit.current; } 
	 EOF 
;

// Rule OptionalEdit
ruleOptionalEdit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='setOptional' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalEditAccess().getSetOptionalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalEditAccess().getFtFTCommandParserRuleCall_1_0()); 
	    }
		lv_ft_1_0=ruleFTCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalEditRule());
	        }
       		set(
       			$current, 
       			"ft",
        		lv_ft_1_0, 
        		"FTCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAlternativeEdit
entryRuleAlternativeEdit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativeEditRule()); }
	 iv_ruleAlternativeEdit=ruleAlternativeEdit 
	 { $current=$iv_ruleAlternativeEdit.current; } 
	 EOF 
;

// Rule AlternativeEdit
ruleAlternativeEdit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='setAlternative' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativeEditAccess().getSetAlternativeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlternativeEditAccess().getFtsSetCommandParserRuleCall_1_0()); 
	    }
		lv_fts_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlternativeEditRule());
	        }
       		set(
       			$current, 
       			"fts",
        		lv_fts_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrEdit
entryRuleOrEdit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrEditRule()); }
	 iv_ruleOrEdit=ruleOrEdit 
	 { $current=$iv_ruleOrEdit.current; } 
	 EOF 
;

// Rule OrEdit
ruleOrEdit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='setOr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOrEditAccess().getSetOrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrEditAccess().getFtsSetCommandParserRuleCall_1_0()); 
	    }
		lv_fts_1_0=ruleSetCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrEditRule());
	        }
       		set(
       			$current, 
       			"fts",
        		lv_fts_1_0, 
        		"SetCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAddConstraint
entryRuleAddConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddConstraintRule()); }
	 iv_ruleAddConstraint=ruleAddConstraint 
	 { $current=$iv_ruleAddConstraint.current; } 
	 EOF 
;

// Rule AddConstraint
ruleAddConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='addConstraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAddConstraintAccess().getAddConstraintKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAddConstraintAccess().getCstConstraintCommandParserRuleCall_1_0()); 
	    }
		lv_cst_1_0=ruleConstraintCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddConstraintRule());
	        }
       		set(
       			$current, 
       			"cst",
        		lv_cst_1_0, 
        		"ConstraintCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAddConstraintAccess().getToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAddConstraintAccess().getFmFMCommandParserRuleCall_3_0()); 
	    }
		lv_fm_3_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddConstraintRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_3_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRemoveConstraint
entryRuleRemoveConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRemoveConstraintRule()); }
	 iv_ruleRemoveConstraint=ruleRemoveConstraint 
	 { $current=$iv_ruleRemoveConstraint.current; } 
	 EOF 
;

// Rule RemoveConstraint
ruleRemoveConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='removeConstraint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRemoveConstraintAccess().getRemoveConstraintKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRemoveConstraintAccess().getCstConstraintCommandParserRuleCall_1_0()); 
	    }
		lv_cst_1_0=ruleConstraintCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRemoveConstraintRule());
	        }
       		set(
       			$current, 
       			"cst",
        		lv_cst_1_0, 
        		"ConstraintCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRemoveConstraintAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRemoveConstraintAccess().getFmFMCommandParserRuleCall_3_0()); 
	    }
		lv_fm_3_0=ruleFMCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRemoveConstraintRule());
	        }
       		set(
       			$current, 
       			"fm",
        		lv_fm_3_0, 
        		"FMCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCNF
entryRuleCNF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCNFRule()); }
	 iv_ruleCNF=ruleCNF 
	 { $current=$iv_ruleCNF.current; } 
	 EOF 
;

// Rule CNF
ruleCNF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCNFAccess().getOr_exprParserRuleCall()); 
    }
    this_Or_expr_0=ruleOr_expr
    { 
        $current = $this_Or_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOr_expr
entryRuleOr_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOr_exprRule()); }
	 iv_ruleOr_expr=ruleOr_expr 
	 { $current=$iv_ruleOr_expr.current; } 
	 EOF 
;

// Rule Or_expr
ruleOr_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOr_exprAccess().getAnd_exprParserRuleCall_0()); 
    }
    this_And_expr_0=ruleAnd_expr
    { 
        $current = $this_And_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOr_exprAccess().getOr_exprLeftAction_1_0(),
            $current);
    }
)this_B_OR_2=RULE_B_OR
    { 
    newLeafNode(this_B_OR_2, grammarAccess.getOr_exprAccess().getB_ORTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOr_exprAccess().getRightAnd_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOr_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd_expr
entryRuleAnd_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnd_exprRule()); }
	 iv_ruleAnd_expr=ruleAnd_expr 
	 { $current=$iv_ruleAnd_expr.current; } 
	 EOF 
;

// Rule And_expr
ruleAnd_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnd_exprAccess().getImpl_exprParserRuleCall_0()); 
    }
    this_Impl_expr_0=ruleImpl_expr
    { 
        $current = $this_Impl_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAnd_exprAccess().getAnd_exprLeftAction_1_0(),
            $current);
    }
)this_B_AND_2=RULE_B_AND
    { 
    newLeafNode(this_B_AND_2, grammarAccess.getAnd_exprAccess().getB_ANDTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnd_exprAccess().getRightImpl_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleImpl_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnd_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Impl_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImpl_expr
entryRuleImpl_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpl_exprRule()); }
	 iv_ruleImpl_expr=ruleImpl_expr 
	 { $current=$iv_ruleImpl_expr.current; } 
	 EOF 
;

// Rule Impl_expr
ruleImpl_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getImpl_exprAccess().getBiimpl_exprParserRuleCall_0()); 
    }
    this_Biimpl_expr_0=ruleBiimpl_expr
    { 
        $current = $this_Biimpl_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpl_exprAccess().getImpl_exprLeftAction_1_0(),
            $current);
    }
)this_B_IMPLY_2=RULE_B_IMPLY
    { 
    newLeafNode(this_B_IMPLY_2, grammarAccess.getImpl_exprAccess().getB_IMPLYTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImpl_exprAccess().getRightBiimpl_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBiimpl_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpl_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Biimpl_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBiimpl_expr
entryRuleBiimpl_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBiimpl_exprRule()); }
	 iv_ruleBiimpl_expr=ruleBiimpl_expr 
	 { $current=$iv_ruleBiimpl_expr.current; } 
	 EOF 
;

// Rule Biimpl_expr
ruleBiimpl_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBiimpl_exprAccess().getUnary_exprParserRuleCall_0()); 
    }
    this_Unary_expr_0=ruleUnary_expr
    { 
        $current = $this_Unary_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBiimpl_exprAccess().getBiimpl_exprLeftAction_1_0(),
            $current);
    }
)this_B_BIMPLY_2=RULE_B_BIMPLY
    { 
    newLeafNode(this_B_BIMPLY_2, grammarAccess.getBiimpl_exprAccess().getB_BIMPLYTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBiimpl_exprAccess().getRightUnary_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUnary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBiimpl_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Unary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnary_expr
entryRuleUnary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_exprRule()); }
	 iv_ruleUnary_expr=ruleUnary_expr 
	 { $current=$iv_ruleUnary_expr.current; } 
	 EOF 
;

// Rule Unary_expr
ruleUnary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getNeg_exprParserRuleCall_0()); 
    }
    this_Neg_expr_0=ruleNeg_expr
    { 
        $current = $this_Neg_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getPrimary_exprParserRuleCall_1()); 
    }
    this_Primary_expr_1=rulePrimary_expr
    { 
        $current = $this_Primary_expr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNeg_expr
entryRuleNeg_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNeg_exprRule()); }
	 iv_ruleNeg_expr=ruleNeg_expr 
	 { $current=$iv_ruleNeg_expr.current; } 
	 EOF 
;

// Rule Neg_expr
ruleNeg_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_B_NOT_0=RULE_B_NOT
    { 
    newLeafNode(this_B_NOT_0, grammarAccess.getNeg_exprAccess().getB_NOTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNeg_exprAccess().getExprPrimary_exprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=rulePrimary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNeg_exprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Primary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimary_expr
entryRulePrimary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_exprRule()); }
	 iv_rulePrimary_expr=rulePrimary_expr 
	 { $current=$iv_rulePrimary_expr.current; } 
	 EOF 
;

// Rule Primary_expr
rulePrimary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getPrimary_exprAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_exprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=	'true' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getPrimary_exprAccess().getNameTrueKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_exprRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

    |		lv_name_0_3=	'false' 
    {
        newLeafNode(lv_name_0_3, grammarAccess.getPrimary_exprAccess().getNameFalseKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_exprRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_3, null);
	    }

)

)
)
    |(this_LEFT_PAREN_1=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_1, grammarAccess.getPrimary_exprAccess().getLEFT_PARENTerminalRuleCall_1_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getOr_exprParserRuleCall_1_1()); 
    }
    this_Or_expr_2=ruleOr_expr
    { 
        $current = $this_Or_expr_2.current; 
        afterParserOrEnumRuleCall();
    }
this_RIGHT_PAREN_3=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_3, grammarAccess.getPrimary_exprAccess().getRIGHT_PARENTerminalRuleCall_1_2()); 
    }
))
;





// Entry rule entryRuleFeatureModel
entryRuleFeatureModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureModelRule()); }
	 iv_ruleFeatureModel=ruleFeatureModel 
	 { $current=$iv_ruleFeatureModel.current; } 
	 EOF 
;

// Rule FeatureModel
ruleFeatureModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='FM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFeatureModelAccess().getFMKeyword_0_0());
    }

    |	otherlv_1='featuremodel' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeatureModelAccess().getFeaturemodelKeyword_0_1());
    }
)this_LEFT_PAREN_2=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_2, grammarAccess.getFeatureModelAccess().getLEFT_PARENTerminalRuleCall_1()); 
    }
((((
(
		lv_root_3_0=RULE_ID
		{
			newLeafNode(lv_root_3_0, grammarAccess.getFeatureModelAccess().getRootIDTerminalRuleCall_2_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"root",
        		lv_root_3_0, 
        		"ID");
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFeatureModelAccess().getSemicolonKeyword_2_0_0_1());
    }
)
    |(((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureModelAccess().getFeaturesProductionParserRuleCall_2_0_1_0_0_0()); 
	    }
		lv_features_5_0=ruleProduction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureModelRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_5_0, 
        		"Production");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFeatureModelAccess().getSemicolonKeyword_2_0_1_0_1());
    }
)+((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureModelAccess().getExprCNFParserRuleCall_2_0_1_1_0_0()); 
	    }
		lv_expr_7_0=ruleCNF		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureModelRule());
	        }
       		add(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"CNF");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFeatureModelAccess().getSemicolonKeyword_2_0_1_1_1());
    }
)*))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureModelAccess().getFileStringExprParserRuleCall_2_1_0()); 
	    }
		lv_file_9_0=ruleStringExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureModelRule());
	        }
       		set(
       			$current, 
       			"file",
        		lv_file_9_0, 
        		"StringExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))this_RIGHT_PAREN_10=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_10, grammarAccess.getFeatureModelAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleProduction
entryRuleProduction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductionRule()); }
	 iv_ruleProduction=ruleProduction 
	 { $current=$iv_ruleProduction.current; } 
	 EOF 
;

// Rule Production
ruleProduction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getProductionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProductionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductionAccess().getFeaturesChildParserRuleCall_2_0()); 
	    }
		lv_features_2_0=ruleChild		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductionRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_2_0, 
        		"Child");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleChild
entryRuleChild returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChildRule()); }
	 iv_ruleChild=ruleChild 
	 { $current=$iv_ruleChild.current; } 
	 EOF 
;

// Rule Child
ruleChild returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChildAccess().getMandatoryParserRuleCall_0()); 
    }
    this_Mandatory_0=ruleMandatory
    { 
        $current = $this_Mandatory_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChildAccess().getOptionalParserRuleCall_1()); 
    }
    this_Optional_1=ruleOptional
    { 
        $current = $this_Optional_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChildAccess().getXorgroupParserRuleCall_2()); 
    }
    this_Xorgroup_2=ruleXorgroup
    { 
        $current = $this_Xorgroup_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChildAccess().getOrgroupParserRuleCall_3()); 
    }
    this_Orgroup_3=ruleOrgroup
    { 
        $current = $this_Orgroup_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChildAccess().getMutexgroupParserRuleCall_4()); 
    }
    this_Mutexgroup_4=ruleMutexgroup
    { 
        $current = $this_Mutexgroup_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMandatory
entryRuleMandatory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMandatoryRule()); }
	 iv_ruleMandatory=ruleMandatory 
	 { $current=$iv_ruleMandatory.current; } 
	 EOF 
;

// Rule Mandatory
ruleMandatory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getMandatoryAccess().getNameFT_IDParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMandatoryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOptional
entryRuleOptional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalRule()); }
	 iv_ruleOptional=ruleOptional 
	 { $current=$iv_ruleOptional.current; } 
	 EOF 
;

// Rule Optional
ruleOptional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_HOOK_0=RULE_LEFT_HOOK
    { 
    newLeafNode(this_LEFT_HOOK_0, grammarAccess.getOptionalAccess().getLEFT_HOOKTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOptionalAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)this_RIGHT_HOOK_2=RULE_RIGHT_HOOK
    { 
    newLeafNode(this_RIGHT_HOOK_2, grammarAccess.getOptionalAccess().getRIGHT_HOOKTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleXorgroup
entryRuleXorgroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorgroupRule()); }
	 iv_ruleXorgroup=ruleXorgroup 
	 { $current=$iv_ruleXorgroup.current; } 
	 EOF 
;

// Rule Xorgroup
ruleXorgroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_PAREN_0=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_0, grammarAccess.getXorgroupAccess().getLEFT_PARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorgroupAccess().getFeaturesFT_IDParserRuleCall_1_0()); 
	    }
		lv_features_1_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorgroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_1_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_B_OR_2=RULE_B_OR
    { 
    newLeafNode(this_B_OR_2, grammarAccess.getXorgroupAccess().getB_ORTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXorgroupAccess().getFeaturesFT_IDParserRuleCall_2_1_0()); 
	    }
		lv_features_3_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorgroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
))+this_RIGHT_PAREN_4=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_4, grammarAccess.getXorgroupAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleOrgroup
entryRuleOrgroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrgroupRule()); }
	 iv_ruleOrgroup=ruleOrgroup 
	 { $current=$iv_ruleOrgroup.current; } 
	 EOF 
;

// Rule Orgroup
ruleOrgroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_PAREN_0=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_0, grammarAccess.getOrgroupAccess().getLEFT_PARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrgroupAccess().getFeaturesFT_IDParserRuleCall_1_0()); 
	    }
		lv_features_1_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrgroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_1_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_B_OR_2=RULE_B_OR
    { 
    newLeafNode(this_B_OR_2, grammarAccess.getOrgroupAccess().getB_ORTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrgroupAccess().getFeaturesFT_IDParserRuleCall_2_1_0()); 
	    }
		lv_features_3_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrgroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
))+this_RIGHT_PAREN_4=RULE_RIGHT_PAREN
    { 
    newLeafNode(this_RIGHT_PAREN_4, grammarAccess.getOrgroupAccess().getRIGHT_PARENTerminalRuleCall_3()); 
    }
this_PLUS_5=RULE_PLUS
    { 
    newLeafNode(this_PLUS_5, grammarAccess.getOrgroupAccess().getPLUSTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleMutexgroup
entryRuleMutexgroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMutexgroupRule()); }
	 iv_ruleMutexgroup=ruleMutexgroup 
	 { $current=$iv_ruleMutexgroup.current; } 
	 EOF 
;

// Rule Mutexgroup
ruleMutexgroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LEFT_PAREN_0=RULE_LEFT_PAREN
    { 
    newLeafNode(this_LEFT_PAREN_0, grammarAccess.getMutexgroupAccess().getLEFT_PARENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutexgroupAccess().getFeaturesFT_IDParserRuleCall_1_0()); 
	    }
		lv_features_1_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutexgroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_1_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_B_OR_2=RULE_B_OR
    { 
    newLeafNode(this_B_OR_2, grammarAccess.getMutexgroupAccess().getB_ORTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutexgroupAccess().getFeaturesFT_IDParserRuleCall_2_1_0()); 
	    }
		lv_features_3_0=ruleFT_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutexgroupRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_3_0, 
        		"FT_ID");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_4=')?' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMutexgroupAccess().getRightParenthesisQuestionMarkKeyword_3());
    }
)
;





// Entry rule entryRuleFT_ID
entryRuleFT_ID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFT_IDRule()); } 
	 iv_ruleFT_ID=ruleFT_ID 
	 { $current=$iv_ruleFT_ID.current.getText(); }  
	 EOF 
;

// Rule FT_ID
ruleFT_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFT_IDAccess().getIDTerminalRuleCall_0_0()); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFT_IDAccess().getDollarSignKeyword_0_1()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFT_IDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getFT_IDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleFML_IDENTIFIER
entryRuleFML_IDENTIFIER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFML_IDENTIFIERRule()); } 
	 iv_ruleFML_IDENTIFIER=ruleFML_IDENTIFIER 
	 { $current=$iv_ruleFML_IDENTIFIER.current.getText(); }  
	 EOF 
;

// Rule FML_IDENTIFIER
ruleFML_IDENTIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFML_IDENTIFIERAccess().getIDTerminalRuleCall_0_0_0()); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFML_IDENTIFIERAccess().getDollarSignKeyword_0_0_1()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFML_IDENTIFIERAccess().getFullStopKeyword_0_1_0()); 
    }
(    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getFML_IDENTIFIERAccess().getIDTerminalRuleCall_0_1_1_0()); 
    }

    |
	kw='$' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFML_IDENTIFIERAccess().getDollarSignKeyword_0_1_1_1()); 
    }

    |    this_STAR_5=RULE_STAR    {
		$current.merge(this_STAR_5);
    }

    { 
    newLeafNode(this_STAR_5, grammarAccess.getFML_IDENTIFIERAccess().getSTARTerminalRuleCall_0_1_1_2()); 
    }
))*)
    |(    this_ID_6=RULE_ID    {
		$current.merge(this_ID_6);
    }

    { 
    newLeafNode(this_ID_6, grammarAccess.getFML_IDENTIFIERAccess().getIDTerminalRuleCall_1_0()); 
    }
    this_STAR_7=RULE_STAR    {
		$current.merge(this_STAR_7);
    }

    { 
    newLeafNode(this_STAR_7, grammarAccess.getFML_IDENTIFIERAccess().getSTARTerminalRuleCall_1_1()); 
    }
))
    ;







// Rule FeatureEdgeKind
ruleFeatureEdgeKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='mand' 
	{
        $current = grammarAccess.getFeatureEdgeKindAccess().getMANDATORYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFeatureEdgeKindAccess().getMANDATORYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='opt' 
	{
        $current = grammarAccess.getFeatureEdgeKindAccess().getOPTIONALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFeatureEdgeKindAccess().getOPTIONALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Xor' 
	{
        $current = grammarAccess.getFeatureEdgeKindAccess().getALTERNATIVEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFeatureEdgeKindAccess().getALTERNATIVEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Or' 
	{
        $current = grammarAccess.getFeatureEdgeKindAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFeatureEdgeKindAccess().getOREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Mutex' 
	{
        $current = grammarAccess.getFeatureEdgeKindAccess().getMUTEXEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFeatureEdgeKindAccess().getMUTEXEnumLiteralDeclaration_4()); 
    }
));



// Rule KindOfGet
ruleKindOfGet returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='getImpliesHierarchy' 
	{
        $current = grammarAccess.getKindOfGetAccess().getHIERARCHY_IMPLIESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getKindOfGetAccess().getHIERARCHY_IMPLIESEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='getExcludesHierarchy' 
	{
        $current = grammarAccess.getKindOfGetAccess().getHIERARCHY_EXCLUDESEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getKindOfGetAccess().getHIERARCHY_EXCLUDESEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='getBiimpliesHierarchy' 
	{
        $current = grammarAccess.getKindOfGetAccess().getHIERARCHY_BIIMPLIESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getKindOfGetAccess().getHIERARCHY_BIIMPLIESEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='getImpliesConstraint' 
	{
        $current = grammarAccess.getKindOfGetAccess().getCONSTRAINT_IMPLIESEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getKindOfGetAccess().getCONSTRAINT_IMPLIESEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='getExcludesConstraint' 
	{
        $current = grammarAccess.getKindOfGetAccess().getCONSTRAINT_EXCLUDESEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getKindOfGetAccess().getCONSTRAINT_EXCLUDESEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='getBiimpliesConstraint' 
	{
        $current = grammarAccess.getKindOfGetAccess().getCONSTRAINT_BIIMPLIESEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getKindOfGetAccess().getCONSTRAINT_BIIMPLIESEnumLiteralDeclaration_5()); 
    }
));



// Rule KindOfCompute
ruleKindOfCompute returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='computeImplies' 
	{
        $current = grammarAccess.getKindOfComputeAccess().getIMPLIESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getKindOfComputeAccess().getIMPLIESEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='computeExcludes' 
	{
        $current = grammarAccess.getKindOfComputeAccess().getEXCLUDESEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getKindOfComputeAccess().getEXCLUDESEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='computeBiimplies' 
	{
        $current = grammarAccess.getKindOfComputeAccess().getBIIMPLIESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getKindOfComputeAccess().getBIIMPLIESEnumLiteralDeclaration_2()); 
    }
));



// Rule KindOfGetGroups
ruleKindOfGetGroups returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='getORGroups' 
	{
        $current = grammarAccess.getKindOfGetGroupsAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getKindOfGetGroupsAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='getXORGroups' 
	{
        $current = grammarAccess.getKindOfGetGroupsAccess().getXOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getKindOfGetGroupsAccess().getXOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='getMUTEXGroups' 
	{
        $current = grammarAccess.getKindOfGetGroupsAccess().getMUTEXEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getKindOfGetGroupsAccess().getMUTEXEnumLiteralDeclaration_2()); 
    }
));



// Rule KindOfComputeGroups
ruleKindOfComputeGroups returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='computeORGroups' 
	{
        $current = grammarAccess.getKindOfComputeGroupsAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getKindOfComputeGroupsAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='computeXORGroups' 
	{
        $current = grammarAccess.getKindOfComputeGroupsAccess().getXOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getKindOfComputeGroupsAccess().getXOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='computeMUTEXGroups' 
	{
        $current = grammarAccess.getKindOfComputeGroupsAccess().getMUTEXEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getKindOfComputeGroupsAccess().getMUTEXEnumLiteralDeclaration_2()); 
    }
));



// Rule BDDBackend
ruleBDDBackend returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='@backend=DEFAULT' 
	{
        $current = grammarAccess.getBDDBackendAccess().getBDD_DEFAULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBDDBackendAccess().getBDD_DEFAULTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='@backend=BDD' 
	{
        $current = grammarAccess.getBDDBackendAccess().getBDD_BASICEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBDDBackendAccess().getBDD_BASICEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='@backend=BDD_SPLOT' 
	{
        $current = grammarAccess.getBDDBackendAccess().getBDD_SPLOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBDDBackendAccess().getBDD_SPLOTEnumLiteralDeclaration_2()); 
    }
));



// Rule MergeMode
ruleMergeMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='crossproduct' 
	{
        $current = grammarAccess.getMergeModeAccess().getCROSSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMergeModeAccess().getCROSSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='union' 
	{
        $current = grammarAccess.getMergeModeAccess().getUNIONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMergeModeAccess().getUNIONEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='sunion' 
	{
        $current = grammarAccess.getMergeModeAccess().getSUNIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMergeModeAccess().getSUNIONEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='intersection' 
	{
        $current = grammarAccess.getMergeModeAccess().getINTEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMergeModeAccess().getINTEREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='diff' 
	{
        $current = grammarAccess.getMergeModeAccess().getDIFFEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getMergeModeAccess().getDIFFEnumLiteralDeclaration_4()); 
    }
));



// Rule HierarchyStrategy
ruleHierarchyStrategy returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='basic' 
	{
        $current = grammarAccess.getHierarchyStrategyAccess().getBASICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getHierarchyStrategyAccess().getBASICEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='flat' 
	{
        $current = grammarAccess.getHierarchyStrategyAccess().getFLATEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getHierarchyStrategyAccess().getFLATEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='mst' 
	{
        $current = grammarAccess.getHierarchyStrategyAccess().getMSTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getHierarchyStrategyAccess().getMSTEnumLiteralDeclaration_2()); 
    }
));



// Rule SliceMode
ruleSliceMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='including' 
	{
        $current = grammarAccess.getSliceModeAccess().getINCLUDINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSliceModeAccess().getINCLUDINGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='excluding' 
	{
        $current = grammarAccess.getSliceModeAccess().getEXCLUDINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSliceModeAccess().getEXCLUDINGEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='eq' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='neq' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getNotEqualEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLesserThanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorAccess().getLesserThanEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGreaterThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorAccess().getGreaterThanEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='==' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getREF_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorAccess().getREF_EQUALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getREF_NotEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparisonOperatorAccess().getREF_NotEqualEnumLiteralDeclaration_5()); 
    }
));



// Rule SetOperator
ruleSetOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getSetOperatorAccess().getSUNIONEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSetOperatorAccess().getSUNIONEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getSetOperatorAccess().getSDIFFEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSetOperatorAccess().getSDIFFEnumLiteralDeclaration_1()); 
    }
));





// Rule AutoConfMode
ruleAutoConfMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='RANDOM' 
	{
        $current = grammarAccess.getAutoConfModeAccess().getRANDOMEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAutoConfModeAccess().getRANDOMEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='MAX' 
	{
        $current = grammarAccess.getAutoConfModeAccess().getMAXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAutoConfModeAccess().getMAXEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='MIN' 
	{
        $current = grammarAccess.getAutoConfModeAccess().getMINEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAutoConfModeAccess().getMINEnumLiteralDeclaration_2()); 
    }
));



// Rule OPT_LISTING
ruleOPT_LISTING returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='--normal' 
	{
        $current = grammarAccess.getOPT_LISTINGAccess().getNORMALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOPT_LISTINGAccess().getNORMALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--verbose' 
	{
        $current = grammarAccess.getOPT_LISTINGAccess().getVERBOSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOPT_LISTINGAccess().getVERBOSEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='--withValues' 
	{
        $current = grammarAccess.getOPT_LISTINGAccess().getVALUE_ONLYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOPT_LISTINGAccess().getVALUE_ONLYEnumLiteralDeclaration_2()); 
    }
));



// Rule FMFormat
ruleFMFormat returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='DIMACS' 
	{
        $current = grammarAccess.getFMFormatAccess().getDIMACSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFMFormatAccess().getDIMACSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='fmlbdd' 
	{
        $current = grammarAccess.getFMFormatAccess().getFMLBDDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFMFormatAccess().getFMLBDDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='featureide' 
	{
        $current = grammarAccess.getFMFormatAccess().getFIDEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFMFormatAccess().getFIDEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='fmcalc' 
	{
        $current = grammarAccess.getFMFormatAccess().getFCALCEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFMFormatAccess().getFCALCEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='fml' 
	{
        $current = grammarAccess.getFMFormatAccess().getFFMLEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFMFormatAccess().getFFMLEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='SPLOT' 
	{
        $current = grammarAccess.getFMFormatAccess().getFSPLOTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFMFormatAccess().getFSPLOTEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='TVL' 
	{
        $current = grammarAccess.getFMFormatAccess().getFTVLEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFMFormatAccess().getFTVLEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='fd' 
	{
        $current = grammarAccess.getFMFormatAccess().getFTRISKELLEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFMFormatAccess().getFTRISKELLEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='xmi' 
	{
        $current = grammarAccess.getFMFormatAccess().getFFML2EnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFMFormatAccess().getFFML2EnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='S2T2' 
	{
        $current = grammarAccess.getFMFormatAccess().getS2T2EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFMFormatAccess().getS2T2EnumLiteralDeclaration_9()); 
    }
));



// Rule BOOL_Operator
ruleBOOL_Operator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='||' 
	{
        $current = grammarAccess.getBOOL_OperatorAccess().getBOOL_OREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBOOL_OperatorAccess().getBOOL_OREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='&&' 
	{
        $current = grammarAccess.getBOOL_OperatorAccess().getBOOL_ANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBOOL_OperatorAccess().getBOOL_ANDEnumLiteralDeclaration_1()); 
    }
));



RULE_LEFT_PAREN : '(';

RULE_RIGHT_PAREN : ')';

RULE_B_NOT : ('!'|'~');

RULE_B_AND : ('&'|'and');

RULE_B_OR : ('|'|'or');

RULE_B_IMPLY : ('->'|'implies'|'requires');

RULE_B_BIMPLY : ('<->'|'biimplies');

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_STAR : '*';

RULE_DIV : '/';

RULE_EXP : '^';

RULE_MULT : 'mult';

RULE_LEFT_BRACKET : '{';

RULE_RIGHT_BRACKET : '}';

RULE_LEFT_HOOK : '[';

RULE_RIGHT_HOOK : ']';

RULE_COMMA : ',';

RULE_META_ATTRIBUTE_SYMBOL : '@';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


