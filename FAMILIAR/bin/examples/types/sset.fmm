run "GraphicalCard.fmm" into GC
shortMSPL = { GC.GraphicalCardn2 GraphicalCardn3 GraphicalCardn8 }
print_var shortMSPL
card shortMSPL
lang = FM ( Lang : [US] European [Chinese]; )

// control structure
nGCold = card GC.*
foreach (fm in GC.*) do insert lang.Lang into fm.Intel mand end
nGCnew = card GC.* 
assert (nGCold eq nGCnew)
//foreach (fm in shortMSPL) do 
//		println "##### renaming variable... ######"
//		print_var fm 
//		valid? fm 
//		name_intel = name fm.Intel
//		renamed_intel = str_concat name_intel "prime"
//		fm = rename_feature fm.Intel as renamed_intel 
//end

//i = 0
//nMSPL = card shortMSPL
//foreach (fm in shortMSPL) do	
//	root_fm = root fm
//	name_root_ft = name root_fm
//	renamed_str = str_concat "PhilippeCorporation" name_root_ft
//	b = rename_feature root_fm as renamed_str
//	if (b) then
//		i = i + 1
//	end
//end
//assert (i eq nMSPL)


i = 0
nMSPLold = card shortMSPL
foreach (fm in shortMSPL) do		
	root_fm = root fm	
	name_root_ft = name root_fm	
	renamed_str = str_concat "PhilippeCorporation" name_root_ft	
	b = rename_feature root_fm as renamed_str	
	if (b) then		
		i = i + 1	
	end 
end
assert (i eq nMSPLold)
nMSPL = card shortMSPL
assert (nMSPL eq nMSPLold)

//foreach (fm in shortMSPL) do	root_fm = root fm	name_root_ft = name root_fm	renamed_str = str_concat "PhilippeCorporation" name_root_ft	fm = rename_feature root_fm as renamed_str end

// copy and rename




nMSPL = card shortMSPL
S = set_empty 
foreach (fm in shortMSPL) do	tempFM = copy fm	root_fm = root tempFM	name_root_ft = name root_fm	print "Args-----> " print_var name_root_ft renamed_str = str_concat "PhilippeCorporation" name_root_ft	b = rename_feature root_fm as renamed_str if (b) then set_add S tempFM end end
//foreach (fm in shortMSPL) do	
//	tempFM = copy fm	
//	root_fm = root tempFM	
//	name_root_ft = name root_fm	
//	renamed_str = str_concat "PhilippeCorporation" name_root_ft	
//	b = rename_feature root_fm as renamed_str 
//	if (b) then
//		set_add S tempFM 
//	end
//end
print_var S
print_var shortMSPL
nS = set_card S
assert (nS eq nMSPL)

//exit


//shortMSPL.foreach { v | 

//} 
//foreach (shortMSPL as fm) do 
//printinfo fm 
//fm = rename fm.Intel IntelCorp 
//end

i = 123
j = 24 + 9
k = j + i // 156
expected = 156 + 1
assert (k neq expected) 
expected = expected - 1
assert (k eq expected) 

n = 0
foreach (fm in shortMSPL) do n = n + 1 end
nMSPL = card shortMSPL
assert (nMSPL eq n)

m = 0
foreach (fm in GC.*) do m = m + 2 end

nGC = card GC.*
nGC = nGC * 2
assert (m eq nGC)

l = 0
foreach (fm in GC.*) do l = l + 1 foreach (fn in GC.*) do l = l + 1 end end
nGC = card GC.*
expected = nGC * (nGC + 1)
assert (l eq expected)

//l = 0
//foreach (fm in GC.*) do  // DO
//	l = l + 1 
//	foreach (fn in GC.*) do 
//		l = l + 1 
//	end
// // l = l + 1
//end


l2 = 0
foreach (fm in GC.*) do foreach (fn in GC.*) do l2 = l2 + 1 end l2 = l2 + 1 end
assert (l eq l2)

controlGC = card GC.*
assert (controlGC eq nGCold)


exit



