// testing the 'children' operation

// syntacs: b = children a

// a is a variable of feature type

// b is a set of features f1, f2, ..., fn child of a

// b = children fm1.A

// b is a set of features f1, f2, ..., fn child of A (present in the feature model fm1)

fm1 = FM (A : B [C] ; B : E F ; C : (I|J) ; )

root_fm1 = root fm1
s = children root_fm1
s1 = children fm1.A
assert (s eq s1) // equality of the two sets


// testing cards

ns = size s
ns1 = size s1 
ns_expected = 2
assert (ns eq ns1)
assert (ns eq ns_expected)

// another FM

fm2 = FM (A : B C E ; C : (I|J)+ ; )
root_fm2 = root fm2
s2 = children root_fm2
s21 = children fm2.A
assert (s2 eq s21)
ns2 = size s2
ns2_expected = 3
assert (ns2 eq ns2_expected)

assert (s2 neq s1) // {B, C, E} vs {B, C}


// ambiguity

sft = children A // fm1.A or fm2.A ?

bsft = isNull sft 
TRUE = true
assert (bsft eq TRUE)


fm3 = FM (Z: (W|X|Y)+; )
fm4 = FM (Z: (W|X|Y)+; )

s3 = children fm3.Z
s4 = children fm4.Z
assert (s3 neq s4) // features do not refer to the same feature model


fm5 = FM (Y: (H|J); J: [K] [L] M N;)

s5 = children fm5.J
ns5 = size s5
ns5_expected = 4
assert (ns5 eq ns5_expected)


// ns5 contains M

j = 0
m_feature = "M"
foreach (el in s5) do	
	name_el = name el	
	if (name_el eq m_feature) then		
		j = j + 1	
	end 
end
ONE = 1
assert (j eq ONE)

// ns5 does not contain O

j = 0
m_feature = "O"
foreach (el in s5) do	
	name_el = name el	
	if (name_el eq m_feature) then
		j = j + 1	
	end 
end
ZERO = 0
assert (j eq ZERO)


fm6 = FM (A : B C D E; E : (F|G) ; G: (I|J)+ ; J : L [M];)
s6 = children fm6.G // I and J

ns6 = size s6
s6_expected = 2
assert (s6_expected eq ns6)