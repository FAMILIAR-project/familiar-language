fm1 = FM (A : B [C] [D] ; C : (E|F); )
fm2 = FM (I : (J|K|L)+; )
fm3 = aggregate fm1 fm2 with { C implies J ; D and E excludes J or L ; } 

fm3bis = aggregate fm1 fm2
addConstraint { fm3bis.C implies fm3bis.J ; fm3bis.D and fm3bis.E excludes fm3bis.J or fm3bis.L ; }

assert (fm3bis eq fm3)

// another example

fm4 = FM (Z : (W|X|Y)+ ; )
fm5 = FM (R : S [T] [U] [V] ; )

fm6 = aggregate fm4 fm5 with { T implies U or V ; T implies X and W ; V excludes X or Y ; }
fm7 = aggregate fm5 fm4
addConstraint { fm7.T implies fm7.U or fm7.V ; fm7.T implies fm7.X and fm7.W ; fm7.V excludes fm7.X or fm7.Y ; }

assert (fm7 eq fm6)

exit