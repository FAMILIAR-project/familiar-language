Comparison_of_audio_synthesis_environments: ["Data interface methods"] [General] ["Programming language features"] [Technical] ; 
"Data interface methods": [In] ["As host"] ["As unit"] [Out] ; 
General: License "Primary Purpose(s)" "Main user interface type" "Development status" ; 
"Programming language features": "Textual/graphical" ["Object-oriented"] ["Type system"] ; 
Technical: ["Operating system(s)"] ["Other technical features"] ["Source code language(s)"] ["Programming (plugin) API language(s)"] ; 
In: ("C++ API, Python API"|"Multi-touch"|"LADSPA Host, scsynth can be controlled by OSC messages (Haskell, Scala, Python, Ruby, Scheme etc.)"|"MPEG-4/SA language implementation."|"bindings for Python, Lua, Java, GStreamer"|"Bidirectional Scheme to Objective-C bridge"|"binding from Haskell (hCsound)") ; 
License: (GPL|Proprietary|LGPL|"BSD-like") ; 
"Primary Purpose(s)": ("Live coding, algorithmic composition, hardware control, realtime synthesis, 2d/3d graphics programming"|"Audio manipulation, live coding, algorithmic composition"|"Realtime synthesis, live coding, pedagogy, acoustic research, algorithmic composition"|"Realtime synthesis, hardware control, GUI design"|"Realtime performance, sound synthesis, algorithmic composition, acoustic research"|"Realtime synthesis, live coding, algorithmic composition, acoustic research, all-purpose programming language"|"Realtime synthesis, audio processing, mobile music"|"Realtime synthesis, offline audio rendering, algorithmic composition, acoustic research"|"MPEG-4/SA implementation, Realtime synthesis, algorithmic composition, structured Web audio."|"Realtime synthesis, hardware control, acoustic research"|"Realtime audio + video synthesis, hardware control") ; 
"Main user interface type": (Graphical|Document|"Document, graphical for realtime") ; 
"Development status": (Immature|Mature|Stable) ; 
"Textual/graphical": ("Textual/Graphical (Cocoa/Swing/Qt)"|Textual|"Mostly textual"|"Textual/Graphical (FLTK)")? ; 
"Type system": (Dynamic|"Dynamic & static"|Static) ; 
"Operating system(s)": ("Mac OS X, Linux, Windows, FreeBSD"|"Mac OS X, Linux, Windows"|"Mac OS X, Linux, Windows, iPod, Android"|"Mac OS X/Windows"|"iOS, Mac OS X"|"Mac OS X"|"Mac OS X, Windows")? ; 
"Other technical features": ("Real-Time Dynamic Digital Filters"|"Conforming MPEG-4/SA implementation."|"IDE (QuteCsound), multitrack interface (blue); several analysis/resynthesis facilities; can compute double-precision audio; Python algorithmic composition library"|"Client-server architecture; client and server can be used independently, command-line access"|"Native access to most OS X APIs including Core Image, Quartz, QuickTime and OpenGL. Impromptu also includes its own statically typed (inferencing) systems language for heavy numeric processing - OpenGL, RT AudioDSP etc.."|"command-line access") ; 
"Source code language(s)": ("C++, Objective-C, Lua"|"Lisp, Objective-C, Scheme"|"C, C++"|"C, Objective-C"|"Scheme, C++"|"C, C++, Objective-C"|Delphi|C)? ["C++"] ; 
"Programming (plugin) API language(s)": ("C; also Python, Java, Lisp, Lua, Tcl, C++"|"C, C++, Objective-C, Scheme"|"Scheme, SAL"|"C, C++, FAUST, Haskell, Java, Lua, Python, Q, Ruby, Scheme, others"|"C++, Python")? ; 
("Lisp, Objective-C, Scheme" -> !"C, C++");
("C, C++" -> !C);
(C -> "Source code language(s)");
("C++, Objective-C, Lua" -> !"C, Objective-C");
("Lisp, Objective-C, Scheme" -> !C);
("C++, Objective-C, Lua" -> !"Scheme, C++");
("Lisp, Objective-C, Scheme" -> !"C, Objective-C");
("C++" -> !"C, C++");
("C, Objective-C" -> "Source code language(s)");
("Lisp, Objective-C, Scheme" -> !"C++, Objective-C, Lua");
("C, Objective-C" -> !"Scheme, C++");
("Lisp, Objective-C, Scheme" -> !"Scheme, C++");
("C, Objective-C" -> !C);
("C, Objective-C" -> !"C, C++");
("C++, Objective-C, Lua" -> !"C, C++");
("C++" -> !C);
("Lisp, Objective-C, Scheme" -> "Source code language(s)");
("C++" -> !"C, Objective-C");
((((((("Source code language(s)" -> "C, Objective-C") | ("Source code language(s)" -> "C++, Objective-C, Lua")) | ("Source code language(s)" -> "C++")) | ("Source code language(s)" -> "Scheme, C++")) | ("Source code language(s)" -> C)) | ("Source code language(s)" -> "C, C++")) | ("Source code language(s)" -> "Lisp, Objective-C, Scheme"));
("Scheme, C++" -> !C);
("C++" -> !"C++, Objective-C, Lua");
("C++" -> !"Scheme, C++");
("C++" -> "Source code language(s)");
("Scheme, C++" -> "Source code language(s)");
("C, C++" -> !"Scheme, C++");
("C++, Objective-C, Lua" -> !C);
("C, C++" -> "Source code language(s)");
("C++, Objective-C, Lua" -> "Source code language(s)");
("C++" -> !"Lisp, Objective-C, Scheme");